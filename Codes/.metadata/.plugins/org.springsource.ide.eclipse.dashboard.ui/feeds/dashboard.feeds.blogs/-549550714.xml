<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2015-02-02T09:43:41Z</updated>
  <entry>
    <title>Spring Cloud 1.0.0.RC2 Available Now</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/02/spring-cloud-1-0-0-rc2-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Dave Syer</name>
    </author>
    <id>tag:spring.io,2015-02-02:1952</id>
    <updated>2015-02-02T09:43:41Z</updated>
    <content type="html">&lt;p&gt;&lt;a href="http://spring.io/spring-projects/spring-cloud"&gt;Spring Cloud&lt;/a&gt; 1.0.0.RC2 is available now in the &lt;a href="http://repo.spring.io"&gt;http://repo.spring.io&lt;/a&gt; repository. There was a lot of activity pruning and curating dependencies, so users upgrading from RC1 might need to tweak their starter dependencies a bit, but hopefully we are all in a better place as a result. There were also a lot of changes in the Security features, making it easier to customize various parts of that, mainly in response to people actually using it and needing help (so thanks for the feedback). We will probably have an RC3 before the GA, but things are getting pretty close to ready.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Security OAuth 2.0.6.RELEASE Available Now</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/02/spring-security-oauth-2-0-6-release-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Dave Syer</name>
    </author>
    <id>tag:spring.io,2015-02-02:1951</id>
    <updated>2015-02-02T09:35:00Z</updated>
    <content type="html">&lt;p&gt;Spring Security OAuth 2.0.6.RELEASE is available now in the usual repositories. It&amp;rsquo;s a bug fix release, and users of 2.0.5.RELEASE should upgrade. The only critical bug was for users of JWT with refresh tokens, and there were also some people experiencing double encoding of redirect uris, which is now fixed. Highlights of new features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;p&gt;(Much requested) ability to have non-expiring refresh tokens with no customizations (just set the validity period to zero or less)&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;The /token endpoint only accepts POST requests by default&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Resource servers do not accept cookie based authentication by default (you have to switch it on)&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Resource server configuration has a few new options including the ability to inject custom error handlers&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Thanks, as usual, go to the community for contributing code and ideas. It feels like the community if growing, and that&amp;rsquo;s always good to see. Finally, watch out for a new blog on Angular JS with Spring Security and OAuth2 coming out soon here.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Why 12 Factor Application Patterns, Microservices and CloudFoundry Matter</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/30/why-12-factor-application-patterns-microservices-and-cloudfoundry-matter" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Tim Spann</name>
    </author>
    <id>tag:spring.io,2015-01-28:1949</id>
    <updated>2015-01-30T09:45:00Z</updated>
    <content type="html">&lt;p&gt;It seems like a lifetime ago, but a few short years ago I was leading a $100 million government project for a large system integrator that involved 50+ developers, 20+ testers, 15+ managers, 5+ ops and a cast of characters. Once a week we had to do our deploy. &lt;/p&gt;&lt;p&gt;Despite using Scrum, Cruise Control, SVN, Java, Eclipse, Guava, Google Guice, UML, JUnit, PMD, Findbugs, Checkstyle, MDD, TDD, eclEmma and mostly modern tools; our deploy process was a fragile, long, manual, person intensive process. Each Friday night we started. A long email thread began the process with a text check list that we emailed back and forth as each person in the process did their piece. Another architect or I would manage the process and be responsible for the Go/No Go decision and the critical DB compare step. We were using a proprietary vertical framework from a major software company for the basis of the project. It involved manually running SQL scripts, running diff scripts, visually comparing some items, checking the version control check list, checking the Cruise Control results, JUnit / Code Coverage HTML and some other generated reports. A UNIX admin would copy over the giant EAR files, SQL and a ton of giant XML files. Once there they would run a number of shell scripts to change some things, sometimes using environment variables. Then they would be moved to a special directory and the Java app server would be stopped, everything backed up. The EARs would be moved over, datasources and other configs would be copied and checked. DB change scripts would be run against Oracle and meta data would be updated/inserted/deleted via numerous sql scripts. The server would be started up. I would run a Selenium test to hit the various sites to &amp;ldquo;warm them up&amp;rdquo; as the complex proprietary DB framework needed the cache warmed and started. The first few tries would fail. &lt;/p&gt;&lt;p&gt;Once initialized, we would email the team and a person in Canada would run a different scripted web test that was our &amp;ldquo;Smoke Test&amp;rdquo;. If that worked, about 40% success, the email would pass off to the test team to start a few hours more testing. If all went well, by 2am on Saturday the site would be ready to go. That usually didn&amp;rsquo;t happen. Some minor thing would be broken because something was forgotten in the configuration or a file wasn&amp;rsquo;t committed, or someone missed one step. Giant files, no way to move pieces, this file transfer was not fast. &lt;/p&gt;&lt;p&gt;The local development machines were running Windows, Oracle JDK and Tomcat plus a special Java application to simulate an application server. For production, we ran on a UNIX Java application server with a different implementation of the JDK. It almost never went smoothly. So many weird issues with different JDKs, application servers, memory, JMS, database connections and library issues. There were over 20,000 Java classes with many Session and Entity EJBs. The only good thing was that all the items my team developed had good unit tests and everything used good domain modeling. Despite crushing deadlines, we kept our code coverage above 80% and used FindBugs/PMD/CheckStyle. We mandated peer reviews for all modules and that was very useful, but without automating that, it did add a manual step to the process. I forgot to mention that we had several hour plus ANT builds; I think I blocked that out.&lt;/p&gt;&lt;p&gt;Good code fails when you don&amp;rsquo;t have good process and a platform to help you.&lt;br/&gt;Good teams fail when you don&amp;rsquo;t have a good culture that embraces DevOps, microservices and not giant monoliths.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring XD 1.1 RC1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/29/spring-xd-1-1-rc1-released" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Mark Pollack</name>
    </author>
    <id>tag:spring.io,2015-01-28:1950</id>
    <updated>2015-01-29T01:59:01Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring XD team, I am very pleased to announce that the Spring XD 1.1 Release Candidate is now &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/xd/spring-xd/1.1.0.RC1/spring-xd-1.1.0.RC1-dist.zip"&gt;available for download.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The 1.1 RC1 release includes several new features as well as bug fixes.&lt;/p&gt;&lt;p&gt;One theme in the 1.1 release is around Stream processing. The 1.1 M2 version introduced support for Reactor’s Stream API in processing modules. The 1.1 RC1 release adds support for stream processing using RxJava’s Observable API and Spark Streaming alongside the existing Spark job support. By providing a range of options, you can pick the functional programming model that best suits the task at hand.&lt;/p&gt;&lt;p&gt;Spark Streaming integration features include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Data-Stream-Processor-Module#spark-streaming"&gt;XD Processor modules&lt;/a&gt; that act as drivers for workloads on the Spark Cluster.&lt;/li&gt;
  &lt;li&gt;An XD processor’s input DStream is generated from data received on the XD Message Bus, and the RDDs from its output DStream are sent to the bus. This allows you to immediately take advantage of the many Source modules to drive computation in Spark and direct the output to XD Sinks. This removes a great amount of complex code that you would need to write otherwise, such as mapping Kafka partitions to multiple DStreams.&lt;/li&gt;
  &lt;li&gt;The Spark Streaming driver process is automatically restarted if it dies due to the inherent module redeployment features of XD.&lt;/li&gt;
  &lt;li&gt;Simplify development and testing of Spark applications by decoupling your Spark computation code from code to setup input and output data. This allows creating integration tests using a test message bus to send specific data to the Spark module’s input channel and assert on the results contained in the output channel.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;RxJava integration features include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Data-Stream-Processor-Module#rxjava-streams"&gt;Development of processor modules using RxJava’s Observable API&lt;/a&gt; This allows you to use a functional programming model to process event streams. Combined with XD’s support for &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Deployment#stream-partitioning"&gt;Data Partitioning on the Message Bus&lt;/a&gt;, you can create very powerful distributed stream processing solutions.&lt;/li&gt;
  &lt;li&gt;Support for mapping input messages to one or multiple Observerble Stream instances, for example allowing a Stream per Kafka partition.&lt;/li&gt;
  &lt;li&gt;Refer to the &lt;a href="https://github.com/spring-projects/spring-xd-samples/tree/master/rxjava-moving-average"&gt;rxjava-moving-average&lt;/a&gt; project for an example of using RxJava’s Observable API.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Other features include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/jvalkeal/spring-xd/wiki/Running-on-YARN#working-with-container-groups"&gt;Container Group Management when running XD on YARN&lt;/a&gt;. You can now create groups of XD Admin and XD Container instances on YARN. Groups can specify the number of initial member instances, ramp up or down the number of instances at runtime, and specify specific machines or racks where they will be deployed. If any YARN containers fail, they will automatically restarted to maintain the number of instances specified for the group.&lt;/li&gt;
  &lt;li&gt;Refactored Kafka Based Message Bus and Kafka Source based on the new &lt;a href="https://github.com/spring-projects/spring-integration-kafka"&gt;Spring Integration Kafka client library&lt;/a&gt;. For the Kafka Source, this translates into new options, such as specifying the partitions that a source can listen to, or the starting offsets for replayability.&lt;/li&gt;
  &lt;li&gt;Gemfire source and sink support for multiple locators.&lt;/li&gt;
  &lt;li&gt;Improved tooling and updated examples for custom module development.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Feedback is very important, so please keep in touch with questions and comments via&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/tagged/spring-xd"&gt;StackOverflow&lt;/a&gt; &lt;code&gt;spring-xd&lt;/code&gt; tag&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://jira.spring.io/browse/XD/?selectedTab=com.atlassian.jira.jira-projects-plugin:summary-panel"&gt;Spring JIRA&lt;/a&gt; or &lt;a href="https://github.com/spring-projects/spring-xd/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Data Evans SR 2 and Dijkstra SR 5 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/28/spring-data-evans-sr-2-and-dijkstra-sr-5-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Oliver Gierke</name>
    </author>
    <id>tag:spring.io,2015-01-28:1948</id>
    <updated>2015-01-28T17:33:26Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring Data team I&amp;rsquo;d like to announce the availability of the second service release for Spring Data release train Evans as well as the fifth - and final one - of Spring Data Dijkstra. &lt;/p&gt;&lt;p&gt;The releases ship 191 tickets fixed, some of them quite significant bugfix and performance improvements and thus the releases recommended upgrades within the trains. The Dijkstra service release is planned to be the last one for that train. Users are recommended to upgrade to Evans as bug fixes will only be ported to that branch going forward.&lt;/p&gt;&lt;p&gt;Find all resolved tickets for Evans SR 2 &lt;a href="https://jira.spring.io/issues/?filter=14849"&gt;here&lt;/a&gt;, all tickets for Dijkstra SR5 &lt;a href="https://jira.spring.io/issues/?filter=14931"&gt;here&lt;/a&gt;. Up next is the first release candidate of the Fowler release train that already contains a few &lt;a href="https://github.com/spring-projects/spring-data-commons/wiki/Release-Train-Fowler"&gt;very interesting features&lt;/a&gt;. Be sure to check them out, we&amp;rsquo;re looking forward to your feedback!&lt;/p&gt;&lt;h2&gt;&lt;a href="#spring-data-evans-sr2" class="anchor" name="spring-data-evans-sr2"&gt;&lt;/a&gt;Spring Data Evans SR2&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 1.9.2 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/1.9.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.9.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.9.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.9.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 1.7.2 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/1.7.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.7.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.7.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.7.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 1.6.2 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/1.6.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.6.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.6.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.6.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 3.2.2 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/3.2.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.2.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.2.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.2.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Solr 1.3.2 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/1.3.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.3.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.3.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.3.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 1.2.2 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/1.2.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.2.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.2.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.2.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Cassandra 1.1.2 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/1.1.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.1.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.1.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.1.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 1.1.2 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/1.1.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.1.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.1.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.1.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 1.5.2 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/1.5.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.5.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.5.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.5.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 1.4.2 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/1.4.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.4.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.4.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.4.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 2.2.2 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/2.2.2.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.2.2.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.2.2.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.2.2.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#spring-data-dijkstra-sr5" class="anchor" name="spring-data-dijkstra-sr5"&gt;&lt;/a&gt;Spring Data Dijkstra SR5&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 1.8.5 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/1.8.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.8.5.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.8.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.8.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 1.6.5 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/1.6.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.6.5.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.6.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.6.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 1.5.5 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/1.5.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.5.5.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.5.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.5.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 3.1.5 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/3.1.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.1.5.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.1.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.1.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Solr 1.2.5 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/1.2.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.2.5.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.2.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.2.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 1.1.5 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/1.1.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.1.5.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.1.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.1.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Cassandra 1.0.5 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/1.0.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.0.5.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.0.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.0.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 1.0.5 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/1.0.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.0.5.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.0.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.0.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 1.4.5 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/1.4.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.4.5.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.4.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.4.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 1.3.5 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/1.3.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.3.5.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.3.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.3.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 2.1.5 - &lt;a href="http://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/2.1.5.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.1.5.RELEASE/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.1.5.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.1.5.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>The API Gateway Pattern: Angular JS and Spring Security Part IV</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/28/the-api-gateway-pattern-angular-js-and-spring-security-part-iv" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Dave Syer</name>
    </author>
    <id>tag:spring.io,2015-01-05:1906</id>
    <updated>2015-01-28T14:16:00Z</updated>
    <content type="html">&lt;p&gt;In this article we continue &lt;a href="http://spring.io/blog/2015/01/20/the-resource-server-angular-js-and-spring-security-part-iii" title="Third Article in the Series"&gt;our discussion&lt;/a&gt; of how to use &lt;a href="http://projects.spring.io/spring-security"&gt;Spring Security&lt;/a&gt; with &lt;a href="http://angularjs.org"&gt;Angular JS&lt;/a&gt; in a &amp;ldquo;single page application&amp;rdquo;. Here we show how to build an API Gateway to control the authentication and access to the backend resources using &lt;a href="http://projects.spring.io/spring-cloud/"&gt;Spring Cloud&lt;/a&gt;. This is the fourth in a series of articles, and you can catch up on the basic building blocks of the application or build it from scratch by reading the &lt;a href="http://spring.io/blog/2015/01/12/spring-and-angular-js-a-secure-single-page-application" title="First Article in the Series"&gt;first article&lt;/a&gt;, or you can just go straight to the &lt;a href="https://github.com/dsyer/spring-security-angular/tree/master/proxy"&gt;source code in Github&lt;/a&gt;. In the &lt;a href="http://spring.io/blog/2015/01/20/the-resource-server-angular-js-and-spring-security-part-iii" title="Third Article in the Series"&gt;last article&lt;/a&gt; we built a simple distributed application that used &lt;a href="https://github.com/spring-projects/spring-session/"&gt;Spring Session&lt;/a&gt; to authenticate the backend resources. In this one we make the UI server into a reverse proxy to the backend resource server, fixing the issues with the last implementation (technical complexity introduced by custom token authentication), and giving us a lot of new options for controlling access from the browser client.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Reminder: if you are working through this article with the sample application, be sure to clear your browser cache of cookies and HTTP Basic credentials. In Chrome the best way to do that for a single server is to open a new incognito window.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#creating-an-api-gateway" class="anchor" name="creating-an-api-gateway"&gt;&lt;/a&gt;Creating an API Gateway&lt;/h2&gt;&lt;p&gt;An API Gateway is a single point of entry (and control) for front end clients, which could be browser based (like the examples in this article) or mobile. The client only has to know the URL of one server, and the backend can be refactored at will with no change, which is a significant advantage. There are other advantages in terms of centralization and control: rate limiting, authentication, auditing and logging. And implementing a simple reverse proxy is really simple with &lt;a href="http://projects.spring.io/spring-cloud/"&gt;Spring Cloud&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you were following along in the code, you will know that the application implementation at the end of the &lt;a href="http://spring.io/blog/2015/01/20/the-resource-server-angular-js-and-spring-security-part-iii" title="Third Article in the Series"&gt;last article&lt;/a&gt; was a bit complicated, so it&amp;rsquo;s not a great place to iterate away from. There was, however, a halfway point which we could start from more easily, where the backend resource wasn&amp;rsquo;t yet secured with Spring Security. The source code for this is a separate project &lt;a href="https://github.com/dsyer/spring-security-angular/tree/master/vanilla"&gt;in Github&lt;/a&gt; so we are going to start from there. It has a UI server and a resource server and they are talking to each other. The resource server doesn&amp;rsquo;t have Spring Security yet so we can get the system working first and then add that layer.&lt;/p&gt;&lt;h3&gt;&lt;a href="#declarative-reverse-proxy-in-one-line" class="anchor" name="declarative-reverse-proxy-in-one-line"&gt;&lt;/a&gt;Declarative Reverse Proxy in One Line&lt;/h3&gt;&lt;p&gt;To turn it into an API Gateawy, the UI server needs one small tweak. Somewhere in the Spring configuration we need to add an &lt;code&gt;@EnableZuulProxy&lt;/code&gt; annotation, e.g. in the main (only) &lt;a href="https://github.com/dsyer/spring-security-angular/blob/master/proxy/ui/src/main/java/demo/UiApplication.java"&gt;application class&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
@RestController&#xD;
@EnableZuulProxy&#xD;
public class UiApplication {&#xD;
  ...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and in an external configuration file we need to map a local resource in the UI server to a remote one in the &lt;a href="https://github.com/dsyer/spring-security-angular/blob/master/proxy/ui/src/main/resources/application.yml"&gt;external configuration&lt;/a&gt; (&amp;ldquo;application.yml&amp;rdquo;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint yaml"&gt;security:&#xD;
  ...&#xD;
zuul:&#xD;
  routes:&#xD;
    resource:&#xD;
      path: /resource/**&#xD;
      url: http://localhost:9000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This says &amp;ldquo;map paths with the pattern /resource/** in this server to the same paths in the remote server at localhost:9000&amp;rdquo;. Simple and yet effective (OK so it&amp;rsquo;s 6 lines including the YAML, but you don&amp;rsquo;t always need that)!&lt;/p&gt;&lt;p&gt;All we need to make this work is the right stuff on the classpath. For that purpose we have a few new lines in our Maven POM:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependencyManagement&amp;gt;&#xD;
  &amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
      &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
      &amp;lt;artifactId&amp;gt;spring-cloud-starter-parent&amp;lt;/artifactId&amp;gt;&#xD;
      &amp;lt;version&amp;gt;1.0.0.BUILD-SNAPSHOT&amp;lt;/version&amp;gt;&#xD;
      &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
      &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
  &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;&#xD;
&#xD;
&amp;lt;dependencies&amp;gt;&#xD;
  &amp;lt;dependency&amp;gt;&#xD;
    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-zuul&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;/dependency&amp;gt;&#xD;
  ...&#xD;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note the use of the &amp;ldquo;spring-cloud-starter-zuul&amp;rdquo; - it&amp;rsquo;s a starter POM just like the Spring Boot ones, but it governs the dependencies we need for this Zuul proxy. We are also using &lt;code&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/code&gt; because we want to be able to depend on all the versions of transitive dependencies being correct.&lt;/p&gt;&lt;h3&gt;&lt;a href="#consuming-the-proxy-in-the-client" class="anchor" name="consuming-the-proxy-in-the-client"&gt;&lt;/a&gt;Consuming the Proxy in the Client&lt;/h3&gt;&lt;p&gt;With those changes in place our application still works, but we haven&amp;rsquo;t actually used the new proxy yet until we modify the client. Fortunately that&amp;rsquo;s trivial. We just need to go from this implementation of the &amp;ldquo;home&amp;rdquo; controller:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;angular.module(&amp;#39;hello&amp;#39;, [ &amp;#39;ngRoute&amp;#39; ])&#xD;
...&#xD;
.controller(&amp;#39;home&amp;#39;, function($scope, $http) {&#xD;
	$http.get(&amp;#39;http://localhost:9000/&amp;#39;).success(function(data) {&#xD;
		$scope.greeting = data;&#xD;
	})&#xD;
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to a local resource:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;angular.module(&amp;#39;hello&amp;#39;, [ &amp;#39;ngRoute&amp;#39; ])&#xD;
...&#xD;
.controller(&amp;#39;home&amp;#39;, function($scope, $http) {&#xD;
	$http.get(&amp;#39;resource/&amp;#39;).success(function(data) {&#xD;
		$scope.greeting = data;&#xD;
	})&#xD;
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now when we fire up the servers everything is working and the requests are being proxied through the UI (API Gateway) to the resource server.&lt;/p&gt;&lt;h3&gt;&lt;a href="#further-simplifications" class="anchor" name="further-simplifications"&gt;&lt;/a&gt;Further Simplifications&lt;/h3&gt;&lt;p&gt;Even better: we don&amp;rsquo;t need the CORS filter any more in the resource server. We threw that one together pretty quickly anyway, and it should have been a red light that we had to do anything as technically focused by hand (especially where it concerns security). Fortunately it is now redundant, so we can just throw it away, and go back to sleeping at night!&lt;/p&gt;&lt;h2&gt;&lt;a href="#securing-the-resource-server" class="anchor" name="securing-the-resource-server"&gt;&lt;/a&gt;Securing the Resource Server&lt;/h2&gt;&lt;p&gt;You might remember in the intermediate state that we started from there is no security in place for the resource server. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Aside: Lack of software security might not even be a problem if your network architecture mirrors the application architecture (you can just make the resource server physically inaccessible to anyone but the UI server). As a simple demonstration of that we can make the resource server only accessible on localhost. Just add this to &lt;code&gt;application.properties&lt;/code&gt; in the resource server:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;    server.address: 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;Wow, that was easy! Do that with a network address that&amp;rsquo;s only visible in your data center and you have a security solution that works for all resource servers and all user desktops.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Suppose that we decide we do need security at the software level (quite likely for a number of reasons). That&amp;rsquo;s not going to be a problem, because all we need to do is add Spring Security as a dependency (in the &lt;a href="https://github.com/dsyer/spring-security-angular/blob/master/proxy/resource/pom.xml"&gt;resource server POM&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s enough to get us a secure resource server, but it won&amp;rsquo;t get us a working application yet, for the same reason that it didn&amp;rsquo;t in &lt;a href="http://spring.io/blog/2015/01/20/the-resource-server-angular-js-and-spring-security-part-iii" title="Third Article in the Series"&gt;Part III&lt;/a&gt;: there is no shared authentication state between the two servers.&lt;/p&gt;&lt;h2&gt;&lt;a href="#sharing-authentication-state" class="anchor" name="sharing-authentication-state"&gt;&lt;/a&gt;Sharing Authentication State&lt;/h2&gt;&lt;p&gt;We can use the same mechanism to share authentication (and CSRF) state as we did in the last, i.e. &lt;a href="https://github.com/spring-projects/spring-session/"&gt;Spring Session&lt;/a&gt;. We add the dependency to both servers as before:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.session&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-session&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;1.0.0.RELEASE&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;&#xD;
&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-boot-starter-redis&amp;lt;/artifactId&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;but this time the configuration is much simpler because we can just add the same &lt;code&gt;Filter&lt;/code&gt; declaration to both. First the UI server (adding &lt;code&gt;@EnableRedisHttpSession&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
@RestController&#xD;
@EnableZuulProxy&#xD;
@EnableRedisHttpSession&#xD;
public class UiApplication {&#xD;
&#xD;
  ...&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then the resource server. There are two changes to make: one is adding &lt;code&gt;@EnableRedisHttpSession&lt;/code&gt; and a &lt;code&gt;HeaderHttpSessionStrategy&lt;/code&gt; bean to the &lt;code&gt;ResourceApplication&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
@RestController&#xD;
@EnableRedisHttpSession&#xD;
class ResourceApplication {&#xD;
  ...&#xD;
  @Bean&#xD;
  HeaderHttpSessionStrategy sessionStrategy() {&#xD;
    new HeaderHttpSessionStrategy();&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and the other is to explicitly ask for a non-stateless session creation policy in &lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;security.sessions: NEVER
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As long as redis is still running in the background (use the &lt;a href="https://github.com/dsyer/spring-security-angular/tree/master/proxy/fig.yml"&gt;&lt;code&gt;fig.yml&lt;/code&gt;&lt;/a&gt; if you like to start it) then the system will work. Load the homepage for the UI at &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt; and login and you will see the message from the backend rendered on the homepage.&lt;/p&gt;&lt;h2&gt;&lt;a href="#how-does-it-work" class="anchor" name="how-does-it-work"&gt;&lt;/a&gt;How Does it Work?&lt;/h2&gt;&lt;p&gt;What is going on behind the scenes now? First we can look at the HTTP requests in the UI server (and API Gateway):&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Verb &lt;/th&gt;
      &lt;th&gt;Path &lt;/th&gt;
      &lt;th&gt;Status &lt;/th&gt;
      &lt;th&gt;Response&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;GET &lt;/td&gt;
      &lt;td&gt;/ &lt;/td&gt;
      &lt;td&gt;200 &lt;/td&gt;
      &lt;td&gt;index.html&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET &lt;/td&gt;
      &lt;td&gt;/css/angular-bootstrap.css &lt;/td&gt;
      &lt;td&gt;200 &lt;/td&gt;
      &lt;td&gt;Twitter bootstrap CSS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET &lt;/td&gt;
      &lt;td&gt;/js/angular-bootstrap.js &lt;/td&gt;
      &lt;td&gt;200 &lt;/td&gt;
      &lt;td&gt;Bootstrap and Angular JS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET &lt;/td&gt;
      &lt;td&gt;/js/hello.js &lt;/td&gt;
      &lt;td&gt;200 &lt;/td&gt;
      &lt;td&gt;Application logic&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET &lt;/td&gt;
      &lt;td&gt;/user &lt;/td&gt;
      &lt;td&gt;302 &lt;/td&gt;
      &lt;td&gt;Redirect to login page&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET &lt;/td&gt;
      &lt;td&gt;/login &lt;/td&gt;
      &lt;td&gt;200 &lt;/td&gt;
      &lt;td&gt;Whitelabel login page (ignored)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET &lt;/td&gt;
      &lt;td&gt;/resource &lt;/td&gt;
      &lt;td&gt;302 &lt;/td&gt;
      &lt;td&gt;Redirect to login page&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET &lt;/td&gt;
      &lt;td&gt;/login &lt;/td&gt;
      &lt;td&gt;200 &lt;/td&gt;
      &lt;td&gt;Whitelabel login page (ignored)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET &lt;/td&gt;
      &lt;td&gt;/login.html &lt;/td&gt;
      &lt;td&gt;200 &lt;/td&gt;
      &lt;td&gt;Angular login form partial&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;POST &lt;/td&gt;
      &lt;td&gt;/login &lt;/td&gt;
      &lt;td&gt;302 &lt;/td&gt;
      &lt;td&gt;Redirect to home page (ignored)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET &lt;/td&gt;
      &lt;td&gt;/user &lt;/td&gt;
      &lt;td&gt;200 &lt;/td&gt;
      &lt;td&gt;JSON authenticated user&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET &lt;/td&gt;
      &lt;td&gt;/resource &lt;/td&gt;
      &lt;td&gt;200 &lt;/td&gt;
      &lt;td&gt;(Proxied) JSON greeting&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;p&gt;That&amp;rsquo;s identical to the sequence at the end of &lt;a href="http://spring.io/blog/2015/01/12/the-login-page-angular-js-and-spring-security-part-ii" title="Second Article in the Series"&gt;Part II&lt;/a&gt; except for the fact that the cookie names are slightly different (&amp;ldquo;SESSION&amp;rdquo; instead of &amp;ldquo;JSESSIONID&amp;rdquo;) because we are using Spring Session. But the architecture is different and that last request to &amp;ldquo;/resource&amp;rdquo; is special because it was proxied to the resource server. &lt;/p&gt;&lt;p&gt;We can see the reverse proxy in action by looking at the &amp;ldquo;/trace&amp;rdquo; endpoint in the UI server (from Spring Boot Actuator, which we added with the Spring Cloud dependencies). Go to &lt;a href="http://localhost:8080/trace"&gt;http://localhost:8080/trace&lt;/a&gt; in a browser and scroll to the end (if you don&amp;rsquo;t have one already get a JSON plugin for your browser to make it nice and readable). You will need to authenticate with HTTP Basic (browser popup), but the same credentials are valid as for your login form. At or near the end you should see a pair of requests something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;{&#xD;
  &amp;quot;timestamp&amp;quot;: 1420558194546,&#xD;
  &amp;quot;info&amp;quot;: {&#xD;
    &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;,&#xD;
    &amp;quot;path&amp;quot;: &amp;quot;/&amp;quot;,&#xD;
    &amp;quot;query&amp;quot;: &amp;quot;&amp;quot;&#xD;
    &amp;quot;remote&amp;quot;: true,&#xD;
    &amp;quot;proxy&amp;quot;: &amp;quot;resource&amp;quot;,&#xD;
    &amp;quot;headers&amp;quot;: {&#xD;
      &amp;quot;request&amp;quot;: {&#xD;
        &amp;quot;accept&amp;quot;: &amp;quot;application/json, text/plain, */*&amp;quot;,&#xD;
        &amp;quot;x-xsrf-token&amp;quot;: &amp;quot;542c7005-309c-4f50-8a1d-d6c74afe8260&amp;quot;,&#xD;
        &amp;quot;cookie&amp;quot;: &amp;quot;SESSION=c18846b5-f805-4679-9820-cd13bd83be67; XSRF-TOKEN=542c7005-309c-4f50-8a1d-d6c74afe8260&amp;quot;,&#xD;
        &amp;quot;x-forwarded-prefix&amp;quot;: &amp;quot;/resource&amp;quot;,&#xD;
        &amp;quot;x-forwarded-host&amp;quot;: &amp;quot;localhost:8080&amp;quot;&#xD;
      },&#xD;
      &amp;quot;response&amp;quot;: {&#xD;
        &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json;charset=UTF-8&amp;quot;,&#xD;
        &amp;quot;status&amp;quot;: &amp;quot;200&amp;quot;&#xD;
      }&#xD;
    },&#xD;
  }&#xD;
},&#xD;
{&#xD;
  &amp;quot;timestamp&amp;quot;: 1420558200232,&#xD;
  &amp;quot;info&amp;quot;: {&#xD;
    &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;,&#xD;
    &amp;quot;path&amp;quot;: &amp;quot;/resource/&amp;quot;,&#xD;
    &amp;quot;headers&amp;quot;: {&#xD;
      &amp;quot;request&amp;quot;: {&#xD;
        &amp;quot;host&amp;quot;: &amp;quot;localhost:8080&amp;quot;,&#xD;
        &amp;quot;accept&amp;quot;: &amp;quot;application/json, text/plain, */*&amp;quot;,&#xD;
        &amp;quot;x-xsrf-token&amp;quot;: &amp;quot;542c7005-309c-4f50-8a1d-d6c74afe8260&amp;quot;,&#xD;
        &amp;quot;cookie&amp;quot;: &amp;quot;SESSION=c18846b5-f805-4679-9820-cd13bd83be67; XSRF-TOKEN=542c7005-309c-4f50-8a1d-d6c74afe8260&amp;quot;&#xD;
      },&#xD;
      &amp;quot;response&amp;quot;: {&#xD;
        &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json;charset=UTF-8&amp;quot;,&#xD;
        &amp;quot;status&amp;quot;: &amp;quot;200&amp;quot;&#xD;
      }&#xD;
    }&#xD;
  }&#xD;
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The second entry there is the request from the client to the gateway on &amp;ldquo;/resource&amp;rdquo; and you can see the cookies (added by the browser) and the CSRF header (added by Angular as discussed in &lt;a href="second"&gt;Part II&lt;/a&gt;). The first entry has &lt;code&gt;remote: true&lt;/code&gt; and that means it&amp;rsquo;s tracing the call to the resource server. You can see it went out to a uri path &amp;ldquo;/&amp;rdquo; and you can see that (crucially) the cookies and CSRF headers have been sent too. Without Spring Session these headers would be meaningless to the resource server, but the way we have set it up it can now use those headers to re-constitute a session with authentication and CSRF token data. So the request is permitted and we are in business!&lt;/p&gt;&lt;h2&gt;&lt;a href="#conclusion" class="anchor" name="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;We covered quite a lot in this article but we got to a really nice place where there is a minimal amount of boilerplate code in our two servers, they are both nicely secure and the user experience isn&amp;rsquo;t compromised. That alone would be a reason to use the API Gateway pattern, but really we have only scratched the surface of what that might be used for (Netflix uses it for &lt;a href="https://github.com/Netflix/zuul/wiki/How-We-Use-Zuul-At-Netflix"&gt;a lot of things&lt;/a&gt;). Read up on &lt;a href="http://projects.spring.io/spring-cloud/"&gt;Spring Cloud&lt;/a&gt; to find out more on how to make it easy to add more features to the gateway. The next article in this series will extend the application architecture a bit by extracting the authentication responsibilities to a separate server (the Single Sign On pattern).&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - January 27th, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/28/this-week-in-spring-january-27th-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-01-28:1946</id>
    <updated>2015-01-28T04:24:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! As usual, we&amp;rsquo;ve got a lot to cover so let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Join Andy Wilkinson as he discusses REST API documentation, swagger, and more in a webinar on &lt;a href="https://spring.io/blog/2015/01/20/webinar-documenting-restful-apis"&gt;Tuesday, Feb 3rd - Documenting RESTful APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sabby Anandan is joining us for the Spring XD 1.1 launch webinar on &lt;a href="https://spring.io/blog/2015/01/20/webinar-spring-xd-a-platform-for-data-at-scale-and-developer-productivity"&gt;Tuesday, Feb 17th - Spring XD: A Platform for data at scale and developer productivity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Don&amp;rsquo;t miss Rob Winch as he takes a fresh look at HTTPSession for the cloud. His webinar is on &lt;a href="https://spring.io/blog/2015/01/20/webinar-introducing-spring-session"&gt;Tuesday, Feb 24th, 2015 Webinar: Introducing Spring Session&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I put together a look at 12-factor app-style &lt;a href="https://spring.io/blog/2015/01/27/12-factor-app-style-backing-services-with-spring-and-cloud-foundry"&gt;backing service consumption in Spring, and using Cloud Foundry&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out this talk introducing system administration &lt;a href="https://spring.io/blog/2015/01/26/springone2gx-2014-replay-groovy-for-system-administrators"&gt;using Groovy from Netflix&amp;rsquo;s Dan Woods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Apache Tomcat contributors Stuart Williams and Daniel Mikusa&amp;rsquo;s SpringOne2GX 2014 talk - &lt;a href="https://spring.io/blog/2015/01/26/springone2gx-2014-replay-fastest-servlets-in-the-west"&gt;&lt;em&gt;Fastest Servlets in the West?&lt;/em&gt;&lt;/a&gt; - is now available online! Check it out!&lt;/li&gt;
  &lt;li&gt;Check out Spring Social lead Craig Walls&amp;rsquo; SpringOne2GX 2014 talk, &lt;a href="https://spring.io/blog/2015/01/26/springone2gx-2014-replay-booting-up-spring-social"&gt;&lt;em&gt;Booting up Spring Social&lt;/em&gt;&lt;/a&gt;, which introduces the various ways that Spring Boot simplifies (even further!) using Spring Social.&lt;/li&gt;
  &lt;li&gt;Billy Yarosh put together a nice &lt;a href="http://keaplogik.blogspot.com/2015/01/spring-hateoas-embedded-resources-with.html?spref=tw"&gt;blog on using Spring HATEOAS&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Are you following &lt;a href="http://www.thisweekincf.com/blog/2015/01/19/this-week-in-cloud-foundry-19th-january-2015/"&gt;&lt;em&gt;This Week in Cloud Foundry&lt;/em&gt;&lt;/a&gt;?&lt;/li&gt;
  &lt;li&gt;Check out this nice post &lt;a href="http://g00glen00b.be/spring-boot-rest-assured/"&gt;on integration testing with Spring Boot and RestAssured&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Our pal &lt;em&gt;Mkyong&lt;/em&gt; is back, this time with a &lt;a href="http://www.mkyong.com/spring/spring-profiles-example/"&gt;post on using Spring profiles&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Florian Hohpf&amp;rsquo;s post introduces logging to Redis &lt;a href="http://www.javacodegeeks.com/2015/01/logging-to-redis-using-spring-boot-and-logback.html"&gt;using Spring Boot and Logback&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Want to use &lt;a href="http://stackoverflow.com/questions/28134883/spring-boot-using-a-service-in-quartz-job-execution"&gt;Quartz in Spring Boot&lt;/a&gt;? This StackOverflow was short and sweet and answers a question I&amp;rsquo;ve seen elsewhere about getting Quartz jobs working that used to work.&lt;/li&gt;
  &lt;li&gt;Driss Amri put together anice introduction &lt;a href="http://www.drissamri.be/blog/technology/modern-java-web-applications-spring-boot-thymeleaf-angularjs/"&gt;to using Spring Boot and Thymeleaf for modern web application development&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content>
  </entry>
  <entry>
    <title>12-Factor App-Style Backing Services with Spring and Cloud Foundry</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/27/12-factor-app-style-backing-services-with-spring-and-cloud-foundry" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-01-28:1945</id>
    <updated>2015-01-27T23:00:00Z</updated>
    <content type="html">&lt;p&gt;The &lt;a href="http://12factor.net/"&gt;12 Factor App Manifesto&lt;/a&gt; talks about &lt;a href="http://12factor.net/backing-services"&gt;backing services&lt;/a&gt; at length. A backing service is, basically, any networked attached service that your application consumes to do its job. This might be a MongoDB instance, PostgreSQL database, a binary store like Amazon&amp;rsquo;s S3, metrics-gathering services like New Relic, a RabbitMQ or ActiveMQ message queue, a Memcached or Redis-based cache, an FTP service, an email service or indeed anything else. The distinction is not so much &lt;em&gt;what&lt;/em&gt; the service is so much as &lt;em&gt;how it&amp;rsquo;s exposed and consumed in an application&lt;/em&gt;. To the app, both are attached resources, accessed via a URL or other locator/credentials stored in the configuration.&lt;/p&gt;&lt;p&gt;We looked at how to use &lt;a href="https://spring.io/blog/2015/01/13/configuring-it-all-out-or-12-factor-app-style-configuration-with-spring"&gt;&lt;em&gt;configuration&lt;/em&gt;&lt;/a&gt; to extricate magic strings like locators and credentials from the application code and externalize it. We also &lt;a href="https://spring.io/blog/2015/01/20/microservice-registration-and-discovery-with-spring-cloud-and-netflix-s-eureka"&gt;looked at the use of service registries&lt;/a&gt; to keep a sort of living &lt;em&gt;phone book&lt;/em&gt; of microservices in a dynamic (typically cloud) environment.&lt;/p&gt;&lt;p&gt;In this post, we&amp;rsquo;ll look at the way &lt;a href="http://en.wikipedia.org/wiki/Platform_as_a_service"&gt;Platform-as-a-Service (PaaS) environments&lt;/a&gt; like &lt;a href="http://cloudfoundry.org"&gt;Cloud Foundry&lt;/a&gt; or Heroku typically expose &lt;em&gt;backing services&lt;/em&gt;, and look at ways to consume those services from inside a Spring application. For our examples, we&amp;rsquo;ll use Cloud Foundry because it&amp;rsquo;s open-source and easy to run in any datacenter or hosted, though most of this is pretty straightforward to apply on Heroku.&lt;/p&gt;&lt;p&gt;My friend &lt;a href="https://twitter.com/ab415"&gt;Abby Gregory Kearns&lt;/a&gt; put together a very nice high-level overview of the &lt;a href="http://blog.pivotal.io/cloud-foundry-pivotal/products/why-services-are-essential-to-your-platform-as-a-service"&gt;role and value of Cloud Foundry&amp;rsquo;s backing services portfolio&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;A PaaS like Cloud Foundry exposes backing services as operating system process-local environment variables. Environment variables are convenient because they work for all languages and runtimes, and they&amp;rsquo;re easy to change from one environment to another. This is &lt;em&gt;way&lt;/em&gt; simpler than trying to get JNDI up and running on a local machine, for example, and promotes portable builds. I intend to look at backing services specifically through the lens of current-day Cloud Foundry in this post. Keep in mind though the approach is specifically intended to promote portable builds &lt;em&gt;outside&lt;/em&gt; of a cloud environment. Spring is tailor-made to be portable; dependency injection promotes decoupling the a beans (like, for example, that which comes from a backing service) initialization and acquisition logic from the site of its use. We can use Spring to write code that thinks about &lt;code&gt;javax.sql.DataSources&lt;/code&gt; and then write configuration to source that &lt;code&gt;DataSource&lt;/code&gt; from the right contexts and configuration as the application moves from one environment to another.&lt;/p&gt;&lt;p&gt;The runtime under the next version of Cloud Foundry (hitherto referred to as &lt;em&gt;Diego&lt;/em&gt; in the press) is Docker-first and Docker-native. Docker, of course, makes it easy to containerize applications, and the interface between the containerized application and the outside world is kept intentionally minimal, again, to promote portable applications. One of the key inputs in a Docker image is, you guessed it, environment variables! Our pal Chris Richardson has done a few nice posts on both packaging and building &lt;a href="http://plainoldobjects.com/2014/11/16/deploying-spring-boot-based-microservices-with-docker/?utm_content=bufferc3d35&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer"&gt;Spring Boot-based Docker images&lt;/a&gt; and on &lt;a href="http://plainoldobjects.com/2015/01/14/need-to-install-mongodb-rabbitmq-or-mysql-use-docker-to-simplify-dev-and-test/"&gt;standing up backing-services&lt;/a&gt;. We won&amp;rsquo;t look at Docker in this post (though, stay tuned!), but it&amp;rsquo;s important to internalize: environment variables are easy and pliable ways fo externalizing backing service connection information.&lt;/p&gt;&lt;h2&gt;&lt;a href="#a-simple-spring-boot-application-that-talks-to-a-jdbc-code-datasource-code" class="anchor" name="a-simple-spring-boot-application-that-talks-to-a-jdbc-code-datasource-code"&gt;&lt;/a&gt;A Simple Spring Boot Application that talks to a JDBC &lt;code&gt;DataSource&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Here&amp;rsquo;s a simple Spring Boot application that inserts and exposes a few records from a &lt;code&gt;DataSource&lt;/code&gt; bean which Spring Boot will automatically create for us because we have the H2 embedded database driver on the CLASSPATH. If Spring Boot does not detect a bean of type &lt;code&gt;javax.sql.DataSource&lt;/code&gt; and it &lt;em&gt;does&lt;/em&gt; detect an embedded database driver (H2, Derby, HSQL), it will automatically create an embedded &lt;code&gt;javax.sql.DataSource&lt;/code&gt; bean. This example uses JPA to map records to the database. Here are the Maven dependencies:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Group ID &lt;/th&gt;
      &lt;th&gt;Artifact ID &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;com.h2database&lt;/code&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code&gt;h2&lt;/code&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;org.springframework.boot&lt;/code&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;org.springframework.boot&lt;/code&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code&gt;spring-boot-starter-data-rest&lt;/code&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;org.springframework.boot&lt;/code&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code&gt;spring-boot-starter-test&lt;/code&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;org.springframework.boot&lt;/code&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code&gt;spring-boot-starter-actuator&lt;/code&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;p&gt;Here is the sample Java code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package demo;&#xD;
&#xD;
import org.springframework.boot.CommandLineRunner;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.data.jpa.repository.JpaRepository;&#xD;
import org.springframework.data.rest.core.annotation.RepositoryRestResource;&#xD;
&#xD;
import javax.persistence.Entity;&#xD;
import javax.persistence.GeneratedValue;&#xD;
import javax.persistence.Id;&#xD;
import java.util.Arrays;&#xD;
&#xD;
@SpringBootApplication&#xD;
public class DemoApplication {&#xD;
&#xD;
	public static void main(String[] args) {&#xD;
		SpringApplication.run(DemoApplication.class, args);&#xD;
	}&#xD;
&#xD;
	@Bean&#xD;
	CommandLineRunner seed(ReservationRepository rr) {&#xD;
		return args -&amp;gt; Arrays.asList(&amp;quot;Phil,Webb&amp;quot;, &amp;quot;Josh,Long&amp;quot;, &amp;quot;Dave,Syer&amp;quot;, &amp;quot;Spencer,Gibb&amp;quot;).stream()&#xD;
			.map(s -&amp;gt; s.split(&amp;quot;,&amp;quot;))&#xD;
			.forEach(namePair -&amp;gt; rr.save(new Reservation(namePair[0], namePair[1])));&#xD;
	}&#xD;
}&#xD;
&#xD;
@RepositoryRestResource&#xD;
interface ReservationRepository extends JpaRepository&amp;lt;Reservation, Long&amp;gt; {&#xD;
}&#xD;
&#xD;
@Entity&#xD;
class Reservation {&#xD;
&#xD;
	@Id&#xD;
	@GeneratedValue&#xD;
	private Long id;&#xD;
&#xD;
	private String firstName, lastName;&#xD;
&#xD;
	Reservation() {&#xD;
	}&#xD;
&#xD;
	public Reservation(String firstName, String lastName) {&#xD;
		this.firstName = firstName;&#xD;
		this.lastName = lastName;&#xD;
	}&#xD;
&#xD;
	public Long getId() {&#xD;
		return id;&#xD;
	}&#xD;
&#xD;
	public String getFirstName() {&#xD;
		return firstName;&#xD;
	}&#xD;
&#xD;
	public String getLastName() {&#xD;
		return lastName;&#xD;
	}&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#creating-and-binding-backing-services-in-cloud-foundry" class="anchor" name="creating-and-binding-backing-services-in-cloud-foundry"&gt;&lt;/a&gt;Creating and Binding Backing Services in Cloud Foundry&lt;/h2&gt;&lt;p&gt;The application works locally, but let&amp;rsquo;s turn now to making it run on Cloud Foundry where it&amp;rsquo;ll need to be told how to connect to the backing service (an instance of PostgreSQL) exposed for it.&lt;/p&gt;&lt;p&gt;Cloud Foundry comes in many flavors. Like Heroku, you can run it hosted in an AWS-based flavor that&amp;rsquo;s &lt;a href="http://run.pivotal.io"&gt;available as Pivotal Web Services&lt;/a&gt;. You can get a free trial account. You can use Pivotal&amp;rsquo;s shrink-wrapped variant, &lt;a href="http://www.pivotal.io/platform-as-a-service/pivotal-cf"&gt;Pivotal Cloud Foundry&lt;/a&gt;, and run that in your data center, if you like. Alternatively, you can &lt;a href="http://cloudfoundry.org"&gt;use the open-source bits&lt;/a&gt; and run that, too. Or use any of the numerous other implementations from the likes of &lt;a href="https://console.ng.bluemix.net/"&gt;IBM&lt;/a&gt; and &lt;a href="http://www8.hp.com/us/en/cloud/helion-devplatform-overview.html"&gt;HP&lt;/a&gt;. At any rate, you&amp;rsquo;ll end up with a PaaS that behaves basically the same with respect to backing services.&lt;/p&gt;&lt;p&gt;Adding a backing service is a declarative function: simply &lt;em&gt;create&lt;/em&gt; a service and then bind it. Cloud Foundry features a &lt;em&gt;marketplace&lt;/em&gt; command: &lt;code&gt;cf marketplace&lt;/code&gt;. For the 80% cases, you should be able to pick from among the options in the &lt;code&gt;cf marketplace&lt;/code&gt; output. Once you&amp;rsquo;ve picked a service, create an instance of it, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;cf create-service elephantsql turtle postgresql-db
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note specifically that &lt;code&gt;postgresql-db&lt;/code&gt; is the backing service name, &lt;code&gt;elephantsql&lt;/code&gt; is the service provider name, and &lt;code&gt;turtle&lt;/code&gt; is the (free) tier &lt;em&gt;plan&lt;/em&gt; name. With that in hand, you can &lt;em&gt;bind&lt;/em&gt; the service to your deployed application. You can use the &lt;code&gt;cf&lt;/code&gt; CLI, or simply declare a backing service dependency in your application&amp;rsquo;s &lt;code&gt;manifest.yml&lt;/code&gt; file.&lt;/p&gt;&lt;p&gt;Here&amp;rsquo;s the basic &lt;code&gt;manifest.yml&lt;/code&gt; for all our samples. The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt; change from one manifest to another, but the examples for this post use this newly created &lt;code&gt;postgresql-db&lt;/code&gt; service.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;---&#xD;
applications:&#xD;
- name: simple-backing-services&#xD;
	memory: 512M&#xD;
	instances: 1&#xD;
	host: simple-backing-services-${random-word}&#xD;
	domain: cfapps.io&#xD;
	path: target/simple.jar&#xD;
	services:&#xD;
		- postgresql-db&#xD;
	env:&#xD;
		SPRING_PROFILES_ACTIVE: cloud&#xD;
		DEBUG: &amp;quot;true&amp;quot;&#xD;
		debug: &amp;quot;true&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, let&amp;rsquo;s look at a few different ways to consume the backing service and look at some of their strengths and weaknesses.&lt;/p&gt;&lt;p&gt;We&amp;rsquo;ll use &lt;a href="http://start.spring.io"&gt;Spring Boot&lt;/a&gt;, at a minimum, for all of these examples. Spring Boot offers the Spring Boot Actuator module. It provides very helpful information about the application - metrics, environment dumps, a listing of all the defined beans, etc. We&amp;rsquo;ll use some of these endpoints to get insight into the environment variables and system properties exposed when running a Spring application, and to understand things like the profile under which Spring Boot is running. Add the Spring Boot Actuator in your Maven or Gradle build. The &lt;code&gt;groupId&lt;/code&gt; is &lt;code&gt;org.springframework.boot&lt;/code&gt; and the &lt;code&gt;artifactId&lt;/code&gt; is &lt;code&gt;spring-boot-starter-actuator&lt;/code&gt;. You don&amp;rsquo;t need to specify the version if you&amp;rsquo;re using the a Spring Boot generated from &lt;a href="http://start.spring.io"&gt;&lt;code&gt;start.spring.io&lt;/code&gt;&lt;/a&gt; or the &lt;code&gt;spring init&lt;/code&gt; CLI command.&lt;/p&gt;&lt;h2&gt;&lt;a href="#cloud-foundry-rsquo-s-auto-reconfiguration" class="anchor" name="cloud-foundry-rsquo-s-auto-reconfiguration"&gt;&lt;/a&gt;Cloud Foundry&amp;rsquo;s Auto-Reconfiguration&lt;/h2&gt;&lt;p&gt;The &lt;a href="https://github.com/cloudfoundry/java-buildpack/blob/master/docs/framework-spring_auto_reconfiguration.md"&gt;Cloud Foundry Java buildpack&lt;/a&gt; does &lt;em&gt;auto reconfiguration&lt;/em&gt; for you. &lt;a href="https://github.com/cloudfoundry/java-buildpack-auto-reconfiguration"&gt;From the docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Auto-reconfiguration consists of three parts. First, it adds the &lt;code&gt;cloud&lt;/code&gt; profile to Spring&amp;rsquo;s list of active profiles. Second it exposes all of the properties contributed by Cloud Foundry as a &lt;code&gt;PropertySource&lt;/code&gt; in the &lt;code&gt;ApplicationContext&lt;/code&gt;. Finally it re-writes the bean defintitions of various types to connect automatically with services bound to the application. The types that are rewritten are as follows:&lt;/p&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;Bean Type &lt;/th&gt;
        &lt;th&gt;Service Type &lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;javax.sql.DataSource&lt;/code&gt; &lt;/td&gt;
        &lt;td&gt;Relational Data Services (e.g. ClearDB, ElephantSQL) &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;org.springframework.amqp.rabbit.connection.ConnectionFactory&lt;/code&gt; &lt;/td&gt;
        &lt;td&gt;RabbitMQ Service (e.g. CloudAMQP) &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;org.springframework.data.mongodb.MongoDbFactory&lt;/code&gt; &lt;/td&gt;
        &lt;td&gt;Mongo Service (e.g. MongoLab) &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;org.springframework.data.redis.connection.RedisConnectionFactory&lt;/code&gt; &lt;/td&gt;
        &lt;td&gt;Redis Service (e.g. Redis Cloud) &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;org.springframework.orm.hibernate3.AbstractSessionFactoryBean&lt;/code&gt; &lt;/td&gt;
        &lt;td&gt;Relational Data Services (e.g. ClearDB, ElephantSQL) &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;org.springframework.orm.hibernate4.LocalSessionFactoryBean&lt;/code&gt; &lt;/td&gt;
        &lt;td&gt;Relational Data Services (e.g. ClearDB, ElephantSQL) &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;org.springframework.orm.jpa.AbstractEntityManagerFactoryBean&lt;/code&gt; &lt;/td&gt;
        &lt;td&gt;Relational Data Services (e.g. ClearDB, ElephantSQL) &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/blockquote&gt;&lt;p&gt;The effect is that an application running on H2 locally will automatically run against PostgreSQL on Cloud Foundry, assuming you have a backing-service pointing to a PostgreSQL instance created and bound to the application, as we do above. This is very convenient! If your only two destination targets are localhost and Cloud Foundry, this works perfectly.&lt;/p&gt;&lt;h2&gt;&lt;a href="#useful-code-environment-code-properties-for-your-spring-application" class="anchor" name="useful-code-environment-code-properties-for-your-spring-application"&gt;&lt;/a&gt;Useful &lt;code&gt;Environment&lt;/code&gt; properties for your Spring Application&lt;/h2&gt;&lt;p&gt;The default Java buildpack (which you can ovveride when doing a &lt;code&gt;cf push&lt;/code&gt; or by declaring it in your &lt;code&gt;manifest.yml&lt;/code&gt;) adds a Spring &lt;code&gt;Environment&lt;/code&gt; &lt;code&gt;PropertySource&lt;/code&gt; that registers a slew of properties that start with &lt;code&gt;cloud.&lt;/code&gt;. You can see them if you visit the REST &lt;code&gt;/env&lt;/code&gt; endpoint in the above application once you&amp;rsquo;ve pushed the application to Cloud Foundry. Here&amp;rsquo;s &lt;em&gt;some&lt;/em&gt; of the output for my application:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint json"&gt;&lt;br/&gt;{&#xD;
	...&#xD;
	cloud.services.postgresql-db.connection.jdbcurl: &amp;quot;jdbc:postgresql://babar.elephantsql.com:5432/AUSER?user=AUSER&amp;amp;password=WOULDNTYOULIKETOKNOW&amp;quot;,&#xD;
	...&#xD;
	cloud.services.postgresql-db.connection.uri: &amp;quot;postgres://AUSER:WOULDNTYOULIKETOKNOW@babar.elephantsql.com:5432/AUSER&amp;quot;,&#xD;
	cloud.services.postgresql-db.connection.scheme: &amp;quot;postgres&amp;quot;,&#xD;
	cloud.services.postgresql.connection.jdbcurl: &amp;quot;jdbc:postgresql://babar.elephantsql.com:5432/AUSER?user=AUSER&amp;amp;password=WOULDNTYOULIKETOKNOW&amp;quot;,&#xD;
	cloud.services.postgresql.connection.port: 5432,&#xD;
	cloud.services.postgresql.connection.path: &amp;quot;AUSER&amp;quot;,&#xD;
	cloud.application.host: &amp;quot;0.0.0.0&amp;quot;,&#xD;
	cloud.services.postgresql-db.connection.password: &amp;quot;******&amp;quot;,&#xD;
	cloud.services.postgresql-db.connection.username: &amp;quot;AUSER&amp;quot;,&#xD;
	...&#xD;
	cloud.application.application_name: &amp;quot;simple-backing-services&amp;quot;,&#xD;
	cloud.application.limits: {&#xD;
		mem: 512,&#xD;
		disk: 1024,&#xD;
		fds: 16384&#xD;
	},&#xD;
	cloud.services.postgresql-db.id: &amp;quot;postgresql-db&amp;quot;,&#xD;
	cloud.application.application_uris: [&#xD;
	&amp;quot;simple-backing-services-fattiest-teniafuge.cfapps.io&amp;quot;,&#xD;
	&amp;quot;simple-backing-services-unmummifying-prehnite.cfapps.io&amp;quot;&#xD;
],&#xD;
	cloud.application.instance_index: 0,&#xD;
	...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can use these properties in Spring just like you would any other property. They&amp;rsquo;re very convenient, too, as they provide not only a fairly standard Heroku-esque connection URI (&lt;code&gt;cloud.services.postgresql-db.connection.uri&lt;/code&gt;), but also one that can be used in a JDBC context, directly, &lt;code&gt;cloud.services.postgresql.connection.jdbcurl&lt;/code&gt;. As long as you use this (or a fork of this) buildpack, you&amp;rsquo;ll benefit from these properties.&lt;/p&gt;&lt;p&gt;Cloud Foundry exposes all of this information as standard, language and technology netural environment variables (&lt;code&gt;VCAP_SERVICES&lt;/code&gt; and &lt;code&gt;VCAP_APPLICATION&lt;/code&gt;). In theory, you should be able to write an application for any Cloud Foundry implementation and target these variables. Spring Boot also provides an &lt;em&gt;auto-configuration&lt;/em&gt; for those variables, and this approach works whether you use the aforementioned Java buildpack or not.&lt;/p&gt;&lt;p&gt;Spring Boot maps these environment variables into a set of properties accessible from the Spring &lt;code&gt;Environment&lt;/code&gt; abstraction. Here&amp;rsquo;s some sample output from the &lt;code&gt;VCAP_*&lt;/code&gt; properties that Spring Boot exposes, also from &lt;code&gt;/env&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint json"&gt;{&#xD;
	...&#xD;
	vcap.application.start: &amp;quot;2015-01-27 09:58:13 +0000&amp;quot;,&#xD;
	vcap.application.application_version: &amp;quot;9e6ba76e-039f-4585-9573-8efa9f7e9b7e&amp;quot;,&#xD;
	vcap.application.application_uris[2]: &amp;quot;simple-backing-services-detersive-sterigma.cfapps.io&amp;quot;,&#xD;
	vcap.application.uris: &amp;quot;simple-backing-services-fattiest-teniafuge.cfapps.io,simple-backing-services-grottoed-distillment.cfapps.io,...&amp;quot;,&#xD;
	vcap.application.space_name: &amp;quot;joshlong&amp;quot;,&#xD;
	vcap.application.started_at: &amp;quot;2015-01-27 09:58:13 +0000&amp;quot;,&#xD;
	vcap.services.postgresql-db.tags: &amp;quot;Data Stores,Data Store,postgresql,relational,New Product&amp;quot;,&#xD;
	vcap.services.postgresql-db.credentials.uri: &amp;quot;postgres://AUSER:WOULDNTYOULIKETOKNOW@babar.elephantsql.com:5432/hqsugvxo&amp;quot;,&#xD;
	vcap.services.postgresql-db.tags[1]: &amp;quot;Data Store&amp;quot;,&#xD;
	vcap.services.postgresql-db.tags[4]: &amp;quot;New Product&amp;quot;,&#xD;
	vcap.application.application_name: &amp;quot;simple-backing-services&amp;quot;,&#xD;
	vcap.application.name: &amp;quot;simple-backing-services&amp;quot;,&#xD;
	vcap.application.uris[2]: &amp;quot;simple-backing-services-detersive-sterigma.cfapps.io&amp;quot;,&#xD;
	...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I tend to rely a little on each approach. The Spring Boot properties are convenient because they provided indexed properties. &lt;code&gt;vcap.application.application_uris[2]&lt;/code&gt; provides a way to index into the array of possible routes for this application. This is ideal if you want to tell your running application what its externally adressable URI is, for example, if it needs to establish callbacks at startup before any request has come in. It also provides the equivalent technology-agnostic URIs, but not the JDBC-specific connection string. So, I&amp;rsquo;d use both. This apprroach is convenient, particularly in Spring Boot, because I can be explicit in my configuration and set properties (like &lt;code&gt;spring.datasource.*&lt;/code&gt;) to instruct Spring Boot on how to set things up. This is useful in the interest of being explicit, or if I have more than one backing service of the same type (like a JDBC &lt;code&gt;javax.sql.DataSource&lt;/code&gt;) bound to the same application. In this case, the buildpack won&amp;rsquo;t know what to do so you need to be explicit and disambiguate which backing service reference should be injected and where.&lt;/p&gt;&lt;h2&gt;&lt;a href="#using-spring-profiles" class="anchor" name="using-spring-profiles"&gt;&lt;/a&gt;Using Spring Profiles&lt;/h2&gt;&lt;p&gt;Spring Boot, by default, loads &lt;code&gt;src/main/resources/application.(properties,yml)&lt;/code&gt;. It will also load profile specific property files of the form, &lt;code&gt;src/main/resources/application-PROFILE.yml&lt;/code&gt;, where &lt;code&gt;PROFILE&lt;/code&gt; is the name of &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html"&gt;an active Spring profile&lt;/a&gt;. Earlier, we saw that our &lt;code&gt;manifest.yml&lt;/code&gt; specifically activates the &lt;code&gt;cloud&lt;/code&gt; profile by setting an environment variable. So, suppose you wanted to have a configuration that was activated only when running in a &lt;code&gt;cloud&lt;/code&gt; profile, and another that was activated when there was no specific profile activated - this is called the &lt;code&gt;default&lt;/code&gt; profile. You could create three files: &lt;code&gt;src/main/resources/application-cloud.(properties,yml)&lt;/code&gt; which will be activated whenever the &lt;code&gt;cloud&lt;/code&gt; profile is activated, &lt;code&gt;src/main/resources/application-default.(properties,yml)&lt;/code&gt; which will be activated when no other profile is specifically activated, and &lt;code&gt;src/main/resources/application.(properties,yml)&lt;/code&gt; which will be activated for all situations, no matter what.&lt;/p&gt;&lt;p&gt;A sample &lt;code&gt;src/main/resources/application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;spring.jpa.generate-ddl=true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A sample &lt;code&gt;src/main/resources/application-cloud.properties&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;spring.datasource.url=${cloud.services.postgresql-db.connection.jdbcurl}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A sample &lt;code&gt;src/main/resources/application-default.properties&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;# empty in this case because I rely on the embedded H2 instance being created&#xD;
# though you could point it to another, local,&#xD;
# PostgresSQL instancefor dev workstation configuration
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#using-spring-cloud-paas-connectors" class="anchor" name="using-spring-cloud-paas-connectors"&gt;&lt;/a&gt;Using Spring Cloud PaaS connectors&lt;/h2&gt;&lt;p&gt;All of these options thus far take advantage of the &lt;code&gt;Environment&lt;/code&gt; abstraction. No doubt, they&amp;rsquo;re far simpler than manually picking apart the JSON structure in the &lt;code&gt;VCAP_SERVICES&lt;/code&gt; variable, but we can do better. As the docs for the &lt;a href="https://github.com/spring-cloud/spring-cloud-connectors/blob/master/README.md"&gt;Spring Cloud Connectors&lt;/a&gt; project says:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Spring Cloud provides a simple abstraction for JVM-based applications running on cloud platforms to discover bound services and deployment information at runtime and provides support for registering discovered services as Spring beans. It is based on a plugin model so that the identical compiled application can be deployed locally or on multiple clouds, and it supports custom service definitions through Java SPI.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Let&amp;rsquo;s look at our revised example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package demo;&#xD;
&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.cloud.config.java.AbstractCloudConfig;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.context.annotation.Configuration;&#xD;
import org.springframework.context.annotation.Profile;&#xD;
import org.springframework.data.jpa.repository.JpaRepository;&#xD;
import org.springframework.data.rest.core.annotation.RepositoryRestResource;&#xD;
&#xD;
import javax.persistence.Entity;&#xD;
import javax.persistence.GeneratedValue;&#xD;
import javax.persistence.Id;&#xD;
import javax.sql.DataSource;&#xD;
&#xD;
@SpringBootApplication&#xD;
public class DemoApplication {&#xD;
&#xD;
    public static void main(String[] args) {&#xD;
        SpringApplication.run(DemoApplication.class, args);&#xD;
    }&#xD;
&#xD;
    @Configuration&#xD;
    @Profile(&amp;quot;cloud&amp;quot;)&#xD;
    public static class DataSourceConfig extends AbstractCloudConfig {&#xD;
&#xD;
        @Bean&#xD;
        DataSource reservationsPostgreSqlDb() {&#xD;
            return connectionFactory().dataSource(&amp;quot;postgresql-db&amp;quot;);&#xD;
        }&#xD;
    }&#xD;
&#xD;
}&#xD;
&#xD;
@RepositoryRestResource&#xD;
interface ReservationRepository extends JpaRepository&amp;lt;Reservation, Long&amp;gt; {&#xD;
}&#xD;
&#xD;
@Entity&#xD;
class Reservation {&#xD;
    @Id&#xD;
    @GeneratedValue&#xD;
    private Long id;&#xD;
&#xD;
    public Long getId() {&#xD;
        return id;&#xD;
    }&#xD;
&#xD;
    private String firstName, lastName;&#xD;
&#xD;
    Reservation() {&#xD;
    }&#xD;
&#xD;
    public Reservation(String firstName, String lastName) {&#xD;
        this.firstName = firstName;&#xD;
        this.lastName = lastName;&#xD;
    }&#xD;
&#xD;
    public String getFirstName() {&#xD;
        return firstName;&#xD;
    }&#xD;
&#xD;
    public String getLastName() {&#xD;
        return lastName;&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Instead of configuring a &lt;code&gt;javax.sql.DataSource&lt;/code&gt; using properties and Spring Boot, we explicitly factory an object of the right type. There are other methods for other backing services like &lt;a href="http://www.mongodb.org/"&gt;MongoDB&lt;/a&gt;, &lt;a href="http://redis.io"&gt;Redis&lt;/a&gt;, &lt;a href="https://sendgrid.com/"&gt;SendGrid&lt;/a&gt;, etc., and you can easily provide your own. We&amp;rsquo;re using the Spring Cloud Connectors plugin for Cloud Foundry, though there&amp;rsquo;s no reason you couldn&amp;rsquo;t use the Spring Cloud Connectors plugin for Heroku, or the property-based alternative for local applications. Your application is then identical across environments, and only the external configuration differs.&lt;/p&gt;&lt;h2&gt;&lt;a href="#using-java-configuration-code-bean-code-s" class="anchor" name="using-java-configuration-code-bean-code-s"&gt;&lt;/a&gt;Using Java configuration &lt;code&gt;@Bean&lt;/code&gt;s&lt;/h2&gt;&lt;p&gt;So far, we&amp;rsquo;ve relied on common-sense defaults provided by the platform or the framework, but you don&amp;rsquo;t need to give up any control. You could, for example, explicitly define a bean in XML or Java configuration, using the values from the environment. You might do this if your application wants to use a custom connection pool or in some otherway customize the configuration of the backing service. You might also do this if the platform and framework don&amp;rsquo;t have &lt;em&gt;automagic&lt;/em&gt; support for the backing service you&amp;rsquo;re trying to consume.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;&lt;br/&gt;	@Bean&#xD;
	@Profile(&amp;quot;cloud&amp;quot;)&#xD;
	DataSource dataSource(&#xD;
			@Value(&amp;quot;${cloud.services.postgresql-db.connection.jdbcurl}&amp;quot;) String jdbcUrl) {&#xD;
		try {&#xD;
			return new SimpleDriverDataSource(&#xD;
				org.postgresql.Driver.class.newInstance() , jdbcUrl);&#xD;
		}&#xD;
		catch (Exception e) {&#xD;
			throw new RuntimeException(e) ;&#xD;
		}&#xD;
	}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#where-to-go-from-here" class="anchor" name="where-to-go-from-here"&gt;&lt;/a&gt;Where to go from Here?&lt;/h2&gt;&lt;p&gt;Thus far we&amp;rsquo;ve looked only at consuming services that Cloud Foundry exposes. If you want to consume a service that you&amp;rsquo;ve got off-PaaS, it&amp;rsquo;s easy enough to treat it like any other backing service using &lt;a href="http://docs.cloudfoundry.org/devguide/services/user-provided.html"&gt;Cloud Foundry&amp;rsquo;s user provided services&lt;/a&gt;. This mechanism is just a fancy way of telling Cloud Foundry about the locator and credential information for a custom service that you want your applications to talk to. Once you&amp;rsquo;ve done that, Cloud Foundry applications and services can bind that service to their applications and consume it just as they normally would. User provided services are ideal or services, like a fixed Oracle instance, that you don&amp;rsquo;t intend for Cloud Foundry to manage. Cloud Foundry won&amp;rsquo;t add new instances, it won&amp;rsquo;t delete them, and it doesn&amp;rsquo;t control authorization.&lt;/p&gt;&lt;p&gt;If you want Cloud Foundry to manage a service, you need to adapt &lt;a href="http://docs.cloudfoundry.org/services/api.html"&gt;it to Cloud Foundry using the service broker API&lt;/a&gt;. This is more important when deploying Cloud Foundry in your own environment, and requires &lt;em&gt;admin&lt;/em&gt; privileges (which you won&amp;rsquo;t have in the hosted Pivotal Cloud Foundry, for example). The service broker API is a set of well-known REST callbacks that Cloud Foundry needs to be made aware of. It&amp;rsquo;s easy enough to implement your own custom service broker, and there&amp;rsquo;s even this convenient &lt;a href="https://github.com/cloudfoundry-community/spring-boot-cf-service-broker"&gt;Spring Boot-based project&lt;/a&gt; and &lt;a href="https://github.com/spgreenberg/spring-boot-cf-service-broker-mongo"&gt;corresponding sample&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;Check &lt;a href="https://github.com/joshlong/12factor-backing-services"&gt;out the examples&lt;/a&gt;, too!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Groovy for System Administrators</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/26/springone2gx-2014-replay-groovy-for-system-administrators" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-01-09:1928</id>
    <updated>2015-01-26T01:21:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Dan Woods, NetFlix &lt;/p&gt;
&lt;p&gt;More Groovy Track &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/4pieter-springone2gx2014groovysysadmins"&gt;http://www.slideshare.net/SpringCentral/4pieter-springone2gx2014groovysysadmins &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enterprise Operations is seeing a shift in the management paradigm of infrastructure, from the more-traditional server-centric design, to an approach that leverages the application stack as the custodian for administration. &lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="//www.youtube.com/embed/MzUvuQqVm14" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Fastest Servlets in the West?</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/26/springone2gx-2014-replay-fastest-servlets-in-the-west" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-01-09:1927</id>
    <updated>2015-01-26T01:18:00Z</updated>
    <content type="html">&lt;p&gt;Fastest Servlets in the West?&lt;br/&gt;&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;&lt;br/&gt;&lt;p&gt;Speakers: Stuart Willliams, Daniel Mikusa &lt;/p&gt;&lt;br/&gt;&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/williams-fastest-servlets-in-the-west"&gt;&lt;a href="http://www.slideshare.net/SpringCentral/williams-fastest-servlets-in-the-west"&gt;http://www.slideshare.net/SpringCentral/williams-fastest-servlets-in-the-west&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;br/&gt;&lt;p&gt; Applied Spring Track&lt;/p&gt;&lt;br/&gt;&lt;p&gt; The venerable Servlet Container still has some performance tricks up its sleeve - this talk will demonstrate Apache Tomcat&amp;rsquo;s stability under high load, describe some do&amp;rsquo;s (and some don&amp;rsquo;ts!), explain how to performance test a Servlet-based application, troubleshoot and tune the container and your application and compare the performance characteristics of the different Tomcat connectors. The presenters will share their combined experience supporting real Tomcat applications for over 20 years and show how a few small changes can make a big, big difference. &lt;/p&gt;&lt;br/&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br/&gt;&lt;p&gt;&lt;br/&gt; &lt;iframe width="560" height="315" src="//www.youtube.com/embed/uMtYcWB7Z4s" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;br/&gt;&lt;/p&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Booting up Spring Social</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/26/springone2gx-2014-replay-booting-up-spring-social" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-01-09:1926</id>
    <updated>2015-01-26T01:16:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Craig Walls &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/booting-up-spring-social"&gt;http://www.slideshare.net/SpringCentral/booting-up-spring-social&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Applied Spring Track &lt;/p&gt;
&lt;p&gt;In recent years, people are using social networks like Facebook and Twitter to connect, meet, and share experiences and ideas. But it's not just people making connections; modern applications are also leveraging the APIs provided by the social networks to connect with their users and customers. It's hard to find applications these days that aren't somehow connected to their users via social APIs. Spring Social is an extension to the Spring Framework that enables you to create applications that connect with APIs. With it, your application can offer social login, learn about its users' interests, and inject itself into their social graph. In this session, we'll take a look at the latest that Spring Social has to offer, including integration with Spring Security, automatic reconnect, and a dramatically simpler configuration model using Spring Boot. &lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="//www.youtube.com/embed/FGksai2vCvA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Hadoop 201 -- Deeper into the Elephant</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/26/springone2gx-2014-replay-hadoop-201-deeper-into-the-elephant" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-01-09:1925</id>
    <updated>2015-01-26T01:13:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Roman Shaposhnik &lt;/p&gt;
&lt;p&gt;Big Data Track &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/hadoop-201-deeper-into-the-elephant"&gt;http://www.slideshare.net/SpringCentral/hadoop-201-deeper-into-the-elephant &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This session expands on the previous year's &amp;quot;Hadoop: Just the Basics for Big Data Rookies&amp;quot;, diving deeper into the details of key Apache Hadoop projects. We will start with a brief recap of HDFS and MapReduce, then discuss more advanced features of HDFS, in addition to how YARN has enabled businesses to massively scale their systems beyond what was previously possible. We will then discuss Apache HBase, the non-relational database modeled after Google's BIg table, review the data model, architecture, and common use cases. By the end of this session, you will learn how these three core Hadoop projects are used to solve even the most challenging Big Data problems.&#xD;
&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="//www.youtube.com/embed/IcuTdJgUFmo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - January 20th, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/20/this-week-in-spring-january-20th-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-01-21:1941</id>
    <updated>2015-01-20T19:14:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week&amp;rsquo;s roundup could&amp;rsquo;ve just as easily been titled, &lt;em&gt;This Week in Spring Videos and Webinars&lt;/em&gt;, because we&amp;rsquo;ve got a &lt;em&gt;lot&lt;/em&gt; of them!&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The good Dr. Dave Syer continues his series &lt;a href="https://spring.io/blog/2015/01/20/the-resource-server-angular-js-and-spring-security-part-iii"&gt;introducing Spring Security and Angular.js integration, this time looking at breaking apart the resource server from the authorization server&lt;/a&gt;. This post looks&lt;/li&gt;
  &lt;li&gt;Our pal Nicoalas Frankel is back at it! Nicolas lives in both the &lt;a href="http://vaadin.com"&gt;Vaadin&lt;/a&gt; and the Spring communities. So, naturally, when Petter Holmström and I started the &lt;a href="https://github.com/peholmst/vaadin4spring"&gt;Vaadin4Spring project&lt;/a&gt; at the beginning of 2014, we weren&amp;rsquo;t surprised when Nicolas started making great contributions. His latest contribution introduces an elegant &lt;a href="http://blog.frankel.ch/improving-the-vaadin-4-spring-project-with-a-simpler-mvp"&gt;implementation of the MVP pattern for Vaadin and he&amp;rsquo;s written a very nice introduction to it&lt;/a&gt; - check it out!&lt;/li&gt;
  &lt;li&gt;I&amp;rsquo;ll be speaking at the Oakland JUG on the 28th &lt;a href="http://www.meetup.com/eastbayjug/events/219652953/"&gt;on building microservices with Spring Cloud and Cloud Foundry&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Tadaya Tsuyukubo just announced the &lt;a href="https://github.com/ttddyy/spring-social-slideshare"&gt;first 1.0.0 release of the Spring Social Slideshare project&lt;/a&gt;. I haven&amp;rsquo;t had a chance to play with it yet, but it looks like it could scratch a few itches I&amp;rsquo;ve got! Nice work!&lt;/li&gt;
  &lt;li&gt;I hope you&amp;rsquo;ll join me next month for &lt;a href="https://spring.io/blog/2015/01/20/webinar-introducing-spring-session"&gt;a webinar introducing the Spring Session project&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Speaking of Vaadin and Spring, I&amp;rsquo;ll be co-presenting this week at the GWT.create conference. &lt;a href="http://gwtcreate.com/#agenda-us_room1_event7"&gt;Our talk&lt;/a&gt; will look at controlling a Parrot AR Drone using a Vaadin-based HTML5 frontend and a Spring Boot-powered backend and drone client. Come join us, it&amp;rsquo;s sure to be fun!&lt;/li&gt;
  &lt;li&gt;InfoQ did an interview with Spring Boot co-founder &lt;a href="http://www.infoq.com/news/2015/01/Spring-Boot-1.2.1-Released"&gt;Phil Webb on all the new features in Spring Boot 1.2.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Alexandre Lourenco put together a post demonstrating how easy it is to get a REST API up and running &lt;a href="http://java.dzone.com/articles/spring-boot-creating"&gt;with Spring Boot in this quick post on DZone&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Be sure to check out Spring XD&amp;rsquo;s &lt;a href="https://spring.io/blog/2015/01/20/webinar-spring-xd-a-platform-for-data-at-scale-and-developer-productivity"&gt;Sabby Anandan in this webinar on Spring XD.next on February 17th&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The incomparable, amazing Andy Wilkinson will &lt;a href="https://spring.io/blog/2015/01/20/webinar-documenting-restful-apis"&gt;be talking about how to document REST APIs&lt;/a&gt; in a February 3rd webinar.&lt;/li&gt;
  &lt;li&gt;I put together a post that introduces service registries like Consul and Eureka &lt;a href="https://spring.io/blog/2015/01/20/microservice-registration-and-discovery-with-spring-cloud-and-netflix-s-eureka"&gt;for more resilient service-to-service calls&lt;/a&gt; in a Spring Cloud-based system.&lt;/li&gt;
  &lt;li&gt;Our pal Jakub Kubrynski has put together a &lt;em&gt;wonderful&lt;/em&gt; &lt;a href="http://www.dzone.com/links/r/including_java_agent_in_standalone_spring_boot_ap.html"&gt;post on including the NewRelic Java agent in a Spring Boot uber-jar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;In putting together the post on service discovery and registration with Spring Cloud, I stumbled upon &lt;a href="http://jasonwilder.com/blog/2014/02/04/service-discovery-in-the-cloud/"&gt;Jason Wilder&amp;rsquo;s fantastic look at service registries&lt;/a&gt; and really liked it, even though it doesn&amp;rsquo;t have anything to do with Spring, per se.&lt;/li&gt;
  &lt;li&gt;Check out this replay of Rossen Stoyanchev&amp;rsquo;s SpringOne2GX 2014 talk &lt;a href="https://spring.io/blog/2015/01/20/springone2gx-2014-replay-spring-4-web-applications"&gt;introducing Spring 4&amp;rsquo;s support for web applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out this SpringOne2gx 2014 talk from Matthew Adams (SCI Spike) and Michael Nitschinger (Couchbase) on using &lt;a href="https://spring.io/blog/2015/01/20/springone2gx-2014-replay-cassandra-couchbase-and-spring-data-in-the-enterprise"&gt;Spring Data Cassandra and Spring Data Couchbase in the enterprise&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Garrett Wampole&amp;rsquo;s &lt;a href="https://spring.io/blog/2015/01/20/springone2gx-2014-replay-applications-of-enterprise-integration-patterns-to-near-real-time-radar-data-processing"&gt;SpringOne2GX 2014 talk on enterprise integration patterns as applied to real-time data processing&lt;/a&gt; is worth a watch!&lt;/li&gt;
  &lt;li&gt;Check out our pal and the Spanish Spring I/O conference&amp;rsquo;s organizer Sergi Almar&amp;rsquo;s &lt;a href="https://spring.io/blog/2015/01/20/springone2gx-2014-replay-deep-dive-into-spring-websockets"&gt;talk deep-diving into websockets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Speaking of super awesome Spaniards, &lt;a href="https://spring.io/blog/2015/01/19/spring-roo-1-3-1-rc2-available-now"&gt;the Disid team just announced Spring Roo 1.3.1 RC2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2015/01/19/spring-tool-suite-and-groovy-grails-tool-suite-3-6-3-sr1-released"&gt;Spring Tool Suite and Groovy Tool Suite lead Martin Lippert just announced the latest releases, 3.6.3 SR1&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;My pal Luke Shannon did a &lt;a href="https://spring.io/blog/2015/01/19/webinar-replay-building-scalable-data-applications-with-spring-and-gemfire"&gt;fantastic webinar introducing Spring Data Gemfire&lt;/a&gt;, a world-class integration for a world-class data-grid.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2015/01/16/spring-batch-and-spring-batch-admin-releases"&gt;Spring Batch and Spring Batch Admin lead Michael Minella has just announced the latest release of both projects&lt;/a&gt;. The new Spring Batch revision includes support for JSR 352 custom infrastructures, polling for partitioned results, and more. The Spring Batch Admin revision integrates the latest and greatest in Spring Batch, including JSR 352 and Java configuration support. Check it out!&lt;/li&gt;
  &lt;li&gt;Spring IO Platform lead Andy Wilkinson has announced &lt;a href="https://spring.io/blog/2015/01/15/spring-io-platform-1-1-1-released"&gt;Spring IO Platform 1.1.1, which includes the latest cuts of Spring AMQP, Boot, and Integration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Integration lead Gary Russell&amp;rsquo;s SpringOne2GX 2014 talk on Spring Integration&amp;rsquo;s new Java configuration support is &lt;em&gt;not to be missed&lt;/em&gt;!&lt;/li&gt;
  &lt;li&gt;Check out Spring framework &lt;a href="https://spring.io/blog/2015/01/14/springone2gx-2014-replay-caching-and-messaging-improvements-in-spring-framework-4-1"&gt;lead Juergen Hoeller and Stephane Nicoll&amp;rsquo;s talk on caching and messaging improvements in Spring 4.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The sleepless Spring Security lead Rob Winch&amp;rsquo;s &lt;a href="https://spring.io/blog/2015/01/14/springone2gx-2014-replay-from-0-to-spring-security-4-0"&gt;SpringOne2GX 2014 introduction talk on Spring Security is also available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring framework lead Juergen Hoeller&amp;rsquo;s SpringOne2GX 2014 talk on Spring framework and Java 8 is not-to-be-missed primer for those looking at &lt;a href="https://spring.io/blog/2015/01/14/springone2gx-2014-replay-spring-framework-on-java-8"&gt;the next-gen Spring 4 and 4.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Another nice post on using &lt;a href="http://devilspace.org/2015/01/19/data-insertion-in-to-tables-by-using-simplejdbcinsert-class-of-spring-framework/"&gt;&lt;code&gt;SimpleJdbcInsert&lt;/code&gt; to handle JDBC data insertion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Alvin Henrick put together a nice post on using &lt;a href="http://alvinhenrick.com/2015/01/16/spring-boot-app-deployed-with-docker-and-data-only-container-pattern-explained/"&gt;Spring Boot and Docker together&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I found &lt;a href="http://hiteshtwo.org/asley/2015/01/20/spring-boot-with-groovy-and-external-libraries/"&gt;this interesting Q&amp;amp;A post on using Groovy with Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Alex Collins&amp;rsquo; post on using &lt;a href="http://www.alexecollins.com/elastic-search-in-a-box-with-docker/"&gt;Docker, Elastic Search, and Selenium to create a search-in-a-box&lt;/a&gt; is &lt;em&gt;epic&lt;/em&gt;! Check it out!&lt;/li&gt;
  &lt;li&gt;This Japanese-language post on &lt;a href="http://backpaper0.github.io/2015/01/14/spring_boot_jersey.html"&gt;using the new Spring Boot 1.2.1&amp;rsquo;s Jersey support&lt;/a&gt; looked pretty good (via Google Translate!)&lt;/li&gt;
  &lt;li&gt;Want to stand up services via Docker? Check out our pal &lt;a href="http://plainoldobjects.com/2015/01/14/need-to-install-mongodb-rabbitmq-or-mysql-use-docker-to-simplify-dev-and-test/"&gt;Chris Richardson&amp;rsquo;s post on standing up services via Docker&lt;/a&gt;! You could, for example, consume these services from another Docker-packaged Spring Boot application, or on Cloud Foundry.next (hitherto called &amp;ldquo;Diego&amp;rdquo;). &lt;a href="http://plainoldobjects.com/2015/01/14/need-to-install-mongodb-rabbitmq-or-mysql-use-docker-to-simplify-dev-and-test/"&gt;http://plainoldobjects.com/2015/01/14/need-to-install-mongodb-rabbitmq-or-mysql-use-docker-to-simplify-dev-and-test/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Are you following &lt;a href="http://www.thisweekincf.com/blog/2015/01/19/this-week-in-cloud-foundry-19th-january-2015/"&gt;&lt;em&gt;This Week in Cloud Foundry&lt;/em&gt;&lt;/a&gt;? Do! There&amp;rsquo;s so much good stuff there, as usual.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Webinars make up a lot of this week&amp;rsquo;s roundup. Nice work, &lt;a href="https://twitter.com/pieterhumphrey"&gt;Pieter Humphrey&lt;/a&gt;!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar: Spring XD - A Platform for data at scale and developer productivity</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/20/webinar-spring-xd-a-platform-for-data-at-scale-and-developer-productivity" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-01-20:1940</id>
    <updated>2015-01-20T13:35:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Sabby Anandan &lt;/p&gt;
&lt;p&gt;Worried about Big Data and the challenges inherent in making a real application? You don’t have to worry anymore! Spring XD provides a one-stop shop solution that spans traditional enterprise to Big Data use cases - both batch and streaming. It's important to choose the right tool for each use-case, which is why Spring XD integrates with technologies such as Spark, Reactor and RxJava to demonstrate the flexibility and the unified programming model to support complex data computation use-cases. In this webinar, we'll show you how to develop data-driven use cases much faster than other big data solutions on the out of the box XD runtime. &lt;/p&gt;&lt;p&gt;Tuesday, Feb 17th, 2015 3:00PM GMT (London GMT)&lt;a href="http://connect.pivotal.io/OSS_Webinar_7AMSpringXDAPlatformfordataatscaleanddeveloperproductivity_Register.html"&gt; Register&lt;/a&gt;&lt;br/&gt;&lt;p&gt;Tuesday, Feb 17th, 2015 10:00AM PST (San Francisco GMT-08:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_10AMSpringXDAPlatformfordataatscaleanddeveloperproductivity_Register.html"&gt;Register&lt;/a&gt;&lt;/p&gt;&lt;br/&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar: Introducing Spring Session</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/20/webinar-introducing-spring-session" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-01-20:1939</id>
    <updated>2015-01-20T13:25:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Josh Long, Pivotal &lt;/p&gt;
&lt;p&gt;Back in the era of the application server, HTTP Session replication was a common way to scale out user session data, as well as make it fault tolerant. In today's world of lightweight containers, PaaS, and virtualization, Spring Session offers a 100% server and/or container portable HTTP Session. See how Spring Session easily plugs in implementations like Redis, scales out across a cluster, handles multiple users' browser sessions, works with WebSocket, and allows header based authentication within REST apps. It's a perfect fit for working with user data, particularly in a highly distributed environment like the cloud, or on a Platform like Cloud Foundry.&lt;/p&gt;&lt;p&gt;Tuesday, Feb 24th, 2015 3:00PM GMT (London GMT)&lt;a href="http://connect.pivotal.io/OSS_Webinar_7AMIntroducingSpringSession_Register.html"&gt; Register&lt;/a&gt;&lt;br/&gt;&lt;p&gt;Tuesday, Feb 24th, 2015 10:00AM PST (San Francisco GMT-08:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_10AMIntroducingSpringSession_Register.html"&gt;Register&lt;/a&gt;&lt;/p&gt;&lt;br/&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br/&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar: Documenting RESTful APIs</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/20/webinar-documenting-restful-apis" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-01-20:1938</id>
    <updated>2015-01-20T13:23:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Andy Wilkinson, Pivotal &lt;/p&gt;
&lt;p&gt;An API's documentation is a vital part of making it easy to understand and easy to use. RESTful APIs are no different. In this webinar we'll look at what should be included in your RESTful API's documentation and, just as importantly, what should be omitted. To illustrate this we'll look at some real-world examples of good and bad API documentation. We'll look at some of the problems and limitations of choosing a tool like Swagger to produce your API's documentation and conclude by looking at some alternatives that are better-suited to producing documentation that your users will love. &lt;/p&gt;&lt;p&gt;Tuesday, Feb 3rd, 2015 3:00PM GMT (London GMT)&lt;a href="http://connect.pivotal.io/7AMDocumentingRESTfulAPIs_Register.html"&gt; Register&lt;/a&gt;&lt;br/&gt;&lt;p&gt;Tuesday, Feb 3rd, 2015 10:00AM PST (San Francisco GMT-08:00) &lt;a href="http://connect.pivotal.io/10AMDocumentingRESTfulAPIs_Register.html"&gt;Register&lt;/a&gt;&lt;/p&gt;&lt;br/&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;br/&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>The Resource Server: Angular JS and Spring Security Part III</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/20/the-resource-server-angular-js-and-spring-security-part-iii" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Dave Syer</name>
    </author>
    <id>tag:spring.io,2015-01-05:1905</id>
    <updated>2015-01-20T09:54:00Z</updated>
    <content type="html">&lt;p&gt;In this article we continue &lt;a href="http://spring.io/blog/2015/01/12/the-login-page-angular-js-and-spring-security-part-ii" title="Second Article in the Series"&gt;our discussion&lt;/a&gt; of how to use &lt;a href="http://projects.spring.io/spring-security"&gt;Spring Security&lt;/a&gt; with &lt;a href="http://angularjs.org"&gt;Angular JS&lt;/a&gt; in a &amp;ldquo;single page application&amp;rdquo;. Here we start by breaking out the &amp;ldquo;greeting&amp;rdquo; resource that we are using as the dynamic content in our application into a separate server, first as an unprotected resource, and then protected by an opaque token. This is the third in a series of articles, and you can catch up on the basic building blocks of the application or build it from scratch by reading the &lt;a href="http://spring.io/blog/2015/01/12/spring-and-angular-js-a-secure-single-page-application" title="First Article in the Series"&gt;first article&lt;/a&gt;, or you can just go straight to the source code in Github, which is in two parts: one where the &lt;a href="https://github.com/dsyer/spring-security-angular/tree/master/vanilla"&gt;resource is unprotected&lt;/a&gt;, and one where it is &lt;a href="https://github.com/dsyer/spring-security-angular/tree/master/spring-session"&gt;protected by a token&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Reminder: if you are working through this article with the sample application, be sure to clear your browser cache of cookies and HTTP Basic credentials. In Chrome the best way to do that for a single server is to open a new incognito window.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#a-separate-resource-server" class="anchor" name="a-separate-resource-server"&gt;&lt;/a&gt;A Separate Resource Server&lt;/h2&gt;&lt;h3&gt;&lt;a href="#client-side-changes" class="anchor" name="client-side-changes"&gt;&lt;/a&gt;Client Side Changes&lt;/h3&gt;&lt;p&gt;On the client side there isn&amp;rsquo;t very much to do to move the resource to a different backend. Here&amp;rsquo;s the &amp;ldquo;home&amp;rdquo; controller in the &lt;a href="https://github.com/dsyer/spring-security-angular/blob/master/single/src/main/resources/static/js/hello.js"&gt;last article&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;angular.module(&amp;#39;hello&amp;#39;, [ &amp;#39;ngRoute&amp;#39; ])&#xD;
...&#xD;
.controller(&amp;#39;home&amp;#39;, function($scope, $http) {&#xD;
	$http.get(&amp;#39;/resource/&amp;#39;).success(function(data) {&#xD;
		$scope.greeting = data;&#xD;
	})&#xD;
})&#xD;
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All we need to do to this is change the URL. For example, if we are going to run the new resource on localhost, it could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;angular.module(&amp;#39;hello&amp;#39;, [ &amp;#39;ngRoute&amp;#39; ])&#xD;
...&#xD;
.controller(&amp;#39;home&amp;#39;, function($scope, $http) {&#xD;
	$http.get(&amp;#39;http://localhost:9000/&amp;#39;).success(function(data) {&#xD;
		$scope.greeting = data;&#xD;
	})&#xD;
})&#xD;
...
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a href="#server-side-changes" class="anchor" name="server-side-changes"&gt;&lt;/a&gt;Server Side Changes&lt;/h3&gt;&lt;p&gt;The &lt;a href="https://github.com/dsyer/spring-security-angular/blob/master/vanilla/ui/src/main/java/demo/UiApplication.java"&gt;UI server&lt;/a&gt; is trivial to change: we just need to remove the &lt;code&gt;@RequestMapping&lt;/code&gt; for the greeting resource (it was &amp;ldquo;/resource&amp;rdquo;). Then we need to create a new resource server, which we can do like we did in the &lt;a href="http://spring.io/blog/2015/01/12/spring-and-angular-js-a-secure-single-page-application" title="First Article in the Series"&gt;first article&lt;/a&gt; using the &lt;a href="https://start.spring.io"&gt;Spring Boot Initializr&lt;/a&gt;. E.g. using curl on a UN*X like system:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;$ mkdir resource &amp;amp;&amp;amp; cd resource&#xD;
$ curl https://start.spring.io/starter.tgz -d style=web \&#xD;
-d name=resource -d language=groovy | tar -xzvf - 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can then import that project (it&amp;rsquo;s a normal Maven Java project by default) into your favourite IDE, or just work with the files and &amp;ldquo;mvn&amp;rdquo; on the command line. We are using Groovy because we can, but please feel free to use Java if you prefer. There isn&amp;rsquo;t going to be much code anyway.&lt;/p&gt;&lt;p&gt;Just add a &lt;code&gt;@RequestMapping&lt;/code&gt; to the &lt;a href="https://github.com/dsyer/spring-security-angular/blob/master/vanilla/resource/src/main/groovy/demo/ResourceApplication.groovy"&gt;main application class&lt;/a&gt;, copying the implementation from the &lt;a href="https://github.com/dsyer/spring-security-angular/blob/master/single/src/main/java/demo/UiApplication.java"&gt;old UI&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
@RestController&#xD;
class ResourceApplication {&#xD;
	&#xD;
	@RequestMapping(&amp;#39;/&amp;#39;)&#xD;
	def home() {&#xD;
		[id: UUID.randomUUID().toString(), content: &amp;#39;Hello World&amp;#39;]&#xD;
	}&#xD;
&#xD;
    static void main(String[] args) {&#xD;
        SpringApplication.run ResourceApplication, args&#xD;
    }&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once that is done your application will be loadable in a browser. On the command line you can do this&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;$ mvn spring-boot:run --server.port=9000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and go to a browser at &lt;a href="http://localhost:9000"&gt;http://localhost:9000&lt;/a&gt; and you should see JSON with a greeting. You can bake in the port change in &lt;code&gt;application.properties&lt;/code&gt; (in&amp;ldquo;src/main/resources&amp;rdquo;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;server.port: 9000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you try loading that resource from the UI (on port 8080) in a browser, you will find that it doesn&amp;rsquo;t work because the browser won&amp;rsquo;t allow the XHR request.&lt;/p&gt;&lt;h2&gt;&lt;a href="#cors-negotiation" class="anchor" name="cors-negotiation"&gt;&lt;/a&gt;CORS Negotiation&lt;/h2&gt;&lt;p&gt;The browser tries to negotiate with our resource server to find out if it is allowed to access it according to the &lt;a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing"&gt;Common Origin Resource Sharing&lt;/a&gt; protocol. It&amp;rsquo;s not an Angular JS responsibility, so just like the cookie contract it will work like this with all JavaScript in the browser. The two servers do not declare that they have a common origin, so the browser declines to send the request and the UI is broken.&lt;/p&gt;&lt;p&gt;To fix that we need to support the CORS protocol which involves a &amp;ldquo;pre-flight&amp;rdquo; OPTIONS request and some headers to list the allowed behaviour of the caller. Spring 4.2 might have some nice &lt;a href="https://jira.spring.io/browse/SPR-9278"&gt;fine-grained CORS support&lt;/a&gt;, but until that is released we can do an adequate job for the purposes of this application by sending the same CORS responses to all requests using a &lt;code&gt;Filter&lt;/code&gt;. We can just create a class in the same directory as the resource server application and make sure it is a &lt;code&gt;@Component&lt;/code&gt; (so it gets scanned into the Spring application context), for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Component&#xD;
@Order(Ordered.HIGHEST_PRECEDENCE)&#xD;
class CorsFilter implements Filter {&#xD;
&#xD;
	void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) {&#xD;
		HttpServletResponse response = (HttpServletResponse) res&#xD;
		response.setHeader(&amp;quot;Access-Control-Allow-Origin&amp;quot;, &amp;quot;*&amp;quot;)&#xD;
		response.setHeader(&amp;quot;Access-Control-Allow-Methods&amp;quot;, &amp;quot;POST, PUT, GET, OPTIONS, DELETE&amp;quot;)&#xD;
		response.setHeader(&amp;quot;Access-Control-Max-Age&amp;quot;, &amp;quot;3600&amp;quot;)&#xD;
		if (request.getMethod()!=&amp;#39;OPTIONS&amp;#39;) {&#xD;
			chain.doFilter(req, res)&#xD;
		} else {&#xD;
		}&#xD;
	}&#xD;
&#xD;
	void init(FilterConfig filterConfig) {}&#xD;
&#xD;
	void destroy() {}&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;Filter&lt;/code&gt; is defined with an &lt;code&gt;@Order&lt;/code&gt; so that it is definitely applied &lt;em&gt;before&lt;/em&gt; the main Spring Security filter. With that change to the resource server, we should be able to re-launch it and get our greeting in the UI.&lt;/p&gt;&lt;h2&gt;&lt;a href="#securing-the-resource-server" class="anchor" name="securing-the-resource-server"&gt;&lt;/a&gt;Securing the Resource Server&lt;/h2&gt;&lt;p&gt;Great! We have a working application with a new architecture. The only problem is that the resource server has no security.&lt;/p&gt;&lt;h3&gt;&lt;a href="#adding-spring-security" class="anchor" name="adding-spring-security"&gt;&lt;/a&gt;Adding Spring Security&lt;/h3&gt;&lt;p&gt;We can also look at how to add security to the resource server as a filter layer, like in the UI server. This is perhaps more conventional, and is certainly the best option in most PaaS environments (since they don&amp;rsquo;t usually make private networks available to applications). The first step is really easy: just add Spring Security to the classpath in the Maven POM:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependencies&amp;gt;&#xD;
  &amp;lt;dependency&amp;gt;&#xD;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xD;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;/dependency&amp;gt;&#xD;
  ...&#xD;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Re-launch the resource server and, hey presto! It&amp;rsquo;s secure:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;$ curl -v localhost:9000&#xD;
&amp;lt; HTTP/1.1 401 Unauthorized&#xD;
&amp;lt; WWW-Authenticate: Basic realm=&amp;quot;Spring&amp;quot;&#xD;
...&#xD;
{&amp;quot;timestamp&amp;quot;:1420544006458,&amp;quot;status&amp;quot;:401,&amp;quot;error&amp;quot;:&amp;quot;Unauthorized&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;Full authentication is required to access this resource&amp;quot;,&amp;quot;path&amp;quot;:&amp;quot;/&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So all we need to do is teach the client to send credentials with every request.&lt;/p&gt;&lt;h2&gt;&lt;a href="#token-authentication" class="anchor" name="token-authentication"&gt;&lt;/a&gt;Token Authentication&lt;/h2&gt;&lt;p&gt;The internet, and people&amp;rsquo;s Spring backend projects, are littered with custom token-based authentication solutions. Spring Security provides a barebones &lt;code&gt;Filter&lt;/code&gt; implementation to get you started on your own (see for example &lt;a href="https://github.com/spring-projects/spring-security/blob/master/web/src/main/java/org/springframework/security/web/authentication/preauth/AbstractPreAuthenticatedProcessingFilter.java"&gt;&lt;code&gt;AbstractPreAuthenticatedProcessingFilter&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-security/blob/master/core/src/main/java/org/springframework/security/core/token/TokenService.java"&gt;&lt;code&gt;TokenService&lt;/code&gt;&lt;/a&gt;). There is no canonical implementation in Spring Security though, and one of the reasons why is probably that there&amp;rsquo;s an easier way.&lt;/p&gt;&lt;p&gt;Remember from &lt;a href="http://spring.io/blog/2015/01/12/the-login-page-angular-js-and-spring-security-part-ii" title="Second Article in the Series"&gt;Part II&lt;/a&gt; of this series that Spring Security uses the &lt;code&gt;HttpSession&lt;/code&gt; to store authentication data by default. It doesn&amp;rsquo;t interact directly with the session though: there&amp;rsquo;s an abstraction layer (&lt;a href="https://github.com/spring-projects/spring-security/blob/master/web/src/main/java/org/springframework/security/web/context/SecurityContextRepository.java"&gt;&lt;code&gt;SecurityContextRepository&lt;/code&gt;&lt;/a&gt;) in between that you can use to change the storage backend. If we can point that repository, in our resource server, to a store with an authentication verified by our UI, then we have a way to share authentication between the two servers. The UI server already has such a store (the &lt;code&gt;HttpSession&lt;/code&gt;), so if we can distribute that store and open it up to the resource server, we have most of a solution.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-session" class="anchor" name="spring-session"&gt;&lt;/a&gt;Spring Session&lt;/h3&gt;&lt;p&gt;That part of the solution is pretty easy with &lt;a href="https://github.com/spring-projects/spring-session/"&gt;Spring Session&lt;/a&gt;. All we need is a shared data store (Redis is supported out of the box), and a few lines of configuration in the servers to set up a &lt;code&gt;Filter&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;In the UI application we need to add some dependencies to our &lt;a href="https://github.com/dsyer/spring-security-angular/blob/master/spring-session/ui/pom.xml"&gt;POM&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.session&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-session&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;1.0.0.RELEASE&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;&#xD;
&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-boot-starter-redis&amp;lt;/artifactId&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then add the &lt;code&gt;Filter&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
@RestController&#xD;
@EnableRedisHttpSession&#xD;
public class UiApplication {&#xD;
&#xD;
  public static void main(String[] args) {&#xD;
    SpringApplication.run(UiApplication.class, args);&#xD;
  }&#xD;
&#xD;
  ...&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;@EnableRedisHttpSession&lt;/code&gt; is provided by Spring Session, and Spring Boot supplies a redis connection (a URL and credentials can be configured using environment variables or configuration files).&lt;/p&gt;&lt;p&gt;With that 1 line of code in place and a Redis server running on localhost you can run the UI application, login with some valid user credentials, and the session data (the authentication and CSRF token) will be stored in redis.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Tip: if you don&amp;rsquo;t have a redis server running locally you can easily spin one up with &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; (on Windows or MacOS this requires a VM). There is a &lt;a href="http://www.fig.sh/"&gt;&lt;code&gt;fig.yml&lt;/code&gt;&lt;/a&gt; file in the &lt;a href="https://github.com/dsyer/spring-security-angular/tree/master/spring-session/fig.yml"&gt;source code in Github&lt;/a&gt; which you can run really easily on the command line with &lt;code&gt;fig up&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#sending-a-custom-token-from-the-ui" class="anchor" name="sending-a-custom-token-from-the-ui"&gt;&lt;/a&gt;Sending a Custom Token from the UI&lt;/h2&gt;&lt;p&gt;The only missing piece is the transport mechanism for the key to the data in the store. The key is the &lt;code&gt;HttpSession&lt;/code&gt; ID, so if we can get hold of that key in the UI client, we can send it as a custom header to the resource server. So the &amp;ldquo;home&amp;rdquo; controller would need to change so that it sends the header as part of the HTTP request for the greeting resource. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;angular.module(&amp;#39;hello&amp;#39;, [ &amp;#39;ngRoute&amp;#39; ])&#xD;
...&#xD;
.controller(&amp;#39;home&amp;#39;, function($scope, $http) {&#xD;
	$http.get(&amp;#39;token&amp;#39;).success(function(token) {&#xD;
		$http({&#xD;
			url : &amp;#39;http://localhost:9000&amp;#39;,&#xD;
			method : &amp;#39;GET&amp;#39;,&#xD;
			headers : {&#xD;
				&amp;#39;X-Auth-Token&amp;#39; : token.token&#xD;
			}&#xD;
		}).success(function(data) {&#xD;
			$scope.greeting = data;&#xD;
		});&#xD;
	})&#xD;
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(A more elegant solution might be to grab the token as needed, and use an Angular &lt;a href="https://docs.angularjs.org/api/ng/service/$http"&gt;interceptor&lt;/a&gt; to add the header to every request to the resource server. The interceptor definition could then be abstracted instead of doing it all in one place and cluttering up the business logic.)&lt;/p&gt;&lt;p&gt;Instead of going directly to &amp;ldquo;&lt;a href="http://localhost:9000"&gt;http://localhost:9000&lt;/a&gt;&amp;rdquo; we have wrapped that call in the success callback of a call to a new custom endpoint on the UI server at &amp;ldquo;/token&amp;rdquo;. The implementation of that is trivial:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
@RestController&#xD;
@EnableRedisHttpSession&#xD;
public class UiApplication {&#xD;
&#xD;
  public static void main(String[] args) {&#xD;
    SpringApplication.run(UiApplication.class, args);&#xD;
  }&#xD;
&#xD;
  ...&#xD;
&#xD;
  @RequestMapping(&amp;quot;/token&amp;quot;)&#xD;
  @ResponseBody&#xD;
  public Map&amp;lt;String,String&amp;gt; token(HttpSession session) {&#xD;
    return Collections.singletonMap(&amp;quot;token&amp;quot;, session.getId());&#xD;
  }&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So the UI application is ready and will include the session ID in a header called &amp;ldquo;X-Auth-Token&amp;rdquo; for all calls to the backend.&lt;/p&gt;&lt;h2&gt;&lt;a href="#authentication-in-the-resource-server" class="anchor" name="authentication-in-the-resource-server"&gt;&lt;/a&gt;Authentication in the Resource Server&lt;/h2&gt;&lt;p&gt;There is one tiny change to the resource server for it to be able to accept the custom header. The CORS filter has to nominate that header as an allowed one from remote clients, e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Component&#xD;
@Order(Ordered.HIGHEST_PRECEDENCE)&#xD;
public class CorsFilter implements Filter {&#xD;
&#xD;
  void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {&#xD;
    ...&#xD;
    response.setHeader(&amp;quot;Access-Control-Allow-Headers&amp;quot;, &amp;quot;x-auth-token&amp;quot;)&#xD;
    ...&#xD;
  }&#xD;
&#xD;
  ...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All that remains is to pick up the custom token in the resource server and use it to authenticate our user. This turns out to be pretty straightforward because all we need to do is tell Spring Security where the session repository is, and where to look for the token (session ID) in an incoming request. First we need to add the Spring Session and Redis dependencies, and then we can set up the &lt;code&gt;Filter&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
@RestController&#xD;
@EnableRedisHttpSession&#xD;
class ResourceApplication {&#xD;
&#xD;
  ...&#xD;
  &#xD;
  @Bean&#xD;
  HeaderHttpSessionStrategy sessionStrategy() {&#xD;
    new HeaderHttpSessionStrategy();&#xD;
  }&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This &lt;code&gt;Filter&lt;/code&gt; created is the mirror image of the one in the UI server, so it establishes Redis as the session store. The only difference is that it uses a custom &lt;code&gt;HttpSessionStrategy&lt;/code&gt; that looks in the header (&amp;ldquo;X-Auth-Token&amp;rdquo; by default) instead of the default (cookie named &amp;ldquo;JSESSIONID&amp;rdquo;). &lt;/p&gt;&lt;p&gt;There is one final change to the resource server to make it work with our new authentication scheme. Spring Boot default security is stateless, and we want this to store authentication in the session, so we need to be explicit in &lt;code&gt;application.yml&lt;/code&gt; (or &lt;code&gt;application.properties&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint yaml"&gt;security:&#xD;
  sessions: NEVER
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This says to Spring Security &amp;ldquo;never create a session, but use one if it is there&amp;rdquo; (it will be already be there because of the authentication in the UI).&lt;/p&gt;&lt;p&gt;Re-launch the resource server and open the UI up in a new browser window.&lt;/p&gt;&lt;h2&gt;&lt;a href="#why-doesn-rsquo-t-it-all-work-with-cookies" class="anchor" name="why-doesn-rsquo-t-it-all-work-with-cookies"&gt;&lt;/a&gt;Why Doesn&amp;rsquo;t it All Work With Cookies?&lt;/h2&gt;&lt;p&gt;We had to use a custom header and write code in the client to populate the header, which isn&amp;rsquo;t terribly complicated, but it seems to contradict the advice in &lt;a href="http://spring.io/blog/2015/01/12/the-login-page-angular-js-and-spring-security-part-ii" title="Second Article in the Series"&gt;Part II&lt;/a&gt; to use cookies and sessions wherever possible. The argument there was that not to do so introduces additional unecessary complexity, and for sure the implementation we have now is the most complex we have seen so far: the technical part of the solution far outweighs the business logic (which is admittedly tiny). This is definitely a fair criticism (and one we plan to address in the next article in this series), but let&amp;rsquo;s just briefly look at why it&amp;rsquo;s not as simple as just using cookies and sessions for everything.&lt;/p&gt;&lt;p&gt;At least we are still using the session, which makes sense because Spring Security and the Servlet container know how to do that with no effort on our part. But couldn&amp;rsquo;t we have continued to use cookies to transport the authentication token? It would have been nice, but there is a reason it wouldn&amp;rsquo;t work, and that is that the browser wouldn&amp;rsquo;t let us. You can just go poking around in the browser&amp;rsquo;s cookie store from a JavaScript client, but there are some restrictions, and for good reason. In particular you don&amp;rsquo;t have access to the cookies that were sent by the server as &amp;ldquo;HttpOnly&amp;rdquo; (which you will see is the case by default for session cookies). You also can&amp;rsquo;t set cookies in outgoing requests, so we couldn&amp;rsquo;t set a &amp;ldquo;SESSION&amp;rdquo; cookie (which is the Spring Session default cookie name), we had to use a custom &amp;ldquo;X-Session&amp;rdquo; header. Both these restrictions are for your own protection so malicious scripts cannot access your resources without proper authorization.&lt;/p&gt;&lt;p&gt;TL;DR the UI and resource servers do not have a common origin, so they cannot share cookies (even though we can use Spring Session to force them to share sessions).&lt;/p&gt;&lt;h2&gt;&lt;a href="#conclusion" class="anchor" name="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;We have duplicated the features of the application in &lt;a href="http://spring.io/blog/2015/01/12/the-login-page-angular-js-and-spring-security-part-ii" title="Second Article in the Series"&gt;Part II of this series&lt;/a&gt;: a home page with a greeting fetched from a remote backend, with login and logout links in a navigation bar. The difference is that the greeting comes from a resource server that is a standalone, instead of being embedded in the UI server. This added significant complexity to the implementation, but the good news is that we have a mostly configuration-based (and practically 100% declarative) solution. We could even make the solution 100% declarative by extracting all the new code into libraries (Spring configuration and Angular custom directives). We are going to defer that interesting task for after the next couple of installments. In the &lt;a href="https://spring.io/blog/2015/01/28/the-api-gateway-pattern-angular-js-and-spring-security-part-iv"&gt;next article&lt;/a&gt; we are going to look at a different really great way to reduce all the complexity in the current implementation: the API Gateway Pattern (the client sends all its requests to one place and authentication is handled there).&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Note: we used Spring Session here to share sessions between 2 servers that are not logically the same application. It&amp;rsquo;s a neat trick, and it isn&amp;rsquo;t possible with &amp;ldquo;regular&amp;rdquo; JEE distributed sessions.&lt;/p&gt;
&lt;/blockquote&gt;</content>
  </entry>
  <entry>
    <title>Microservice  Registration and Discovery with Spring Cloud and Netflix's Eureka</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/20/microservice-registration-and-discovery-with-spring-cloud-and-netflix-s-eureka" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-01-18:1934</id>
    <updated>2015-01-20T09:00:00Z</updated>
    <content type="html">&lt;p&gt;The microservice style of architecture is not so much about building individual services so much as it is making the &lt;em&gt;interactions between&lt;/em&gt; services reliable and failure-tolerant. While the focus on these interactions is new, the need for that focus is not. We&amp;rsquo;ve long known that services don&amp;rsquo;t operate in a vacuum. Even before cloud economics, we knew that - in a practical world - clients should be designed to be immune to service outages. The cloud makes it easy to think of capacity as ephemeral, fluid. The burden is on the client to manage this intrinsic complexity.&lt;/p&gt;&lt;p&gt;In this post, we&amp;rsquo;ll look at how &lt;a href="http://cloud.spring.io"&gt;Spring Cloud&lt;/a&gt; helps you manage that complexity with a service registry like Eureka and Consul and client-side load-balancing.&lt;/p&gt;&lt;h2&gt;&lt;a href="#the-cloud-rsquo-s-phone-book" class="anchor" name="the-cloud-rsquo-s-phone-book"&gt;&lt;/a&gt;The Cloud&amp;rsquo;s Phone Book&lt;/h2&gt;&lt;p&gt;A service registry is a phone book for your microservices. Each service registers itself with the service registry and tells the registry where it lives (host, port, node name) and perhaps other service-specific metadata - things that other services can use to make informed decisions about it. Clients can ask questions about the service topology (&amp;ldquo;are there any &amp;lsquo;fulfillment-services&amp;rsquo; available, and if so, where?&amp;rdquo;) and service capabilities (&amp;ldquo;can you handle X, Y, and Z?&amp;rdquo;). You probably already use a technology that has some notion of a cluster (Cassandra, Memcached, etc.), and that information is ideally stored in a service registry.&lt;/p&gt;&lt;p&gt;There &lt;a href="http://jasonwilder.com/blog/2014/02/04/service-discovery-in-the-cloud/"&gt;are several popular options for service registries&lt;/a&gt;. Netflix built and then open-sourced their own service registry, &lt;a href="https://github.com/netflix/eureka"&gt;Eureka&lt;/a&gt;. Another new, but increasingly popular option is &lt;a href="http://consul.io"&gt;Consul&lt;/a&gt;. We&amp;rsquo;ll look principally at some of the integration between Spring Cloud and Netflix&amp;rsquo;s Eureka service registry.&lt;/p&gt;&lt;p&gt;From the &lt;a href="http://projects.spring.io/spring-cloud/"&gt;the Spring Cloud project page&lt;/a&gt;: &amp;ldquo;Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer&amp;rsquo;s own laptop, bare metal data centres, and managed platforms such as Cloud Foundry.&amp;rdquo;&lt;/p&gt;&lt;p&gt;Spring Cloud already supports both Eureka and Consul, though I&amp;rsquo;ll focus on Eureka in this post because it can be bootstrapped automatically in one of Spring Cloud&amp;rsquo;s auto-configurations. Eureka is implemented on the JVM but Consul is implemented in Go.&lt;/p&gt;&lt;h2&gt;&lt;a href="#installing-eureka" class="anchor" name="installing-eureka"&gt;&lt;/a&gt;Installing Eureka&lt;/h2&gt;&lt;p&gt;Standing up an instance of the Eureka service registry is easy if you have &lt;code&gt;org.springframework.boot:spring-cloud-starter-eureka-server&lt;/code&gt; on your classpath.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package registry;&#xD;
&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;&#xD;
&#xD;
@SpringBootApplication&#xD;
@EnableEurekaServer&#xD;
public class Application {&#xD;
&#xD;
  public static void main(String[] args) {&#xD;
    SpringApplication.run(Application.class, args);&#xD;
  }&#xD;
}&#xD;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;My nominal &lt;code&gt;src/main/resources/application.yml&lt;/code&gt; looks like this these days.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint yml"&gt;server:&#xD;
  port: ${PORT:8761}&#xD;
&#xD;
eureka:&#xD;
  client:&#xD;
    registerWithEureka: false&#xD;
    fetchRegistry: false&#xD;
    server:&#xD;
      waitTimeInMsWhenSyncEmpty: 0&#xD;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The service&amp;rsquo;s port is defaulted to the well-known 8761 if &lt;a href="http://cloudfoundry.org/index.html"&gt;Cloud Foundry&lt;/a&gt;&amp;rsquo;s &lt;code&gt;VCAP_APPLICATION_PORT&lt;/code&gt; environment variable isn&amp;rsquo;t available. The rest of the configuration simply tells this instance to not register itself with the Eureka instance it finds, because that instance is.. itself. If you run it locally, you can point a browser to &lt;code&gt;http://localhost:8761&lt;/code&gt; and monitor the registry from there.&lt;/p&gt;&lt;h2&gt;&lt;a href="#deploying-eureka" class="anchor" name="deploying-eureka"&gt;&lt;/a&gt;Deploying Eureka&lt;/h2&gt;&lt;p&gt;Spring Cloud will startup a &lt;a href="http://projects.spring.io/spring-cloud/spring-cloud.html#spring-cloud-eureka-server"&gt; Eureka instance with its Spring Boot auto-configuration&lt;/a&gt;. There are a couple of things to consider when deploying Eureka. First, you should &lt;em&gt;always&lt;/em&gt; use a highly-available configuration in production. &lt;a href="https://github.com/spring-cloud-samples/eureka"&gt;The Spring Cloud Eureka sample&lt;/a&gt; shows how to deploy it in a highly-available configuration.&lt;/p&gt;&lt;p&gt;Clients need to know where to find the Eureka instance. If you have DNS then that might be one option, if you&amp;rsquo;re not polluting too large a global namespace. If you&amp;rsquo;re &lt;a href="http://12factor.net/"&gt;running in a Platform-as-a-Service and embracing 12-Factor app style applications&lt;/a&gt; then backing service credentials are configuration, and live external to the application, often exposed as environment variables. You can get the effect of having a Eureka service right now, though, by using Cloud Foundry&amp;rsquo;s &lt;code&gt;cf&lt;/code&gt; CLI &lt;a href="http://docs.pivotal.io/pivotalcf/devguide/services/user-provided.html"&gt;to create &lt;em&gt;a user-provided service&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;cf cups eureka-service -p &amp;#39;{&amp;quot;uri&amp;quot;:&amp;quot;http://host-of-your-eureka-setup&amp;quot;}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Point &lt;code&gt;host-of-your-eureka-setup&lt;/code&gt; to a well-known host for your highly-available Eureka setup. I suspect we&amp;rsquo;ll soon see a way to create Eureka as a backing service in the same way you might a PostgreSQL or ElasticSearch instance on &lt;a href="http://www.pivotal.io/platform-as-a-service/pivotal-cf"&gt;Pivotal Cloud Foundry&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Now that Eureka is up and running, let&amp;rsquo;s use it to connect some services to each other!&lt;/p&gt;&lt;h2&gt;&lt;a href="#speak-for-yourself" class="anchor" name="speak-for-yourself"&gt;&lt;/a&gt;Speak for Yourself&lt;/h2&gt;&lt;p&gt;Spring Cloud-based services have a &lt;code&gt;spring.application.name&lt;/code&gt; property. It&amp;rsquo;s used to pull down configuration from the Configuration server, to identify the service to Eureka, and is referenceable in numerous other contexts when building Spring Cloud-based applications. This value typically lives in &lt;code&gt;src/main/resources/bootstrap.(yml,properties)&lt;/code&gt;, which is picked up earlier in the initialization than the normal &lt;code&gt;src/main/resources/application.(yml,properties)&lt;/code&gt;. A service with &lt;code&gt;org.springframework.cloud:spring-cloud-starter-eureka&lt;/code&gt; on the classpath will be registered with the Eureka registry by its &lt;code&gt;spring.application.name&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;src/main/resources/boostrap.yml&lt;/code&gt; file for each of my services looks like this, where &lt;code&gt;my-service&lt;/code&gt; is the service name that changes from service to service:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint yaml"&gt;spring:&#xD;
  application:&#xD;
    name: my-service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Spring Cloud uses the information in &lt;code&gt;bootstrap.yml&lt;/code&gt; at service startup to discover the Eureka service registry and register the service and its &lt;code&gt;spring.application.name&lt;/code&gt;, host, port, etc. You might wonder about that first bit. Spring Cloud attempts to look for it at a well-known address (&lt;code&gt;http://127.0.0.1:&lt;/code&gt;), but you can change that. Here&amp;rsquo;s my &lt;code&gt;src/main/resources/application.yml&lt;/code&gt; for a nominal Spring Cloud microservice, though &lt;a href="https://spring.io/blog/2015/01/13/configuring-it-all-out-or-12-factor-app-style-configuration-with-spring"&gt;there&amp;rsquo;s no reason this couldn&amp;rsquo;t live in the Spring Cloud configuration server&lt;/a&gt;. There may be many instances identifying themselves as &lt;code&gt;my-service&lt;/code&gt;; Eureka will append the process&amp;rsquo; information to a list of registrations for the same ID.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint yml"&gt;&lt;br/&gt;&lt;br/&gt;eureka:&#xD;
  client:&#xD;
    serviceUrl:&#xD;
      defaultZone: ${vcap.services.eureka-service.credentials.uri:http://127.0.0.1:8761}/eureka/&#xD;
&#xD;
---&#xD;
spring:&#xD;
  profiles: cloud&#xD;
eureka:&#xD;
  instance:&#xD;
    hostname: ${APPLICATION_DOMAIN}&#xD;
    nonSecurePort: 80&#xD;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this configuration, the Spring Cloud Eureka client knows to connect to the Eureka instance running on localhost &lt;em&gt;if&lt;/em&gt; Cloud Foundry&amp;rsquo;s &lt;code&gt;VCAP_SERVICES&lt;/code&gt; environment variable doesn&amp;rsquo;t exist or contain valid credentials.&lt;/p&gt;&lt;p&gt;The bit of configuration under the &lt;code&gt;---&lt;/code&gt; delimiter is for when the application &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html"&gt;is run under the &lt;code&gt;cloud&lt;/code&gt; Spring profile&lt;/a&gt;. It&amp;rsquo;s easy to set a profile using the &lt;code&gt;SPRING_PROFILES_ACTIVE&lt;/code&gt; environment variable. You can configure Cloud Foundry environment variables in your &lt;code&gt;manifest.yml&lt;/code&gt; or, &lt;a href="https://github.com/pivotal-cf-experimental/lattice"&gt;on Cloud Foundry Lattice&lt;/a&gt;, your &lt;a href="https://docs.docker.com/reference/builder/"&gt;Docker file&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;cloud&lt;/code&gt; profile specific configuration specifically tells the Eureka client how to register the service in the discovered Eureka registry. I do this because my services don&amp;rsquo;t use fixed DNS. &lt;code&gt;APPLICATION_DOMAIN&lt;/code&gt; is an environment variable I set in my deploy scripts that tells a service what its externally referenceable URI is.&lt;/p&gt;&lt;p&gt;Click refresh on the Eureka web UI after 30 seconds (as of this writing) and you&amp;rsquo;ll see your web service(s) registered.&lt;/p&gt;&lt;h2&gt;&lt;a href="#client-side-load-balancing-with-ribbon" class="anchor" name="client-side-load-balancing-with-ribbon"&gt;&lt;/a&gt;Client-Side Load Balancing with Ribbon&lt;/h2&gt;&lt;p&gt;Spring Cloud references other services through their &lt;code&gt;spring.application.name&lt;/code&gt; value. Knowing this value can be handy in a lot of contexts when building Spring Cloud-based services.&lt;/p&gt;&lt;p&gt;The goal, you&amp;rsquo;ll recall, is to let the &lt;em&gt;client&lt;/em&gt; decide based on contextual information (which could change from client to client) which service instance it will connect to. Netflix has a Eureka-aware client-side load-balancing client called &lt;a href="https://github.com/Netflix/ribbon"&gt;Ribbon&lt;/a&gt; that Spring Cloud integrates extensively. Ribbon is a client library with built-in software load balancers. Let&amp;rsquo;s look at an example that uses Eureka directly and then uses it through the Ribbon and Spring Cloud integration.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package passport;&#xD;
&#xD;
import org.springframework.beans.factory.annotation.Autowired;&#xD;
import org.springframework.boot.CommandLineRunner;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.boot.builder.SpringApplicationBuilder;&#xD;
import org.springframework.cloud.client.ServiceInstance;&#xD;
import org.springframework.cloud.client.discovery.DiscoveryClient;&#xD;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;&#xD;
import org.springframework.cloud.netflix.feign.FeignConfiguration;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.core.ParameterizedTypeReference;&#xD;
import org.springframework.http.HttpMethod;&#xD;
import org.springframework.http.ResponseEntity;&#xD;
import org.springframework.stereotype.Component;&#xD;
import org.springframework.web.bind.annotation.PathVariable;&#xD;
import org.springframework.web.bind.annotation.RequestMapping;&#xD;
import org.springframework.web.bind.annotation.RequestMethod;&#xD;
import org.springframework.web.client.RestTemplate;&#xD;
&#xD;
import java.util.List;&#xD;
&#xD;
@SpringBootApplication&#xD;
@EnableEurekaClient&#xD;
public class Application extends FeignConfiguration {&#xD;
&#xD;
  public static void main(String[] args) {&#xD;
    new SpringApplicationBuilder(Application.class)&#xD;
    .web(false)&#xD;
    .run(args);&#xD;
  }&#xD;
&#xD;
  @Bean&#xD;
  BookmarkClient bookmarkClient() {&#xD;
    return loadBalance(BookmarkClient.class, &amp;quot;http://bookmark-service&amp;quot;);&#xD;
  }&#xD;
}&#xD;
&#xD;
@Component&#xD;
class DiscoveryClientExample implements CommandLineRunner {&#xD;
&#xD;
  @Autowired&#xD;
  private DiscoveryClient discoveryClient;&#xD;
&#xD;
  @Override&#xD;
  public void run(String... strings) throws Exception {&#xD;
    List&amp;lt;ServiceInstance&amp;gt; photoServices = discoveryClient.getInstances(&amp;quot;photo-service&amp;quot;);&#xD;
    photoServices.forEach(System.out::println);&#xD;
&#xD;
    List&amp;lt;ServiceInstance&amp;gt; bookmarkServices = discoveryClient.getInstances(&amp;quot;bookmark-service&amp;quot;);&#xD;
    bookmarkServices.forEach(System.out::println);&#xD;
  }&#xD;
}&#xD;
&#xD;
@Component&#xD;
class RestTemplateExample implements CommandLineRunner {&#xD;
&#xD;
  @Autowired&#xD;
  private RestTemplate restTemplate;&#xD;
&#xD;
  @Override&#xD;
  public void run(String... strings) throws Exception {&#xD;
    // use the &amp;quot;smart&amp;quot; Eureka-aware RestTemplate&#xD;
    ResponseEntity&amp;lt;List&amp;lt;Bookmark&amp;gt;&amp;gt; exchange = this.restTemplate.exchange(&#xD;
      &amp;quot;http://bookmark-service/{userId}/bookmarks&amp;quot;, HttpMethod.GET, null,&#xD;
      new ParameterizedTypeReference&amp;lt;List&amp;lt;Bookmark&amp;gt;&amp;gt;() {}, (Object) &amp;quot;mstine&amp;quot;);&#xD;
&#xD;
    exchange.getBody().forEach(System.out::println);&#xD;
  }&#xD;
}&#xD;
&#xD;
@Component&#xD;
class FeignExample implements CommandLineRunner {&#xD;
&#xD;
  @Autowired&#xD;
  private BookmarkClient bookmarkClient;&#xD;
&#xD;
  @Override&#xD;
  public void run(String... strings) throws Exception {&#xD;
    this.bookmarkClient.getBookmarks(&amp;quot;jlong&amp;quot;).forEach(System.out::println);&#xD;
  }&#xD;
}&#xD;
&#xD;
interface BookmarkClient {&#xD;
&#xD;
  @RequestMapping(method = RequestMethod.GET, value = &amp;quot;/{userId}/bookmarks&amp;quot;)&#xD;
  List&amp;lt;Bookmark&amp;gt; getBookmarks(@PathVariable(&amp;quot;userId&amp;quot;) String userId);&#xD;
}&#xD;
&#xD;
class Bookmark {&#xD;
  private Long id;&#xD;
  private String href, label, description, userId;&#xD;
&#xD;
  @Override&#xD;
  public String toString() {&#xD;
    return &amp;quot;Bookmark{&amp;quot; +&#xD;
    &amp;quot;id=&amp;quot; + id +&#xD;
    &amp;quot;, href=&amp;#39;&amp;quot; + href + &amp;#39;\&amp;#39;&amp;#39; +&#xD;
    &amp;quot;, label=&amp;#39;&amp;quot; + label + &amp;#39;\&amp;#39;&amp;#39; +&#xD;
    &amp;quot;, description=&amp;#39;&amp;quot; + description + &amp;#39;\&amp;#39;&amp;#39; +&#xD;
    &amp;quot;, userId=&amp;#39;&amp;quot; + userId + &amp;#39;\&amp;#39;&amp;#39; +&#xD;
    &amp;#39;}&amp;#39;;&#xD;
  }&#xD;
&#xD;
  public Bookmark() {&#xD;
  }&#xD;
&#xD;
  public Long getId() {&#xD;
    return id;&#xD;
  }&#xD;
&#xD;
  public String getHref() {&#xD;
    return href;&#xD;
  }&#xD;
&#xD;
  public String getLabel() {&#xD;
    return label;&#xD;
  }&#xD;
&#xD;
  public String getDescription() {&#xD;
    return description;&#xD;
  }&#xD;
&#xD;
  public String getUserId() {&#xD;
    return userId;&#xD;
  }&#xD;
}&#xD;
&#xD;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;DiscoveryClientExample&lt;/code&gt; bean demonstrates using the Spring Cloud common &lt;code&gt;DiscoveryClient&lt;/code&gt; to interrogate the services. The results contain information like the hostname and the port for each service.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;RestTemplateExample&lt;/code&gt; bean demonstrates the auto-configured Ribbon-aware &lt;code&gt;RestTemplate&lt;/code&gt; instance. Note that the URI uses a service ID, not an actual hostname. The service ID from the URI is extracted and given to Ribbon which then uses a load-balancer to pick from among the registered instances in Eureka and, finally, the HTTP call is made to a real service instance.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;FeignExample&lt;/code&gt; bean demonstrates using the Spring Cloud Feign integration. &lt;a href="https://github.com/Netflix/feign"&gt;Feign&lt;/a&gt; is a handy project from Netflix that lets you describe a REST API client declaratively with annotations on an interface. In this case, we want to map the HTTP results from calls to the &lt;code&gt;bookmark-service&lt;/code&gt; to the &lt;code&gt;BookmarkClient&lt;/code&gt; Java interface. This mapping is configured in the &lt;code&gt;Application&lt;/code&gt; class towards the top of the code page:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;  @Bean&#xD;
  BookmarkClient bookmarkClient() {&#xD;
    return loadBalance(BookmarkClient.class, &amp;quot;http://bookmark-service&amp;quot;);&#xD;
  }&#xD;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The URI is a service reference, not an actual hostname. It&amp;rsquo;s passed through the same processing as the URI given to the &lt;code&gt;RestTemplate&lt;/code&gt; in the last example.&lt;/p&gt;&lt;p&gt;Pretty cool, eh? You can use the more basic &lt;code&gt;DiscoveryClient&lt;/code&gt; API and make a call, or use the Ribbon and Eureka-aware &lt;code&gt;RestTemplate&lt;/code&gt; or Feign-integrated client.&lt;/p&gt;&lt;h2&gt;&lt;a href="#review" class="anchor" name="review"&gt;&lt;/a&gt;Review&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Cloud supports both the Eureka and Consul service registries (and perhaps more!)&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;DiscoveryClient&lt;/code&gt; API can be used to interactively query Eureka given a service ID.&lt;/li&gt;
  &lt;li&gt;Ribbon is a client-side load balancer&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;RestTemplate&lt;/code&gt; can substitute service IDs for hostnames in URIs and can defer to Ribbon to pick a service.&lt;/li&gt;
  &lt;li&gt;The Netflix Spring Cloud Feign integration makes it simple to create smart, Eureka-aware REST clients that uses Ribbon for client-side load-balacing to pick an available service instance.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#where-to-go-from-here" class="anchor" name="where-to-go-from-here"&gt;&lt;/a&gt;Where to go from Here&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;ve only looked at service discovery and resolution with Eureka. Most of what we talked about here applies to Consul as well and indeed Consul has some features that Netflix doesn&amp;rsquo;t have.&lt;/p&gt;&lt;p&gt;Round-robin load-balancing is just one option. You might instead require some notion of a leader node, and leadership election. Spring Cloud aims provides support for that kind of coordination, as well.&lt;/p&gt;&lt;p&gt;Service registration and client-side load-balancing are just &lt;em&gt;one&lt;/em&gt; of the things that Spring Cloud does to promote more resilient service-to-service calls. We have &lt;em&gt;not&lt;/em&gt; looked at its support single-sign on and security, distributed locks and leadership election, reliability patterns like the circuit breaker, and much more.&lt;/p&gt;&lt;p&gt;&lt;a href="https://github.com/joshlong/service-registration-and-discovery"&gt;The example code is all available online&lt;/a&gt; so don&amp;rsquo;t hesitate to the check out the example on your local machine or push it to Cloud Foundry using &lt;a href="https://github.com/joshlong/service-registration-and-discovery/blob/master/cf.sh"&gt;the provided &lt;code&gt;cf.sh&lt;/code&gt; script&lt;/a&gt; and various &lt;code&gt;manifest.yml&lt;/code&gt; files.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Spring 4 Web Applications</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/20/springone2gx-2014-replay-spring-4-web-applications" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-01-09:1924</id>
    <updated>2015-01-20T01:10:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014.&lt;/p&gt;
&lt;p&gt;Speaker: Rossen Stoyanchev &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/s2gx2014-spring4webapps"&gt;http://www.slideshare.net/SpringCentral/s2gx2014-spring4webapps&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Web / JavaScript Track &lt;/p&gt;
&lt;p&gt;The Web and Spring MVC continue to be one of the most active areas of the Spring Framework with each new release adding plenty of features and refinements requested by the community. Furthermore version 4 added a significant choice for web applications to build WebSocket-style architectures. This talk provides an overview of the areas in which the framework has evolved along with highlights of specific noteworthy features from the most recent releases. &lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="//www.youtube.com/embed/yxKJsgNYDQI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Cassandra, Couchbase and Spring Data in the Enterprise</title>
    <link rel="alternate" href="https://spring.io/blog/2015/01/20/springone2gx-2014-replay-cassandra-couchbase-and-spring-data-in-the-enterprise" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-01-09:1923</id>
    <updated>2015-01-20T01:07:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speakers: Matthew Adams (SCI Spike), Michael Nitschinger (Couchbase) &lt;/p&gt;
&lt;p&gt;Data / Integration Track &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/cassandra-couchbase-andspringdataintheenterprise"&gt;http://www.slideshare.net/SpringCentral/cassandra-couchbase-andspringdataintheenterprise&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; Spring Data Cassandra brings Cassandra support to the Spring Data umbrella of projects, offering Spring Data's familiar Repository concepts &amp;amp; POJO persistence. This talk will focus first on POJO persistence over Cassandra, including automatic Cassandra schema generation and Spring context configuration using both XML &amp;amp; Java. Then, the talk will dig deeper into some of the lower-level features that Spring Data Cassandra is built upon (AKA &amp;quot;Spring CQL&amp;quot;), which make plain, old Cassandra development simpler &amp;amp; easier. Couchbase Server is well-known as one of the leaders in the NoSQL space, heavily used in enterprises and startups alike where low latency even at hundreds of thousands of operations per seconds matters. This talk will not only give a short introduction about the benefits of adopting Couchbase, but also show how to integrate it into your Java Enterprise landscape through its support for Spring Data. You will learn how to fully control your database schema from the application through entities and repositories, how to deploy new application versions or scale out your cluster without a single second of downtime and also how to integrate easily with elasticsearch.&lt;/p&gt;&lt;p&gt;&lt;pre&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/LkDb2dZyoTk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/pre&gt;&lt;/p&gt;&lt;/p&gt;</content>
  </entry>
</feed>

