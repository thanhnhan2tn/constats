package model.dhcp;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import model.apache.VirtualHost;
import model.ftp.EventFTP;
import model.ftp.LogChartFTP;
import model.server.Server;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.Session;

public class DHCPConfig {
	// Phuc vu cho start/stop/restart va upload to serve
	public boolean sendCommandToServer(Server sv, String cmd) {
		Session ss = sv.getSession(sv);
		try {
			// option -e giup nhan dang ki tu xuong dong
			Channel channel = ss.openChannel("exec");
			((ChannelExec) channel).setCommand(cmd);
			((ChannelExec) channel).setErrStream(System.err);

			InputStream in = channel.getInputStream();
			channel.connect();
			byte[] tmp = new byte[1024];
			while (true) {
				while (in.available() > 0) {
					int i = in.read(tmp, 0, 1024);
					if (i < 0)
						break;
					System.out.print(new String(tmp, 0, i));
				}
				if (channel.isClosed()) {
					System.out.println("exit-status: "
							+ channel.getExitStatus());

					break;
				}
				try {
					Thread.sleep(1000);
				} catch (Exception ee) {
				}
			}
			channel.disconnect();
			if (channel.getExitStatus() == 0) {

				return true;
			} else {
				return false;
			}
		} catch (Exception e) {
			return false;
		}
	}

	// Start
	public String Start(Server sv) {
		Stop(sv);
		String command = "echo " + sv.getServerPassword() + " |sudo -S "
				+ " service isc-dhcp-server start ";
		return uploadToServer(sv, command); // thong bao la da start hay stop
	}

	// Stop
	public String Stop(Server sv) {
		Restart(sv);
		String command = "echo " + sv.getServerPassword() + " |sudo -S "
				+ " service isc-dhcp-server stop ";
		return uploadToServer(sv, command);// thong bao la da start hay stop
	}

	// Restart
	public String Restart(Server sv) {
		String command = "echo " + sv.getServerPassword() + " |sudo -S "
				+ " service isc-dhcp-server restart ";
		return uploadToServer(sv, command);// thong bao la da restart hay chua ?
	}

	// getError
	public String getError(Server sv) {
		Restart(sv);
		String kq = uploadToServer(sv, "echo " + sv.getServerPassword()
				+ "| sudo -S " + " tail -10 /var/log/syslog | grep 'dhcpd'");

		return kq;
	}

	// getLog
	public String getLog(Server sv) {
		Restart(sv);
		String kq = uploadToServer(sv, "echo " + sv.getServerPassword()
				+ "| sudo -S " + " cat /var/lib/dhcp/dhcpd.leases");

		return kq;
	}

	// check Install
	public Boolean checkInstall(Server sv) {
		String command = "echo "
				+ sv.getServerPassword()
				+ " |sudo -S "
				+ "dpkg --get-selections | grep 'isc-dhcp-server\\s' | awk '{print $2}'";
		String kq = uploadToServer(sv, command);
		if (kq.startsWith("deinstall") || kq.length() == 0) {
			return false;// not install
		} else {
			return true; // installed
		}
	}

	// checkRunning
	public Boolean checkRunning(Server sv) {
		// can co checkInstall se ko bao loi
		if (checkInstall(sv) == true) {
			String command = "echo " + sv.getServerPassword() + " |sudo -S "
					+ " service isc-dhcp-server status";
			String kq = uploadToServer(sv, command);
			if (kq.indexOf("not running") != -1 || kq.indexOf("stop") != -1
					|| kq.indexOf("waiting") != -1) {
				return false; // not running - stoped
			} else {
				return true; // running - starting
			}
		} else {
			return false;
		}
	}

	// Install
	public Boolean Install(Server sv) {
		String command = "echo " + sv.getServerPassword() + " |sudo -S "
				+ " apt-get -y install isc-dhcp-server ";
		return sendCommandToServer(sv, command);

	}

	// Remove Service
	public Boolean Remove(Server sv) {
		String command = "echo " + sv.getServerPassword() + "|sudo -S  "
				+ " apt-get -y --purge remove isc-dhcp-server ";
		Boolean boo = sendCommandToServer(sv, command);
		if (boo == true) {
			return true;
		} else {
			return false;
		}
	}

	// Upload cmd / file to server phuc vu cho viec loadConfigToPlainText

	public String uploadToServer(Server sv, String cmd) {
		Session ss = sv.getSession(sv);
		try {
			String chuoilay = "";
			String tong = "";
			// option -e giup nhan dang ki tu xuong dong
			Channel channel = ss.openChannel("exec");
			((ChannelExec) channel).setCommand(cmd);
			((ChannelExec) channel).setErrStream(System.err);
			InputStream in = channel.getInputStream();
			channel.connect();
			byte[] tmp = new byte[1024];
			while (true) {
				while (in.available() > 0) {
					int i = in.read(tmp, 0, 1024);
					if (i < 0)
						break;
					chuoilay = new String(tmp, 0, i);
					// System.out.print(chuoilay);
					tong = tong + chuoilay;

				}

				if (channel.isClosed()) {
					System.out.println("exit-status: "
							+ channel.getExitStatus());
					if (channel.getExitStatus() == 0) {
						System.out.println("***Process Success...OK");
					} else {
						System.out.println("***Process Failed...!!!");
					}
					break;
				}
				try {
					Thread.sleep(1000);
				} catch (Exception ee) {
				}
			}
			channel.disconnect();
			return tong;
		} catch (Exception e) {
			return null;
		}
	}

	// Xoa tat ca dong trong
	public String chuanhoaChuoi3(String chuoiCH) throws IOException {

		String chuoilay = chuoiCH;

		String line2 = "";
		String kq_lay = "";
		StringReader str2 = new StringReader(chuoilay);
		BufferedReader br = new BufferedReader(str2);
		while ((line2 = br.readLine()) != null) {
			line2 = line2.trim();
			// Ham xu ly ";"
			// ham xu ly dau ";"
			if (line2.indexOf(" ;") != -1) {
				line2 = line2.replace(" ;", ";");

			}

			if (line2.indexOf("; ") != -1) {
				line2 = line2.replace("; ", ";");

			}

			if (line2.indexOf(" ; ") != -1) {
				line2 = line2.replace(" ; ", ";");

			}

			// Ham xoa tat ca khoang trong tren line
			if (line2.isEmpty()) {
				continue;
			}
			kq_lay = kq_lay + line2 + "\n";
		}
		str2.close();

		return kq_lay;

	}

	/**
	 * 
	 * @param chuoiCH
	 * @return
	 * @throws IOException
	 */
	// Chuan hoa lan 2
	public String chuanhoaChuoi2(String chuoiCH) throws IOException {

		String chuoilay = chuoiCH;

		chuoilay = chuoilay.replaceAll(";", ";\n");
		String line2 = "";
		String kq_lay = "";
		StringReader str2 = new StringReader(chuoilay);
		BufferedReader br = new BufferedReader(str2);
		while ((line2 = br.readLine()) != null) {
			line2 = line2.trim();
			if (line2.endsWith("{")) {
				line2 = line2.replace("{", "\n{");
			}

			kq_lay = kq_lay + line2 + "\n";
		}
		str2.close();

		return kq_lay;

	}

	/**
	 * 
	 * @param chuoiCH
	 * @return
	 */
	// Chuan hoa lan 1
	public String chuanhoaChuoi1(String chuoiCH) {

		try {

			StringReader str = new StringReader(chuoiCH);
			BufferedReader bufferedReader = new BufferedReader(str);
			String line;
			String chuoilay = "";
			while ((line = bufferedReader.readLine()) != null) {

				line = line.trim();
				// Replace nhieu khoang trang ve mot khoang trang
				line = line.replaceAll("\\s+", " ");
				// Xoa option
				line = line.replaceAll("option", "");

				line = line.trim();

				// Doi chuoi sau ki tu "{" xuong dong sau do se doi ki tu "{"
				// xuong dong o chuanhoa2
				if (line.indexOf("{") != -1) {
					line = line.replace("{", "{\n");

				}

				// Cat bo line chua "#" dau dong
				if (line.indexOf("#") != -1) {
					line = "";
				} else {
					chuoilay = chuoilay + line + "\n";
				}
			}
			str.close();

			return chuoilay.trim();
		} catch (IOException e) {
			e.printStackTrace();
		}
		// ----------------------------------------
		return null;

	}

	/**
	 * 
	 * @param sv
	 * @return
	 * @throws IOException
	 */
	// Load Config to Plaintext

	public String loadConfigToPlainText(Server sv) throws IOException {
		String kq = uploadToServer(sv, "cat /etc/dhcp/dhcpd.conf");
		kq = chuanhoaChuoi1(kq);
		kq = chuanhoaChuoi2(kq);
		kq = chuanhoaChuoi3(kq);
		return kq;
	}

	/**
	 * 
	 * @param sv
	 * @return
	 * @throws IOException
	 */
	// load config chung ngoai tru subnet ra
	public String loadConfigChungToPlainText(Server sv) throws IOException {
		String kq = uploadToServer(sv, "cat /etc/dhcp/dhcpd.conf");
		kq = chuanhoaChuoi1(kq);
		kq = chuanhoaChuoi2(kq);
		kq = chuanhoaChuoi3(kq);
		// regex dac biet
		String regex = "subnet [.\\d]+ netmask [.\\d]+\n\\{\n[\\w+;\n-.]+\n\\}";
		Pattern pt = Pattern.compile(regex);
		Matcher matcher = pt.matcher(kq);
		while (matcher.find()) {

			// System.out.println(matcher.group());
			kq = kq.replace(matcher.group(), "");
		}
		return kq;

	}

	/**
	 * 
	 * @param sv
	 * @return
	 * @throws IOException
	 */
	// convert text to Object Chung
	public ConfigChung convertTextToConfigChung(Server sv) throws IOException {
		HashMap<String, String> hm1 = new HashMap<String, String>();
		HashMap<String, Boolean> hm2 = new HashMap<String, Boolean>();

		// Chuoi da dc chuan hoa san
		String chuoi = loadConfigToPlainText(sv);

		// System.out.println("In ra Chuoi da chuan hoa: \n" + chuoi);
		StringReader str = new StringReader(chuoi);
		BufferedReader br = new BufferedReader(str);
		String line = "";

		while ((line = br.readLine()) != null) {
			if (line.indexOf("log-facility") != -1

			) {
				hm1.put(line.substring(0, line.indexOf(" ")).trim(), line
						.substring(line.indexOf(" ") + 1).replace(";", "")
						.trim());
			}

			if (line.indexOf("ddns-update-style") != -1) {
				if (line.substring(line.indexOf(" ") + 1).replace(";", "")
						.trim().equals("none")) {
					hm2.put("ddns-update-style", true);
				} else {
					hm2.put("ddns-update-style", false);

				}

			}
			if (line.indexOf("authoritative") != -1) {

				hm2.put("authoritative", true);
			}

		}
		str.close();
		// ---------------
		// Chuoi da dc chuan hoa san
		String chuoi2 = loadConfigChungToPlainText(sv);

		// System.out.println("In ra Chuoi da chuan hoa: \n" + chuoi);
		StringReader str2 = new StringReader(chuoi2);
		BufferedReader br2 = new BufferedReader(str2);
		String line2 = "";

		while ((line2 = br2.readLine()) != null) {
			if (line2.indexOf("domain-name") != -1
					|| line2.indexOf("domain-name-servers") != -1
					|| line2.indexOf("default-lease-time") != -1
					|| line2.indexOf("max-lease-time") != -1) {
				hm1.put(line2.substring(0, line2.indexOf(" ")).trim(), line2
						.substring(line2.indexOf(" ") + 1).replace(";", "")
						.trim());
			}

		}
		str2.close();
		ConfigChung cfg = new ConfigChung(hm2.get("ddns-update-style"),
				hm2.get("authoritative"), hm1.get("log-facility"),
				hm1.get("domain-name"), hm1.get("domain-name-servers"),
				hm1.get("default-lease-time"), hm1.get("max-lease-time"));

		return cfg;
	}

	/**
	 * 
	 * @param sv
	 * @return
	 * @throws IOException
	 */
	// convert text to Object Subnet
	public List<Subnet> convertTextToListSubnet(Server sv) throws IOException {

		HashMap<String, String> hm1 = new HashMap<String, String>();
		List<Subnet> subnet_multi = new ArrayList<Subnet>();
		// Chuoi da dc chuan hoa san
		String chuoi = loadConfigToPlainText(sv);

		// System.out.println("In ra Chuoi da chuan hoa: \n" + chuoi);
		StringReader str = new StringReader(chuoi);
		BufferedReader br = new BufferedReader(str);
		String line = "";
		try {
			while ((line = br.readLine()) != null) {
				if (line.indexOf("range") != -1
						|| line.indexOf("routers") != -1
						|| line.indexOf("domain-name-servers") != -1
						|| line.indexOf("domain-name") != -1
						|| line.indexOf("broadcast-address") != -1
						|| line.indexOf("default-lease-time") != -1
						|| line.indexOf("max-lease-time") != -1

				) {
					// Lay luon dau ";"
					hm1.put(line.substring(0, line.indexOf(" ")).trim(), line
							.substring(line.indexOf(" ") + 1).replace(";", "")
							.trim());
				}

				if (line.indexOf("subnet") != -1) {
					hm1.put("subnet",
							line.substring(line.indexOf(" ") + 1,
									line.indexOf("netmask") - 1).trim());
				}

				if (line.indexOf("netmask") != -1) {
					hm1.put("netmask", line
							.substring(line.lastIndexOf(" ") + 1).trim());
				}

				if (line.indexOf("}") != -1) {
					Subnet sn = new Subnet(hm1.get("subnet"),
							hm1.get("netmask"), hm1.get("range"),
							hm1.get("domain-name-servers"),
							hm1.get("domain-name"), hm1.get("routers"),
							hm1.get("broadcast-address"),
							hm1.get("default-lease-time"),
							hm1.get("max-lease-time"));
					// tao them 1 dk if o day add cac sn khac rong la xong,
					// khong can su dung ham xoa Null Element trong List nua
					if (sn.getSubnet() != null && !sn.getSubnet().equals("")) {
						subnet_multi.add(sn);
					}
					hm1.put("subnet", null);
					hm1.put("netmask", null);
					hm1.put("range", null);
					hm1.put("domain-name-servers", null);
					hm1.put("domain-name", null);
					hm1.put("routers", null);
					hm1.put("broadcast-address", null);
					hm1.put("default-lease-time", null);
					hm1.put("max-lease-time", null);

				}

			}
			str.close();
			return subnet_multi;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	public DHCP convertConfigToObjectDHCP(Server sv) throws IOException {
		DHCP dhcp = new DHCP(convertTextToConfigChung(sv),
				convertTextToListSubnet(sv), convertTextToListHost(sv));
		return dhcp;
	}

	/**
	 * 
	 * @param sv
	 * @param list_sn
	 * @param list_host
	 * @param cfg
	 * @return
	 * @throws IOException
	 */

	// Upload Subnet Config to Server Them/Sua/Xoa, co the truyen vao 1 DHCP
	// hoac tung thanh phan con cua no, co the dung lam ham xoa Subnet va host
	public Boolean uploadConfigToDHCPServer(Server sv, List<Subnet> list_sn,
			List<HostFixIP> list_host, ConfigChung cfg) throws IOException {

		String config = "";
		String config2 = "";
		String config3 = "";
		// Khong xu ly them ki tu ";"
		for (Subnet sn : list_sn) {
			if (sn.getSubnet() != null && !sn.getSubnet().equals("")) {
				config = config + "subnet " + sn.getSubnet().trim();

			}
			if (sn.getNetmask() != null && !sn.getNetmask().equals("")) {

				config = config + " netmask " + sn.getNetmask().trim() + "\n";
			}
			// ki tu "{" ko phai ky tu dac biet
			config = config + "{" + "\n";
			if (sn.getRange() != null && !sn.getRange().equals("")) {

				config = config + "range " + "" + sn.getRange().trim() + ";"
						+ "\n";
			}
			if (sn.getRouter_gateway() != null
					&& !sn.getRouter_gateway().equals("")) {

				config = config + "option routers " + ""
						+ sn.getRouter_gateway().trim() + ";" + "\n";
			}
			if (sn.getDomain_name_server() != null
					&& !sn.getDomain_name_server().equals("")) {

				config = config + "option domain-name-servers " + ""
						+ sn.getDomain_name_server().trim() + ";" + "\n";
			}
			if (sn.getDomain_name() != null && !sn.getDomain_name().equals("")) {

				config = config + "option domain-name " + "\\\"\""
						+ sn.getDomain_name().trim() + "\\\"\"" + ";" + "\n";
			}
			if (sn.getBroadcast_address() != null
					&& !sn.getBroadcast_address().equals("")) {

				config = config + "option broadcast-address " + ""
						+ sn.getBroadcast_address().trim() + ";" + "\n";
			}
			if (sn.getDefault_lease_time() != null
					&& !sn.getDefault_lease_time().equals("")) {

				config = config + "default-lease-time " + ""
						+ sn.getDefault_lease_time().trim() + ";" + "\n";
			}
			if (sn.getMax_lease_time() != null
					&& !sn.getMax_lease_time().equals("")) {

				config = config + "max-lease-time " + ""
						+ sn.getMax_lease_time().trim() + ";" + "\n";
			}
			config = config + "}" + "\n";

		}

		for (HostFixIP host : list_host) {
			if (host.getHostname() != null && !host.getHostname().equals("")) {
				config2 = config2 + "host " + host.getHostname() + "\n";
			}
			config2 = config2 + "{" + "\n";
			if (host.getHardware_internet() != null
					&& !host.getHardware_internet().equals("")) {
				config2 = config2 + "hardware ethernet " + ""
						+ host.getHardware_internet() + ";" + "\n";
			}

			if (host.getFilename() != null && !host.getFilename().equals("")) {
				config2 = config2 + "filename " + "\\\"\"" + host.getFilename()
						+ "\\\"\"" + ";" + "\n";
			}

			if (host.getServername() != null
					&& !host.getServername().equals("")) {
				config2 = config2 + "server-name " + "\\\"\""
						+ host.getServername() + "\\\"\"" + ";" + "\n";
			}

			if (host.getFixed_address() != null
					&& !host.getFixed_address().equals("")) {
				config2 = config2 + "fixed-address " + ""
						+ host.getFixed_address() + ";" + "\n";
			}
			config2 = config2 + "}" + "\n";

		}
		if (cfg.getDns_update_style() != null
				&& !cfg.getDns_update_style().equals("")) {
			if (cfg.getDns_update_style() == true) {
				config3 = config3 + "ddns-update-style " + "" + "none" + ";"
						+ "\n";
			} else {
				config3 = config3 + "ddns-update-style " + "" + "standard"
						+ ";" + "\n";
			}
		}

		if (cfg.getAuthorative() != null && !cfg.getAuthorative().equals("")) {
			if (cfg.getAuthorative() == true) {
				config3 = config3 + "authoritative" + "" + ";" + "" + "\n";
			}
		}

		if (cfg.getLog_facitily() != null && !cfg.getLog_facitily().equals("")) {
			config3 = config3 + "log-facility " + "" + cfg.getLog_facitily()
					+ ";" + "\n";
		}

		if (cfg.getDomain_name() != null && !cfg.getDomain_name().equals("")) {
			config3 = config3 + "option domain-name " + "\\\"\""
					+ cfg.getDomain_name() + "\\\"\"" + ";" + "\n";
		}

		if (cfg.getDomain_name_servers() != null
				&& !cfg.getDomain_name_servers().equals("")) {
			config3 = config3 + "option domain-name-servers " + ""
					+ cfg.getDomain_name_servers() + ";" + "\n";
		}

		if (cfg.getDefault_lease_time() != null
				&& !cfg.getDefault_lease_time().equals("")) {

			config3 = config3 + "default-lease-time " + ""
					+ cfg.getDefault_lease_time().trim() + ";" + "\n";
		}
		if (cfg.getMax_lease_time() != null
				&& !cfg.getMax_lease_time().equals("")) {

			config3 = config3 + "max-lease-time " + ""
					+ cfg.getMax_lease_time().trim() + ";" + "\n";
		}

		String tong = "echo " + sv.getServerPassword()
				+ " | sudo -S bash -c ' echo -e " + "\"" + config3 + "\n"
				+ config + "\n" + config2 + "\n" + "\""
				+ "   > /etc/dhcp/dhcpd.conf '";

		// String tong = "echo " + sv.getServerPassword()
		// + " | sudo -S bash -c 'sudo echo -e " + "\\\"\""
		// + "tui la hieu minh ne nana"
		// + "\"\\\"   > /home/mayb/squ.txt '";

		System.out.println(".....Uploading to server.....");
		Boolean boo = sendCommandToServer(sv, tong);
		if (boo == true) {
			System.out.println("Uploaded DHCP ...OK");
			// return true;
		} else {
			System.out.println("Upload DHCP Failed!!!");

			// return false;
		}
		return boo;

	}

	// Upload String Config to Server
	public Boolean uploadStringConfigToDHCPServer(Server sv, String configDHCP) {
		// Thay the "\"" thanh .... de thuc thi co hieu luc, giup doan lenh nhan
		// biet duoc dau ".
		String tong = "echo " + sv.getServerPassword()
				+ " | sudo -S bash -c ' echo -e " + "\""
				+ configDHCP.replace("\"", "\\\"\"") + "\""
				+ "   > /etc/dhcp/dhcpd.conf '";

		System.out.println(".....Uploading to server.....");
		Boolean boo = sendCommandToServer(sv, tong);
		if (boo == true) {
			System.out.println("Uploaded DHCP ...OK");
			// return true;
		} else {
			System.out.println("Upload DHCP Failed!!!");

			// return false;
		}
		return boo;

	}

	// Xoa subnet, host
	public Boolean XoaSubnetorHost(Server sv, String subnet, String hostFixed)
			throws IOException {

		List<Subnet> list_sn = new ArrayList<Subnet>();
		list_sn = convertTextToListSubnet(sv);
		List<HostFixIP> list_host = new ArrayList<HostFixIP>();
		list_host = convertTextToListHost(sv);

		String config = "";
		String config2 = "";
		String config3 = "";

		for (Subnet sn : list_sn) {
			if (sn.getSubnet().equals(subnet)) {
				continue;
			}
			if (sn.getSubnet() != null && !sn.getSubnet().equals("")) {
				config = config + "subnet " + sn.getSubnet().trim();

			}
			if (sn.getNetmask() != null && !sn.getNetmask().equals("")) {

				config = config + " netmask " + sn.getNetmask().trim() + "\n";
			}

			config = config + "{" + "\n";
			if (sn.getRange() != null && !sn.getRange().equals("")) {

				config = config + "range " + "" + sn.getRange().trim() + ";"
						+ "\n";
			}
			if (sn.getRouter_gateway() != null
					&& !sn.getRouter_gateway().equals("")) {

				config = config + "option routers " + ""
						+ sn.getRouter_gateway().trim() + ";" + "\n";
			}
			if (sn.getDomain_name_server() != null
					&& !sn.getDomain_name_server().equals("")) {

				config = config + "option domain-name-servers " + ""
						+ sn.getDomain_name_server().trim() + ";" + "\n";
			}
			if (sn.getDomain_name() != null && !sn.getDomain_name().equals("")) {

				config = config + "option domain-name " + "\\\"\""
						+ sn.getDomain_name().trim() + "\\\"\"" + ";" + "\n";
			}
			if (sn.getBroadcast_address() != null
					&& !sn.getBroadcast_address().equals("")) {

				config = config + "option broadcast-address " + ""
						+ sn.getBroadcast_address().trim() + ";" + "\n";
			}
			if (sn.getDefault_lease_time() != null
					&& !sn.getDefault_lease_time().equals("")) {

				config = config + "default-lease-time " + ""
						+ sn.getDefault_lease_time().trim() + ";" + "\n";
			}
			if (sn.getMax_lease_time() != null
					&& !sn.getMax_lease_time().equals("")) {

				config = config + "max-lease-time " + ""
						+ sn.getMax_lease_time().trim() + ";" + "\n";
			}
			config = config + "}" + "\n";

		}

		for (HostFixIP host : list_host) {
			if (host.getHostname().equals(hostFixed)) {
				continue;
			}
			if (host.getHostname() != null && !host.getHostname().equals("")) {
				config2 = config2 + "host " + host.getHostname() + "\n";
			}
			config2 = config2 + "{" + "\n";
			if (host.getHardware_internet() != null
					&& !host.getHardware_internet().equals("")) {
				config2 = config2 + "hardware ethernet " + ""
						+ host.getHardware_internet() + ";" + "\n";
			}

			if (host.getFilename() != null && !host.getFilename().equals("")) {
				config2 = config2 + "filename " + "\\\"\"" + host.getFilename()
						+ "\\\"\"" + ";" + "\n";
			}

			if (host.getServername() != null
					&& !host.getServername().equals("")) {
				config2 = config2 + "server-name " + "\\\"\""
						+ host.getServername() + "\\\"\"" + ";" + "\n";
			}

			if (host.getFixed_address() != null
					&& !host.getFixed_address().equals("")) {
				config2 = config2 + "fixed-address " + ""
						+ host.getFixed_address() + ";" + "\n";
			}
			config2 = config2 + "}" + "\n";

		}
		ConfigChung cfg = convertTextToConfigChung(sv);
		if (cfg.getDns_update_style() != null
				&& !cfg.getDns_update_style().equals("")) {
			if (cfg.getDns_update_style() == true) {
				config3 = config3 + "ddns-update-style " + "" + "none" + ";"
						+ "\n";
			}
		}

		if (cfg.getAuthorative() != null && !cfg.getAuthorative().equals("")) {
			if (cfg.getAuthorative() == true) {
				config3 = config3 + "authoritative" + "" + ";" + "" + "\n";
			}
		}

		if (cfg.getLog_facitily() != null && !cfg.getLog_facitily().equals("")) {
			config3 = config3 + "log-facility " + "" + cfg.getLog_facitily()
					+ ";" + "\n";
		}
		if (cfg.getDomain_name() != null && !cfg.getDomain_name().equals("")) {
			config3 = config3 + "option domain-name " + "\\\"\""
					+ cfg.getDomain_name() + "\\\"\"" + ";" + "\n";
		}

		if (cfg.getDomain_name_servers() != null
				&& !cfg.getDomain_name_servers().equals("")) {
			config3 = config3 + "option domain-name-servers " + ""
					+ cfg.getDomain_name_servers() + ";" + "\n";
		}

		if (cfg.getDefault_lease_time() != null
				&& !cfg.getDefault_lease_time().equals("")) {

			config3 = config3 + "default-lease-time " + ""
					+ cfg.getDefault_lease_time().trim() + ";" + "\n";
		}
		if (cfg.getMax_lease_time() != null
				&& !cfg.getMax_lease_time().equals("")) {

			config3 = config3 + "max-lease-time " + ""
					+ cfg.getMax_lease_time().trim() + ";" + "\n";
		}

		String tong = "echo " + sv.getServerPassword()
				+ " | sudo -S bash -c ' echo -e " + "\"" + config3 + "\n"
				+ config + "\n" + config2 + "\n" + "\""
				+ "   > /etc/dhcp/dhcpd.conf '";

		System.out.println(".....Uploading to server.....");
		Boolean boo = sendCommandToServer(sv, tong);
		if (boo == true) {
			System.out.println("Deleted ...OK");
		} else {
			System.out.println("Delete Failed!!!");

		}
		return boo;
	}

	// Ham in ra subnet return String
	public String inSubnet(Server sv) throws IOException {
		List<Subnet> list_sn = new ArrayList<Subnet>();
		list_sn = convertTextToListSubnet(sv);

		String inSubnet = "";

		for (Subnet sn : list_sn) {
			inSubnet = inSubnet + "subnet " + sn.getSubnet() + " netmask "
					+ sn.getNetmask() + "\n{\n" + "range " + sn.getRange()
					+ "\n" + "option routers " + sn.getRouter_gateway() + "\n"
					+ "option domain-name-servers "
					+ sn.getDomain_name_server() + "\n" + "option domain-name "
					+ sn.getDomain_name() + "\n" + "option broadcast-address "
					+ sn.getBroadcast_address() + "\n" + "default-lease-time "
					+ sn.getDefault_lease_time() + "\n" + "max-lease-time "
					+ sn.getMax_lease_time() + "\n}" + "\n";

		}
		return removeNullCharater(inSubnet);

	}

	// Remove null character phuc vu cho ham in Subnet neu ko dung if-else
	public String removeNullCharater(String lay) throws IOException {

		String chuoilay = "";
		String line = "";
		StringReader str = new StringReader(lay);
		BufferedReader br = new BufferedReader(str);
		while ((line = br.readLine()) != null) {
			if (line.indexOf("null") != -1) {
				continue;
			}
			chuoilay = chuoilay + line + "\n";

		}
		return chuoilay;
	}

	public List<HostFixIP> convertTextToListHost(Server sv) throws IOException {

		HashMap<String, String> hm1 = new HashMap<String, String>();
		List<HostFixIP> host_multi = new ArrayList<HostFixIP>();
		// Chuoi da dc chuan hoa san
		String chuoi = loadConfigToPlainText(sv);

		// System.out.println("In ra Chuoi da chuan hoa: \n" + chuoi);
		StringReader str = new StringReader(chuoi);
		BufferedReader br = new BufferedReader(str);
		String line = "";
		try {
			while ((line = br.readLine()) != null) {
				if (line.indexOf("host") != -1
						|| line.indexOf("filename") != -1
						|| line.indexOf("server-name") != -1
						|| line.indexOf("fixed-address") != -1

				) {
					hm1.put(line.substring(0, line.indexOf(" ")).trim(), line
							.substring(line.indexOf(" ") + 1).replace(";", "")
							.trim());
				}

				if (line.indexOf("hardware ethernet") != -1) {

					hm1.put(line.substring(0, line.lastIndexOf(" ")).trim(),
							line.substring(line.lastIndexOf(" ") + 1)
									.replace(";", "").trim());

				}

				if (line.indexOf("}") != -1) {
					HostFixIP host = new HostFixIP(hm1.get("host"),
							hm1.get("hardware ethernet"), hm1.get("filename"),
							hm1.get("server-name"), hm1.get("fixed-address"));

					// -------
					if (host.getHostname() != null
							&& !host.getHostname().equals("")) {
						host_multi.add(host);
					}

					hm1.put("host", null);
					hm1.put("hardware ethernet", null);
					hm1.put("filename", null);
					hm1.put("server-name", null);
					hm1.put("fixed-address", null);

				}

			}
			str.close();
			return host_multi;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	// --------in host
	public void inHost(Server sv) throws IOException {
		List<HostFixIP> multihost = convertTextToListHost(sv);
		for (HostFixIP h : multihost) {
			System.out.println("---------Create Host----------");
			if (h.getHostname() != null && !h.getHostname().equals("")) {
				System.out.println("host " + h.getHostname());
			}
			System.out.println("{");

			if (h.getHardware_internet() != null
					&& !h.getHardware_internet().equals("")) {

				System.out.println("hardware ethernet "
						+ h.getHardware_internet());
			}
			if (h.getFilename() != null && !h.getFilename().equals("")) {

				System.out.println("filename " + h.getFilename());
			}
			if (h.getServername() != null && !h.getServername().equals("")) {

				System.out.println("server-name " + h.getServername());
			}
			if (h.getFixed_address() != null
					&& !h.getFixed_address().equals("")) {

				System.out.println("fixed-address " + h.getFixed_address());

			}
			System.out.println("}");

			System.out.println("---------------------");

		}
	}

	// Them vao 1 config
	public String inConfigChung(Server sv) throws IOException {
		ConfigChung config_c = convertTextToConfigChung(sv);

		String kq = "";
		kq = kq + "ddns-update-style " + config_c.getDns_update_style() + "\n"
				+ "authoritative" + config_c.getAuthorative() + "\n"
				+ "log-facility " + config_c.getLog_facitily() + "\n"
				+ "domain-name " + config_c.getDomain_name() + "\n"
				+ "domain-name-servers " + config_c.getDomain_name_servers()
				+ "\n" + "default-lease-time "
				+ config_c.getDefault_lease_time() + "\n" + "max-lease-time "
				+ config_c.getMax_lease_time() + "\n";
		return removeNullCharater(kq);
	}

	// Them vao 1 subnet
	public Boolean createSubnet(Server sv, Subnet sn) {

		String config = "";
		if (sn.getSubnet() != null && !sn.getSubnet().equals("")) {
			config = config + "subnet " + sn.getSubnet().trim();

		}
		if (sn.getNetmask() != null && !sn.getNetmask().equals("")) {

			config = config + " netmask " + sn.getNetmask().trim() + "\n";
		}

		config = config + "{" + "\n";
		if (sn.getRange() != null && !sn.getRange().equals("")) {

			config = config + "range " + "" + sn.getRange().trim() + ";" + ""
					+ "\n";
		}
		if (sn.getRouter_gateway() != null
				&& !sn.getRouter_gateway().equals("")) {

			config = config + "option routers " + ""
					+ sn.getRouter_gateway().trim() + ";" + "" + "\n";
		}
		if (sn.getDomain_name_server() != null
				&& !sn.getDomain_name_server().equals("")) {

			config = config + "option domain-name-servers " + ""
					+ sn.getDomain_name_server().trim() + ";" + "" + "\n";
		}
		if (sn.getDomain_name() != null && !sn.getDomain_name().equals("")) {

			config = config + "option domain-name " + "" + "\\\"\""
					+ sn.getDomain_name().trim() + "\\\"\"" + ";" + "" + "\n";
		}
		if (sn.getBroadcast_address() != null
				&& !sn.getBroadcast_address().equals("")) {

			config = config + "option broadcast-address " + ""
					+ sn.getBroadcast_address().trim() + ";" + "" + "\n";
		}
		if (sn.getDefault_lease_time() != null
				&& !sn.getDefault_lease_time().equals("")) {

			config = config + "default-lease-time " + ""
					+ sn.getDefault_lease_time().trim() + ";" + "" + "\n";
		}
		if (sn.getMax_lease_time() != null
				&& !sn.getMax_lease_time().equals("")) {

			config = config + "max-lease-time " + ""
					+ sn.getMax_lease_time().trim() + ";" + "" + "\n";
		}
		config = config + "}" + "\n";
		String tong = "echo " + sv.getServerPassword()
				+ " | sudo -S bash -c ' echo -e " + "\"" + config + "\n" + "\""
				+ "   >> /etc/dhcp/dhcpd.conf '";

		Boolean boo = sendCommandToServer(sv, tong);
		if (boo == true) {
			System.out.println("Created SUBNET ...OK");
		} else {
			System.out.println("Create SUBNET Failed!!!");

		}
		return boo;
	}

	// Add Host fixed IP
	public Boolean createHost(Server sv, HostFixIP host) {
		String config2 = "";
		if (host.getHostname() != null && !host.getHostname().equals("")) {
			config2 = config2 + "host " + host.getHostname() + "\n";
		}
		config2 = config2 + "{" + "\n";
		if (host.getHardware_internet() != null
				&& !host.getHardware_internet().equals("")) {
			config2 = config2 + "hardware ethernet " + ""
					+ host.getHardware_internet() + ";" + "" + "\n";
		}
		// Luu y nhung ky tu dac biet se dan den viec ko chay ham, in ko ra,
		// hoac in loi
		if (host.getFilename() != null && !host.getFilename().equals("")) {
			config2 = config2 + "filename " + "\\\"\"" + host.getFilename()
					+ "\\\"\"" + ";" + "" + "\n";
		}

		if (host.getServername() != null && !host.getServername().equals("")) {
			config2 = config2 + "server-name " + "\\\"\""
					+ host.getServername() + "\\\"\"" + ";" + "" + "\n";
		}

		if (host.getFixed_address() != null
				&& !host.getFixed_address().equals("")) {
			config2 = config2 + "fixed-address " + "" + host.getFixed_address()
					+ ";" + "" + "\n";
		}
		config2 = config2 + "}" + "\n";
		String tong = "echo " + sv.getServerPassword()
				+ " | sudo -S bash -c ' echo -e " + "\"" + config2 + "\n"
				+ "\"" + "   >> /etc/dhcp/dhcpd.conf '";

		Boolean boo = sendCommandToServer(sv, tong);
		if (boo == true) {
			System.out.println("Created HOST ...OK");
		} else {
			System.out.println("Create HOST Failed!!!");

		}
		return boo;

	}

	// convert sesssion to xml
	public String convertDHCPLogToXML(Server sv) throws IOException {
		String xmlText = "";

		String filterSession = getLog(sv).replace("}", "}\n").replaceAll("  ",
				"");

		String regexLease = "lease [\\d+.]+ \\{\n(.+\n)+";
		Pattern ptLease = Pattern.compile(regexLease);
		Matcher matchLease = ptLease.matcher(filterSession);
		while (matchLease.find()) {
			xmlText = xmlText + "\n" + "<eventdhcp>\n";

			StringReader strRead = new StringReader(matchLease.group());
			BufferedReader br = new BufferedReader(strRead);
			String line = "";
			while ((line = br.readLine()) != null) {
				if (line.indexOf("lease") != -1) {
					xmlText = xmlText
							+ "<lease>"
							+ line.substring(line.indexOf(" "),
									line.indexOf("{")).trim() + "</lease>"
							+ "\n";
				}
				if (line.indexOf("starts") != -1) {
					xmlText = xmlText
							+ "<start>"
							+ line.substring(line.indexOf(" ", 7),
									line.indexOf(";")).trim() + "</start>"
							+ "\n";
				}

				if (line.indexOf("ends") != -1) {
					xmlText = xmlText
							+ "<end>"
							+ line.substring(line.indexOf(" ", 5),
									line.indexOf(";")).trim() + "</end>" + "\n";
				}

				if (line.indexOf("hardware ethernet") != -1) {
					xmlText = xmlText
							+ "<hardware_ethernet>"
							+ line.substring(line.lastIndexOf(" "),
									line.indexOf(";")).trim()
							+ "</hardware_ethernet>" + "\n";
				}

			}
			strRead.close();

			xmlText = xmlText + "</eventdhcp>\n";

		}

		return "<logchartdhcp>\n" + xmlText + "\n</logchartdhcp>";
	}

	// convert XML to Object XML
	public LogChartDHCP convertXMLToObjectDHCPLogChart(Server sv)
			throws IOException {
		StringReader strRead = new StringReader(convertDHCPLogToXML(sv));

		try {
			// Khoi tao Context
			JAXBContext context = JAXBContext.newInstance(LogChartDHCP.class);
			// Tao Unmarshaller tu Context
			Unmarshaller un = context.createUnmarshaller();
			// File xml phu thuoc vao doi tuong + duong duong path
			LogChartDHCP logDHCP = (LogChartDHCP) un.unmarshal(strRead);
			System.out
					.println(" ---IPLease---|-----Start-----------|---End---------------|----MAC------------|");
			for (EventDHCP event : logDHCP.getEventdhcp()) {
				System.out.println(event.getLease() + " | " + event.getStart()
						+ " | " + event.getEnd() + " | "
						+ event.getHardware_ethernet());

			}
			return logDHCP;

		} catch (JAXBException e) {
			System.out.println(e);
		} catch (NullPointerException nu) {
		}
		return null;
	}

	public static void main(String[] args) throws IOException {
		DHCPConfig dhcp_c = new DHCPConfig();
		Server sv = new Server("192.168.0.104", 22, "mayb", "mayb", "mayb");
		// Subnet sn = new Subnet("192.168.1.0", "255.255.255.0",
		// "192.168.1.100 192.168.1.140", "8.8.8.8",
		// "www.thienkim6.com", "192.168.1.1", null, "2600", "7200");
		// System.out.println(dhcp_c.Start(sv));
		// System.out.println(dhcp_c.Remove(sv));
		// System.out.println(dhcp_c.Install(sv));
		// System.out.println(dhcp_c.getLog(sv));
		// System.out.println(dhcp_c.checkInstall(sv));
		// dhcp_c.createSubnet(sv, sn);
		// HostFixIP host = new HostFixIP("hieu1", "5C:0A:5B:22:D2:92",
		// "hieu.txt", "ns1.mayb.com", "192.168.0.109");
		// dhcp_c.createHost(sv, host);
		// System.out.println(dhcp_c.loadConfigToPlainText(sv));
		// Xoa phan tu subnet co get subnet == null trong list
		// System.out.println(dhcp_c.inSubnet(sv));
		// dhcp_c.inHost(sv);
		// ---Upload---
		// dhcp_c.uploadConfigToDHCPServer(sv,
		// dhcp_c.convertTextToListSubnet(sv),
		// dhcp_c.convertTextToListHost(sv),
		// dhcp_c.convertTextToConfigChung(sv));

		// -----------
		// dhcp_c.uploadStringConfigToDHCPServer(sv, " \" hieuminh \" ");
		// System.out.println(dhcp_c.inConfigChung(sv));
		// System.out.println(dhcp_c.convertTextToConfigChung(sv));
		// dhcp_c.addSubnet(sv, sn);
		// dhcp_c.addHost(sv, host);
		// dhcp_c.XoaSubnetorHost(sv, null, "fantasia");
		// System.out.println(dhcp_c.loadConfigChungToPlainText(sv));
		// System.out.println(dhcp_c.inConfigChung(sv));
		// System.out.println(dhcp_c.loadConfigToPlainText(sv));
		// System.out.println(dhcp_c.checkRunning(sv));
		// List<Subnet> list_sn = dhcp_c.convertTextToListSubnet(sv);
		// System.out.println(list_sn.size());

		// for (Subnet sn : list_sn) {
		// if (sn.getSubnet() == null) {
		// System.out.println("true");
		// } else {
		// System.out.println("false");
		//
		// }
		// }
		// System.out.println(dhcp_c.convertDHCPLogToXML(sv));
		/**
		 * Kich ban tao doi tuong logChart
		 */
		// dhcp_c.convertXMLToObjectDHCPLogChart(sv);
		// System.out.println(dhcp_c.checkInstall(sv));
		System.out.println(dhcp_c.Install(sv));
	}
}
