package vn.edu.cit.controller;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import model.ftp.FtpConfig;
import model.ssh.SSH;
import model.ssh.SSHConfig;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import vn.edu.cit.dao.ServerDAO;
import vn.edu.cit.dao.UserDAO;
import vn.edu.cit.model.Server;
import vn.edu.cit.model.User;

@Controller
public class SSHController {
	@Autowired
	private UserDAO userDAO;
	@Autowired
	private ServerDAO serverDAO;

	/**
	 * sshConfig, chuyen sang config page
	 * 
	 * @param request
	 * @param session
	 * @param ip
	 * @param c
	 * @param mm
	 * @param redirectAtt
	 * @return
	 */
	@RequestMapping(value = "/serviceconfig/ssh/{ip}/{cc}", method = RequestMethod.GET)
	public String sshConfig(HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, ModelMap mm, RedirectAttributes redirectAtt) {
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		// Kiem tra user va token
		if (user != null && cc.equals(c)) {
			// Lay thong tin server cua user
			Server server = serverDAO.getServer(user, ip);
			// Kiem tra thong tin Server
			if (server != null) {
				// Set sudo user cho server
				Server sv = new Server(server);
				sv.setServerUsername((String) session.getAttribute("sudouser"));
				sv.setServerPassword((String) session.getAttribute("sudopass"));
				SSHConfig sshconfig = new SSHConfig();
				_log.info("Lay thong tin SSH config");
				_log.info("Doi user:" + sv.getServerUsername());
				SSH ssh = sshconfig.convertTextToObjectSSH(sv);
				mm.put("SSH", ssh);

				mm.put("server", server);
				return "ssh-config";
			} else {
				_log.info("Khong co server de hien thi");
				redirectAtt.addFlashAttribute("display", "block");
				redirectAtt.addFlashAttribute("message", "Vui lòng thêm Server để quản lý!");
				return "redirect:/";
			}
		} else {
			// neu chua login
			return "redirect:/login";
		}
	}

	@RequestMapping(value = "/serviceconfig/ssh/save/{ip}/{cc}", method = RequestMethod.POST)
	public String sshSaveConfig(HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, ModelMap mm, @ModelAttribute(value = "SSH") SSH ssh,
			RedirectAttributes redirectAtt) throws IOException {
		// Lay thong tin user và token tren session
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		// lay thong tin server cua user
		Server server = serverDAO.getServer(user, ip);
		// doi thong tin server sang sudoer user
		Server sv = new Server(server);
		sv.setServerUsername((String) session.getAttribute("sudouser"));
		sv.setServerPassword((String) session.getAttribute("sudopass"));
		_log.info("Set new Sudoer password");
		// kiem tra thong tin user dang nhap
		if (user != null && cc.equals(c)) {
			SSHConfig sshconfig = new SSHConfig();
			// kiem tra dich vu ftp
			sshconfig.uploadConfigToServer(sv, ssh);
			mm.put("server", server);

			_log.info("Upload SSH Config to server ");
			redirectAtt.addFlashAttribute("displaysuccess", "block");
			redirectAtt.addFlashAttribute("message", "Cập nhật thành công! (Update Success!)");
			// chuyen ve trang
			return "redirect:/serviceconfig/ssh/" + ip + "/" + c;
			
		} else {
			return "redirect:/login";
		}
	}

	/**
	 * Sua file config SSH
	 * 
	 * @param request
	 * @param session
	 * @param ip
	 * @param c
	 * @param mm
	 * @param redirectAtt
	 * @return
	 */
	@RequestMapping(value = "/serviceconfig/ssh/editfile/{ip}/{cc}", method = RequestMethod.GET)
	public String sshGetConfFile(HttpServletRequest request, HttpSession session,
			@PathVariable(value = "ip") String ip, @PathVariable(value = "cc") String c, ModelMap mm,
			RedirectAttributes redirectAtt) {
		// Lay thong tin user và token tren session
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		// lay thong tin server cua user
		// kiem tra thong tin user dang nhap
		if (user != null && cc.equals(c)) {
			for (Server server : user.getServers()) {
				if (server.getServerAddress().equals(ip)) {
					Server sv = new Server(server);
					sv.setServerUsername((String) session.getAttribute("sudouser"));
					sv.setServerPassword((String) session.getAttribute("sudopass"));
					SSHConfig sshConf = new SSHConfig();
					// kiem tra dich vu ftp
					if (sv != null) {
						String str;
						try {
							str = sshConf.loadConfigToPlainText(sv);
							mm.put("sshconfig", str);
							return "ssh-file-content";
						} catch (IOException e) {
							_log.info("Can not load SSH Config");
							redirectAtt.addFlashAttribute("display", "block");
							redirectAtt.addFlashAttribute("message", "Can not load SSH Config!");
							return "ssh-config";
						}
					}
				}

			}
		} else {
			return "redirect:/login";
		}
		return "redirect:/";
	}

	/**
	 * Luu file SSH config
	 * 
	 * @param request
	 * @param session
	 * @param ip
	 * @param c
	 * @param mm
	 * @param ftp
	 * @param redirectAtt
	 * @return
	 */
	@RequestMapping(value = "/serviceconfig/ssh/editfile/{ip}/{cc}", method = RequestMethod.POST)
	public String sshSaveConfFile(HttpServletRequest request, HttpSession session,
			@PathVariable(value = "ip") String ip, @PathVariable(value = "cc") String c, ModelMap mm,
			RedirectAttributes redirectAtt) throws IOException {
		// Lay thong tin user và token tren session
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		// lay thong tin server cua user
		String configText = request.getParameter("sshconfig");
		// System.out.println(configText);
		// kiem tra thong tin user dang nhap
		if (user != null && cc.equals(c)) {
			for (Server server : user.getServers()) {
				if (server.getServerAddress().equals(ip)) {
					Server sv = new Server(server);
					sv.setServerUsername((String) session.getAttribute("sudouser"));
					sv.setServerPassword((String) session.getAttribute("sudopass"));
					SSHConfig sshConf = new SSHConfig();
					sshConf.uploadStringToServer(sv, configText);
					_log.info("Upload SSH Config to server");
					redirectAtt.addFlashAttribute("displaysuccess", "block");
					redirectAtt.addFlashAttribute("message", "Upload file Success!");
					// restart service
					sshConf.Restart(sv);
					return "redirect:/serviceconfig/ssh/" + ip + "/" + cc;
				}

			}
		} else {
			return "redirect:/login";
		}
		return "redirect:/";
	}

	/**
	 * Sang Trang Lay thong tin logfile
	 * 
	 * @param request
	 * @param session
	 * @param ip
	 * @param c
	 * @param mm
	 * @param redirectAtt
	 * @return
	 */
	@RequestMapping(value = "/serviceconfig/ssh/getlog/{ip}/{cc}", method = RequestMethod.GET)
	public String sshGetLogs(HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, ModelMap mm, RedirectAttributes redirectAtt) {
		// Lay thong tin user và token tren session
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		// lay thong tin server cua user
		// kiem tra thong tin user dang nhap
		if (user != null && cc.equals(c)) {
			return "ssh-logs";
		} else {
			return "redirect:/login";
		}
	}

	/**
	 * Lay log
	 * 
	 * @param request
	 * @param session
	 * @param ip
	 * @param c
	 * @param redirectAtt
	 * @return
	 */
	@RequestMapping(value = "/serviceconfig/ssh/getlogs/{ip}/{cc}", method = RequestMethod.GET)
	@ResponseBody
	public String getSSHLogs(HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, RedirectAttributes redirectAtt) {
		String cc = (String) session.getAttribute("cc");
		User user = (User) session.getAttribute("user");
		if (user != null && c.equals(cc)) { // check user login
			Server server = serverDAO.getServer(user, ip);
			Server sv = new Server(server); // khoi tao server
			sv.setServerUsername((String) session.getAttribute("sudouser"));
			sv.setServerPassword((String) session.getAttribute("sudopass"));
			SSHConfig sshConf = new SSHConfig();
			String logs = sshConf.getLog(sv);
			if (logs != null) {
				return logs;
			} else {
				return "Khong lay duoc thong tin";
			}
		} else {
			return "Khong lay duoc thong tin";
		} // end check user
	}

	/**
	 * Lay ERR
	 * 
	 * @param request
	 * @param session
	 * @param ip
	 * @param c
	 * @param redirectAtt
	 * @return
	 */
	@RequestMapping(value = "/serviceconfig/ssh/geterrors/{ip}/{cc}", method = RequestMethod.GET)
	@ResponseBody
	public String getSSHErrors(HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, RedirectAttributes redirectAtt) {
		String cc = (String) session.getAttribute("cc");
		User user = (User) session.getAttribute("user");
		if (user != null && c.equals(cc)) { // check user login
			Server server = serverDAO.getServer(user, ip);
			Server sv = new Server(server); // khoi tao server
			sv.setServerUsername((String) session.getAttribute("sudouser"));
			sv.setServerPassword((String) session.getAttribute("sudopass"));
			SSHConfig sshConf = new SSHConfig();
			String errors;
			try {
				errors = sshConf.getError(sv);
				return errors;
			} catch (InterruptedException e) {
				return "Khong lay duoc thong tin";
			}

		} else {
			return "Khong lay duoc thong tin";
		} // end check user
	}

	private static final Logger _log = Logger.getLogger(SSHController.class);
}
