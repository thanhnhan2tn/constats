package vn.edu.cit.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import model.server.ServerConfig;
import model.server.ServerStatus;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import vn.edu.cit.dao.ServerDAO;
import vn.edu.cit.dao.UserDAO;
import vn.edu.cit.model.Server;
import vn.edu.cit.model.User;
import vn.edu.cit.services.MongoDBService;
import vn.edu.cit.services.UserService;

@Controller
public class MonitorController {
	@Autowired
	public ApplicationContext ctx; //
	public UserService userService = new UserService();
	public MongoOperations mongo = MongoDBService.getMongoService();
	@Autowired
	private UserDAO userDAO;
	@Autowired
	private ServerDAO serverDAO;

	@RequestMapping(value = "/monitor/{action}/{ip}/{cc}", method = RequestMethod.GET)
	public String monitorAction(HttpServletRequest request, HttpSession session,
			@PathVariable(value = "action") String action, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, ModelMap mm) {
		String cc = (String) session.getAttribute("cc");
		User user = (User) session.getAttribute("user");

		// Server sv = new Server();
		if (user != null && c.equals(cc)) {
			for (Server server : user.getServers()) {
				if (server.getServerAddress().equals(ip)) {
					ServerConfig sf = new ServerConfig();
					if (action.equals("start")) {
						sf.startMonitor(server, 5);
					} else {
						try {
							sf.stopMonitor(server);
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
						}
					}
				}
			}
		} else {
			session.invalidate();
		}
		return "/monitor/" + ip + "/" + cc;
	}

	@RequestMapping(value = "/monitor/{ip}/{cc}", method = RequestMethod.GET)
	public String monitor(HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, ModelMap mm) {
		String cc = (String) session.getAttribute("cc");
		User user = (User) session.getAttribute("user");
		if (user != null && cc.equals(c)) {
			mm.put("ip", ip);
			return "monitor";
		} else {
			return "redirect:/login";
		}
	}

	/**
	 * Lay thong tin Server day du
	 * 
	 * @param ip
	 * @param c
	 * @param request
	 * @param session
	 * @param redirectAtt
	 * @return
	 */

	@RequestMapping(value = "/getserverinfo/{ip}/{cc}", method = RequestMethod.GET)
	@ResponseBody
	public ServerStatus getServerInfo(@PathVariable(value = "ip") String ip, @PathVariable(value = "cc") String c,
			HttpServletRequest request, HttpSession session, RedirectAttributes redirectAtt) {
		// Lay thong tin username trong session;
		// Lay thong tin token
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		// Chuoi return mac dinh
		ServerStatus status = null;
		if (user != null && cc.equals(c)) {
			List<Server> listServer = user.getServers();
			if (!listServer.isEmpty()) {
				for (int i = 0; i < listServer.size(); i++) {
					Server s = listServer.get(i); // get server in list
					if (s.getServerAddress().equals(ip)) { // check Ip
						ServerConfig sf = new ServerConfig();
						try {
							status = sf.getServerStatus(s);
						} catch (InterruptedException e) {
							status = null;
						}
					}
				}
			} // end check ListServer

		}// end if User
		return status;
	}

	/**
	 * Lay thong tin RAM
	 */
	@RequestMapping(value = "/getram/{ip}/{cc}", method = RequestMethod.GET)
	@ResponseBody
	public String[] getRAMInfo(@PathVariable(value = "ip") String ip, @PathVariable(value = "cc") String c,
			HttpServletRequest request, HttpSession session, RedirectAttributes redirectAtt) {
		// Lay thong tin username trong session;
		// Lay thong tin token
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		// Chuoi return mac dinh
		String[] ram = new String[3];
		if (user != null && cc.equals(c)) {
			//lay thong tin server
			Server server = serverDAO.getServer(user, ip);
			ServerConfig config = new ServerConfig();
			ram[0] = config.getMemUsage(server);
			ram[1] = config.getMemFree(server);
			ram[2] = config.getMemTotal(server);
		}// end if User
		return ram;
	}

	/**
	 * Check Server Status, tra ve true false
	 * 
	 * @return
	 */
	@RequestMapping(value = "/checkstatus/{ip}/{cc}", method = RequestMethod.GET)
	@ResponseBody
	public String checkStatus(HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c) {
		String cc = (String) session.getAttribute("cc");
		User user = (User) session.getAttribute("user");
		String check = "false";
		if (user != null) {
			for (Server server : user.getServers()) {
				_log.info("Check status: Get server: " + server.getServerUsername() + "/" + server.getServerAddress());
				if (server.getServerAddress().equals(ip)) {
					server.setServerUsername("svcontrol"); // a user vs SSH
					if (server.checkStatus()) {
						_log.info("Check status:" + server.getServerUsername() + "/" + server.getServerPassword());
						check = "true";
					}
				}
			}
		} else {
			return "Khong the load duoc status";
		}
		return check;
	}

	private static final Logger _log = Logger.getLogger(MonitorController.class);
}
