package vn.edu.cit.controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import model.dhcp.ConfigChung;
import model.dhcp.DHCP;
import model.dhcp.DHCPConfig;
import model.dhcp.Subnet;
import model.dhcp.HostFixIP;
import model.nic.Nic;
import model.nic.NicConfig;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import vn.edu.cit.dao.ServerDAO;
import vn.edu.cit.dao.UserDAO;
import vn.edu.cit.model.Server;
import vn.edu.cit.model.User;

@Controller
public class DHCPController {
	@Autowired
	private UserDAO userDAO;
	@Autowired
	private ServerDAO serverDAO;

	/**
	 * Install New DHCP Service
	 * 
	 */
	@RequestMapping(value = "/serviceconfig/dhcpinstall/{ip}/{cc}", method = RequestMethod.GET)
	public String dhcpSetup(HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, ModelMap mm, RedirectAttributes redirectAtt) {
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		if (user != null && cc.equals(c)) {
			for (Server server : user.getServers()) {
				if (server.getServerAddress().equals(ip)) {
					DHCPConfig dhcpconfig = new DHCPConfig();
					if (dhcpconfig.Install(server)) { // return true
						_log.info("Install DHCP service ");
						redirectAtt.addFlashAttribute("displaysuccess", "block");
						redirectAtt.addFlashAttribute("message", "(Install DHCP Success!)");
					} else {
						_log.info("Install DHCP service Failed");
						redirectAtt.addFlashAttribute("display", "block");
						redirectAtt.addFlashAttribute("message", "(Install DHCP failed!)");
					}

				}
			}
			return "redirect:/services/" + ip + "/" + c;
		} else {
			return "redirect:/login";
		}
	}

	/**
	 * Transfer to DHCP Controller screen page
	 */

	@RequestMapping(value = "/serviceconfig/dhcp/{ip}/{cc}", method = RequestMethod.GET)
	public String ftpSetup(HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, ModelMap mm, RedirectAttributes redirectAtt) {
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		if (user != null && cc.equals(c)) {
			Server server = serverDAO.getServer(user, ip);
			Server sv = new Server(server);
			sv.setServerUsername((String) session.getAttribute("sudouser"));
			sv.setServerPassword((String) session.getAttribute("sudopass"));
			_log.info(sv.getServerAddress() + sv.getServerPassword());
			DHCPConfig dhcp = new DHCPConfig();
			
			if (dhcp.checkInstall(sv) == true) {
				// Neu server da cai dat FTP
				try {
					DHCP d = dhcp.convertConfigToObjectDHCP(sv);
					mm.put("dhcp", d);
					mm.put("configchung", d.getConfigchung());
					session.setAttribute("dhcp", d);
				} catch (IOException e) {
					_log.info("Fail load Config from server ");
					redirectAtt.addFlashAttribute("display", "block");
					redirectAtt.addFlashAttribute("message", "Khong the lay thong tin tu server!");
				}
			} else {
				redirectAtt.addFlashAttribute("display", "block");
				redirectAtt.addFlashAttribute("message", "Chua cai dat dich vu ISC-DHCP-SERVER!");
			}
			mm.put("server", server);
			return "dhcp-config";
		} else {
			return "redirect:/login";
		}
	}
	
	/**
	 * Cau hinh Subnet cua DHCP
	 */
	@RequestMapping(value = "/serviceconfig/dhcp/subnets/{ip}/{cc}", method = RequestMethod.GET)
	public String ftpSetupSubnets(HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, ModelMap mm, RedirectAttributes redirectAtt) {
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		if (user != null && cc.equals(c)) {
			Server server = serverDAO.getServer(user, ip);
			Server sv = new Server(server);
			sv.setServerUsername((String) session.getAttribute("sudouser"));
			sv.setServerPassword((String) session.getAttribute("sudopass"));
			_log.info(sv.getServerAddress() + sv.getServerPassword());
			DHCPConfig dhcp = new DHCPConfig();
			
			if (dhcp.checkInstall(sv) == true) {
				// Neu server da cai dat FTP
				try {
					DHCP d = dhcp.convertConfigToObjectDHCP(sv);
					mm.put("dhcp", d);
					mm.put("subnets", d.getSubnets());
					session.setAttribute("dhcp", d);
				} catch (IOException e) {
					_log.info("Fail load Config from server ");
					redirectAtt.addFlashAttribute("display", "block");
					redirectAtt.addFlashAttribute("message", "Khong the lay thong tin tu server!");
				}
			} else {
				redirectAtt.addFlashAttribute("display", "block");
				redirectAtt.addFlashAttribute("message", "Chua cai dat dich vu ISC-DHCP-SERVER!");
			}
			mm.put("server", server);
			return "dhcp-subnets-config";
		} else {
			return "redirect:/login";
		}
	}
	
	/**
	 * Cau hinh Subnet cua DHCP
	 */
	@RequestMapping(value = "/serviceconfig/dhcp/hostfixs/{ip}/{cc}", method = RequestMethod.GET)
	public String ftpSetupHostfixs(HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, ModelMap mm, RedirectAttributes redirectAtt) {
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		if (user != null && cc.equals(c)) {
			Server server = serverDAO.getServer(user, ip);
			Server sv = new Server(server);
			sv.setServerUsername((String) session.getAttribute("sudouser"));
			sv.setServerPassword((String) session.getAttribute("sudopass"));
			_log.info(sv.getServerAddress() + sv.getServerPassword());
			DHCPConfig dhcp = new DHCPConfig();
			
			if (dhcp.checkInstall(sv) == true) {
				// Neu server da cai dat FTP
				try {
					DHCP d = dhcp.convertConfigToObjectDHCP(sv);
					mm.put("dhcp", d);
					mm.put("hostfixs", d.getHosts());
					session.setAttribute("dhcp", d);
				} catch (IOException e) {
					_log.info("Fail load Config from server ");
					redirectAtt.addFlashAttribute("display", "block");
					redirectAtt.addFlashAttribute("message", "Khong the lay thong tin tu server!");
				}
			} else {
				redirectAtt.addFlashAttribute("display", "block");
				redirectAtt.addFlashAttribute("message", "Chua cai dat dich vu ISC-DHCP-SERVER!");
			}
			mm.put("server", server);
			return "dhcp-hostfixs-config";
		} else {
			return "redirect:/login";
		}
	}
	
	/**
	 * Save DHCP config chung and upload tu Server controller
	 * 
	 */
	@RequestMapping(value = "/serviceconfig/dhcp/save/{ip}/{cc}", method = RequestMethod.POST)
	public String ftpSaveConfigChung(@ModelAttribute(value = "configchung") ConfigChung configchung,
			//@ModelAttribute(value = "subnets") List<Subnet> subnets,
			//@ModelAttribute(value = "hostfixs") List<HostFixIP> hostfixs,
			HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, ModelMap mm, RedirectAttributes redirectAtt) {
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		if (user != null && cc.equals(c)) {
			// Get dhcp in Session
			DHCP dhcpToConfig = (DHCP) session.getAttribute("dhcp");
			//Xoa ss sau khi tao doi tuong
			session.removeAttribute("dhcp");
			DHCPConfig dConfig = new DHCPConfig();
			// Save General config
			if (configchung != null) {
				dhcpToConfig.setConfigchung(configchung);
			}
			//Save ListSN
//			if(subnets!=null){
//				dhcpToConfig.setSubnets(subnets);
//			}
			//Save ListSN
//			if(hostfixs!=null){
//				dhcpToConfig.setHosts(hostfixs);
//			}
			
			Server server = serverDAO.getServer(user, ip);
			Server sv = new Server(server);
			sv.setServerUsername((String) session.getAttribute("sudouser"));
			sv.setServerPassword((String) session.getAttribute("sudopass"));
			try {
				if(dConfig.uploadConfigToDHCPServer(sv, dhcpToConfig.getSubnets(), dhcpToConfig.getHosts(), dhcpToConfig.getConfigchung())){
					_log.info("Upload DHCP Config to server");
					redirectAtt.addFlashAttribute("displaysuccess", "block");
					redirectAtt.addFlashAttribute("message", "Save and Tranfer DHCP Config Success!");
				}else{
					_log.info("Fail upload DHCP Config to server ");
					redirectAtt.addFlashAttribute("display", "block");
					redirectAtt.addFlashAttribute("message",
							"Khong the cap nhat len server (Cannot update DHCP to server)!");
				}
			} catch (IOException e) {
				_log.info("Fail upload DHCP Config to server ");
				redirectAtt.addFlashAttribute("display", "block");
				redirectAtt.addFlashAttribute("message",
						"Khong the cap nhat len server (Cannot update DHCP to server)!");
			}
			mm.put("server", server);
			return "redirect:/serviceconfig/dhcp/" + ip + "/" + c;
		} else {
			return "redirect:/login";
		}
	}
	
	/**
	 * Save DHCP Subnets and upload tu Server controller
	 * 
	 */
	@RequestMapping(value = "/serviceconfig/dhcp/subnets/save/{ip}/{cc}", method = RequestMethod.POST)
	public String ftpSaveSubnets(
			//@ModelAttribute(value = "configchung") ConfigChung configchung,
			@ModelAttribute(value = "subnets") List<Subnet> subnets,
			//@ModelAttribute(value = "hostfixs") List<HostFixIP> hostfixs,
			HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, ModelMap mm, RedirectAttributes redirectAtt) {
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		if (user != null && cc.equals(c)) {
			// Get dhcp in Session
			DHCP dhcpToConfig = (DHCP) session.getAttribute("dhcp");
			//Xoa ss sau khi tao doi tuong
			session.removeAttribute("dhcp");
			DHCPConfig dConfig = new DHCPConfig();
			
			//Save ListSN
			if(subnets!=null){
				dhcpToConfig.setSubnets(subnets);
			}
			
			Server server = serverDAO.getServer(user, ip);
			Server sv = new Server(server);
			sv.setServerUsername((String) session.getAttribute("sudouser"));
			sv.setServerPassword((String) session.getAttribute("sudopass"));
			try {
				if(dConfig.uploadConfigToDHCPServer(sv, dhcpToConfig.getSubnets(), dhcpToConfig.getHosts(), dhcpToConfig.getConfigchung())){
					_log.info("Upload DHCP Config to server");
					redirectAtt.addFlashAttribute("displaysuccess", "block");
					redirectAtt.addFlashAttribute("message", "Save and Tranfer Subnets Config Success!");
				}else{
					_log.info("Fail upload DHCP Config to server ");
					redirectAtt.addFlashAttribute("display", "block");
					redirectAtt.addFlashAttribute("message",
							"Khong the cap nhat len server (Cannot update DHCP Config to server)!");
				}
			} catch (IOException e) {
				_log.info("Fail upload DHCP Config to server ");
				redirectAtt.addFlashAttribute("display", "block");
				redirectAtt.addFlashAttribute("message",
						"Khong the cap nhat len server (Cannot update DHCP Config to server)!");
			}
			mm.put("server", server);
			return "redirect:/serviceconfig/dhcp/" + ip + "/" + c;
		} else {
			return "redirect:/login";
		}
	}
	
	/**
	 * Save DHCP Hostfixs and upload tu Server controller
	 * 
	 */
	@RequestMapping(value = "/serviceconfig/dhcp/hostfixs/save/{ip}/{cc}", method = RequestMethod.POST)
	public String ftpSaveHostfixs(
			//@ModelAttribute(value = "configchung") ConfigChung configchung,
			//@ModelAttribute(value = "subnets") List<Subnet> subnets,
			@ModelAttribute(value = "hostfixs") List<HostFixIP> hostfixs,
			HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, ModelMap mm, RedirectAttributes redirectAtt) {
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		if (user != null && cc.equals(c)) {
			// Get dhcp in Session
			DHCP dhcpToConfig = (DHCP) session.getAttribute("dhcp");
			//Xoa ss sau khi tao doi tuong
			session.removeAttribute("dhcp");
			DHCPConfig dConfig = new DHCPConfig();
			
			//Save ListSN
			if(hostfixs!=null){
				dhcpToConfig.setHosts(hostfixs);
			}
			
			Server server = serverDAO.getServer(user, ip);
			Server sv = new Server(server);
			sv.setServerUsername((String) session.getAttribute("sudouser"));
			sv.setServerPassword((String) session.getAttribute("sudopass"));
			try {
				if(dConfig.uploadConfigToDHCPServer(sv, dhcpToConfig.getSubnets(), dhcpToConfig.getHosts(), dhcpToConfig.getConfigchung())){
					_log.info("Upload DHCP Config to server");
					redirectAtt.addFlashAttribute("displaysuccess", "block");
					redirectAtt.addFlashAttribute("message", "Save and Tranfer DHCP Hostfixs Config Success!");
				}else{
					_log.info("Fail upload DHCP Config to server ");
					redirectAtt.addFlashAttribute("display", "block");
					redirectAtt.addFlashAttribute("message",
							"Khong the cap nhat len server (Cannot update DHCP Config to server)!");
				}
			} catch (IOException e) {
				_log.info("Fail upload DHCP Config to server ");
				redirectAtt.addFlashAttribute("display", "block");
				redirectAtt.addFlashAttribute("message",
						"Khong the cap nhat len server (Cannot update DHCP Config to server)!");
			}
			mm.put("server", server);
			return "redirect:/serviceconfig/dhcp/" + ip + "/" + c;
		} else {
			return "redirect:/login";
		}
	}
	
	/**
	 * Redirect to Edit File
	 * 
	 * @param request
	 * @param session
	 * @param ip
	 * @param c
	 * @return
	 */
	@RequestMapping(value = "/serviceconfig/dhcp/file/{ip}/{cc}", method = RequestMethod.GET)
	public String editDHCPConfigFile(HttpServletRequest request, HttpSession session,
			@PathVariable(value = "ip") String ip, @PathVariable(value = "cc") String c, ModelMap mm) {
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		// Lay doi tuong server trong CSDL
		// Khoi tao doi tuong Server
		// Server sv = new Server();
		// Xet user dang nhap va token
		if (user != null && c.equals(cc)) {
			// duyet danh sach server cua user
			Server sv = new Server();
			for (Server server : user.getServers()) {
				if (server.getServerAddress().equals(ip)) {
					sv = new Server(server);
					sv.setServerUsername((String) session.getAttribute("sudouser"));
					sv.setServerPassword((String) session.getAttribute("sudopass"));
					
					DHCPConfig dhcpConf = new DHCPConfig();
					String config;
					try {
						config = dhcpConf.loadConfigToPlainText(sv);
						mm.put("config", config);
					} catch (IOException e) {
						
					}
					
					
					break;
				}
			}
			
			// Call function
			mm.put("cc", c);
			mm.put("title", "Home - Server Control");
			mm.put("user", user);
			// mm.put("nics", nic);
			mm.put("server", sv);
			
			
			return "nic-edit-config-file";

		} else {
			session.invalidate();
			return "redirect:/login";
		}
	}

	/**
	 * Save File to Config controller
	 * 
	 * @param request
	 * @param session
	 * @param ip
	 * @param c
	 * @return
	 */
	@RequestMapping(value = "/serviceconfig/nic/edit-file-nic/{ip}/{cc}", method = RequestMethod.POST)
	public String saveConfigFile(HttpServletRequest request, HttpSession session,
			@PathVariable(value = "ip") String ip, @PathVariable(value = "cc") String c) {
		String cc = (String) session.getAttribute("cc");
		User user = (User) session.getAttribute("user");
		if (user != null) { // check user login
			if (c.equals(cc)) {
				Nic nicToConfig = (Nic) session.getAttribute("nics");
				String config = (String) request.getParameter("config");
				Server sv = new Server(); // khoi tao server
				// duyet danh sach server cua user
				for (Server server : user.getServers()) {
					if (server.getServerAddress().equals(ip)) {
						sv = new Server(server); // get server Object
						NicConfig nicConfig = new NicConfig();
						sv.setServerUsername((String) session.getAttribute("sudouser"));
						sv.setServerPassword((String) session.getAttribute("sudopass"));
						try {
							nicConfig.saveStringToConfig(sv, config);
						} catch (IOException e) {
							return "redirect:/services/" + ip + "/" + cc;
							// Thong bao khong the upload
						}
					}
				}
				session.removeAttribute("nics"); // remove session for nics
			} else {
				session.invalidate();
				return "redirect:/login";
			} // end check token
		} // end check user
		return "redirect:/services/" + ip + "/" + cc;
	}

	private static final Logger _log = Logger.getLogger(DHCPController.class);
}
