package vn.edu.cit.model;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;

import model.server.ServerStatus;

import org.springframework.data.mongodb.core.mapping.Document;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;

/**
 * Server object with JSCH and Server table in DB
 * 
 * @author Thanh
 *
 */
@Document(collection = "servers")
public class Server extends Thread {
	private String serverAddress;
	private int port = 22;
	private String serverName;
	private String serverUsername;
	private String serverPassword;
	private List<ServerStatus> status;

	public Server() {
		super();
		// TODO Auto-generated constructor stub
	}

	public Server(Server another) {
		this.serverAddress = another.serverAddress;
		this.serverName = another.serverName;
		this.serverUsername = another.serverUsername;
		this.serverPassword = another.serverPassword;
		this.port = another.port;
		this.status = another.status;
	}

	public List<ServerStatus> getStatus() {
		return status;
	}

	public void setStatus(List<ServerStatus> status) {
		this.status = status;
	}

	public String getServerName() {
		return serverName;
	}

	public void setServerName(String serverName) {
		this.serverName = serverName;
	}

	public Server(String serverAddress, int port, String serverName, String serverUsername, String serverPassword) {
		super();
		this.serverAddress = serverAddress;
		this.port = port;
		this.serverName = serverName;
		this.serverUsername = serverUsername;
		this.serverPassword = serverPassword;
	}

	public String getServerAddress() {
		return serverAddress;
	}

	public void setServerAddress(String serverAddress) {
		this.serverAddress = serverAddress;
	}

	public int getPort() {
		return port;
	}

	public void setPort(int port) {
		this.port = port;
	}

	public String getServerUsername() {
		return serverUsername;
	}

	public void setServerUsername(String serverUsername) {
		this.serverUsername = serverUsername;
	}

	public String getServerPassword() {
		return serverPassword;
	}

	public void setServerPassword(String serverPassword) {
		this.serverPassword = serverPassword;
	}

	/**
	 * Check Server Status
	 * 
	 * @param sv
	 * @return
	 */
	public boolean checkStatus() {
		return (getSession(this) != null);
	}

	/**
	 * Get Session
	 * 
	 * @param sv
	 * @return
	 */
	public Session getSession(Server sv) {

		try {
			java.util.Properties config = new java.util.Properties();
			config.put("StrictHostKeyChecking", "no");
			JSch jsch = new JSch();
			// Khoi tao doi tuong Session
			Session session = jsch.getSession(sv.getServerUsername(), sv.getServerAddress(), sv.getPort());
			session.setPassword(sv.getServerPassword());
			session.setConfig(config);
			// session.setTimeout(10000);
			session.connect();
			// System.out.println("Connected to Server Success !!!!");
			return session;
		} catch (Exception e) {
			return null;
		}
	}


	// Convert h to s
	public String convertStoH(float secs) {
		String tong = "";
		int hours = (int) secs / 3600, remainder = (int) secs % 3600, minutes = remainder / 60, seconds = remainder % 60;

		String disHour = (hours < 10 ? "0" : "") + hours, disMinu = (minutes < 10 ? "0" : "") + minutes, disSec = (seconds < 10 ? "0"
				: "")
				+ seconds;

		tong = tong + disHour + ":" + disMinu + ":" + disSec;
		return tong;
	}

	// Restart
	public boolean Restart(Server sv) {
		String cmd = "echo " + sv.getServerPassword() + " |sudo -S " + " reboot ";
		sendCMDToServer(sv, cmd);
		return true;
	}

	// Stop
	public boolean Stop(Server sv) {
		String cmd = "echo " + sv.getServerPassword() + " |sudo -S " + " stop ";
		sendCMDToServer(sv, cmd);
		return true;
	}

	// WakeOnSleep
	public boolean WakeUp(Server sv) {
		String cmd = "echo " + sv.getServerPassword() + " |sudo -S " + " start ";
		sendCMDToServer(sv, cmd);
		return true;
	}

	// Dung trong truong hop Start/Stop/Restart
	public boolean sendCMDToServer(Server sv, String cmd) {
		Session ss = sv.getSession(sv);
		try {
			Channel channel = ss.openChannel("exec");
			((ChannelExec) channel).setCommand(cmd);
			((ChannelExec) channel).setErrStream(System.err);
			InputStream in = channel.getInputStream();
			channel.connect();
			byte[] tmp = new byte[1024];
			while (true) {
				while (in.available() > 0) {
					int i = in.read(tmp, 0, 1024);
					if (i < 0)
						break;
					System.out.print(new String(tmp, 0, i));
				}
				if (channel.isClosed()) {
					System.out.println("exit-status: " + channel.getExitStatus());
					break;
				}
				try {
					Thread.sleep(1000);
				} catch (Exception ee) {
				}
			}
			channel.disconnect();
			if (channel.getExitStatus() == 0) {
				return true;
			} else {
				return false;
			}
		} catch (Exception e) {
			return false;
		}
	}

	// WakeOnSleep
	public boolean WakeUp1(Server sv) {
		String cmd = "echo " + sv.getServerPassword() + " |sudo -S " + " start ";
		sendCMDToServer(sv, cmd);
		return true;
	}

	// Check all service on Server
	public String showAllPS(Server sv) throws InterruptedException {
		String chuoi = uploadToServer(sv, "sudo ps");
		System.out.println(chuoi);

		Thread.sleep(2000);
		chuoi = showAllPS(sv);

		return chuoi;
	}

	// Show Service run or stop
	public String showAllService(Server sv) {
		String services = "";
		String mang[] = { "ssh", "apache2", "vsftpd", "isc-dhcp-server", "bind9", "squid3" };
		int i = 0;
		while (i < mang.length) {
			services = services + uploadToServer(sv, "service " + mang[i] + " status") + "\n";
			i++;
		}
		return services;
	}

	// Dung de load Config text ve
	public String uploadToServer(Server sv, String cmd) {
		Session ss = sv.getSession(sv);
		try {
			String chuoilay = "";
			String tong = "";
			// option -e giup nhan dang ki tu xuong dong
			Channel channel = ss.openChannel("exec");

			((ChannelExec) channel).setCommand(cmd);
			((ChannelExec) channel).setErrStream(System.err);
			//BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			InputStream in = channel.getInputStream();
			channel.connect();
			byte[] tmp = new byte[1024];
			while (true) {
				while (in.available() > 0) {
					int i = in.read(tmp, 0, 1024);
					if (i < 0)
						break;
					chuoilay = new String(tmp, 0, i);
					// System.out.print(chuoilay);
					tong = tong + chuoilay;
				}
				if (channel.isClosed()) {
					// System.out.println("exit-status: "
					// + channel.getExitStatus());
					if (channel.getExitStatus() == 0) {
						System.out.println("Loading...OK");
					} else {

						System.out.println("Loading Failed!!!...");

					}
					break;
				}
				try {
					Thread.sleep(1000);
				} catch (Exception ee) {
				}
			}
			channel.disconnect();
			return tong;
		} catch (Exception e) {
			return null;
		}
	}

}
