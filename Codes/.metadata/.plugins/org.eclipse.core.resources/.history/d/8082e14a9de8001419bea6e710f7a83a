package model.server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;

import vn.edu.cit.dao.ServerDAOImpl;
import vn.edu.cit.model.Server;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.Session;

public class ServerConfig {

	// create user
	public Boolean createUser(Server sv, String username) {
		return true;
	}

	// Dung trong truong hop Start/Stop/Restart
	public boolean sendCMDToServer(Server sv, String cmd) {
		Session ss = sv.getSession(sv);
		try {
			Channel channel = ss.openChannel("exec");
			((ChannelExec) channel).setCommand(cmd);
			((ChannelExec) channel).setErrStream(System.err);
			InputStream in = channel.getInputStream();
			channel.connect();
			byte[] tmp = new byte[1024];
			while (true) {
				while (in.available() > 0) {
					int i = in.read(tmp, 0, 1024);
					if (i < 0)
						break;
					System.out.print(new String(tmp, 0, i));
				}
				if (channel.isClosed()) {
					System.out.println("exit-status: "
							+ channel.getExitStatus());
					break;
				}
				try {
					Thread.sleep(1000);
				} catch (Exception ee) {
				}
			}
			channel.disconnect();
			if (channel.getExitStatus() == 0) {
				return true;
			} else {
				return false;
			}
		} catch (Exception e) {
			return false;
		}
	}

	// Restart
	public boolean Restart(Server sv) {
		String cmd = "echo " + sv.getServerPassword() + " |sudo -S "
				+ " reboot ";
		sendCMDToServer(sv, cmd);
		return true;
	}

	// Stop
	public boolean Stop(Server sv) {
		String cmd = "echo " + sv.getServerPassword() + " |sudo -S " + " stop ";
		sendCMDToServer(sv, cmd);
		return true;
	}

	// WakeOnSleep
	public boolean WakeUp(Server sv) {
		String cmd = "echo " + sv.getServerPassword() + " |sudo -S "
				+ " start ";
		sendCMDToServer(sv, cmd);
		return true;
	}

	// Dung de load Config text ve
	public String uploadToServer(Server sv, String cmd) {
		Session ss = sv.getSession(sv);
		try {
			String chuoilay = "";
			String tong = "";
			// option -e giup nhan dang ki tu xuong dong
			Channel channel = ss.openChannel("exec");

			((ChannelExec) channel).setCommand(cmd);
			((ChannelExec) channel).setErrStream(System.err);
			BufferedReader br = new BufferedReader(new InputStreamReader(
					System.in));
			InputStream in = channel.getInputStream();
			channel.connect();
			byte[] tmp = new byte[1024];
			while (true) {
				while (in.available() > 0) {
					int i = in.read(tmp, 0, 1024);
					if (i < 0)
						break;
					chuoilay = new String(tmp, 0, i);
					// System.out.print(chuoilay);
					tong = tong + chuoilay;
				}
				if (channel.isClosed()) {
					// System.out.println("exit-status: "
					// + channel.getExitStatus());
					if (channel.getExitStatus() == 0) {
						System.out.println("Loading...OK");
					} else {

						System.out.println("Loading Failed!!!...");

					}
					break;
				}
				try {
					Thread.sleep(1000);
				} catch (Exception ee) {
				}
			}
			channel.disconnect();
			return tong;
		} catch (Exception e) {
			return null;
		}
	}

	// Create User with SSH
	public Boolean createUser(String tenUser, String password) {
		return null;
	}

	// getServer Status
	public ServerStatus getServerStatus(Server sv) throws InterruptedException {
		Session ss = sv.getSession(sv);

		try {

			HashMap<String, String> hm1 = new HashMap<String, String>();
			String multi_cmd[] = { "hostname",
					"cat /etc/lsb-release | grep 'DISTRIB_DESCRIPTION='",
					"uname -a", "cat /etc/webmin/version", "date",
					"cat /proc/cpuinfo | grep 'model name'",
					"cat /proc/uptime", "cat /proc/meminfo | grep MemTotal ",
					"free | grep Mem | awk '{print $3/$2 * 100.0}'",
					"free | grep Mem | awk '{print $4/$2 * 100.0}'",
					"cat /proc/meminfo | grep Cached ",
					"top -b -n1 | grep 'Cpu(s)'|awk '{print $2$3}'",
					"cat /proc/loadavg",
					"df -h | grep /dev/mapper/ubuntu--vg-root" };
			String index_cmd[] = { "hostname", "osversion", "kernel",
					"webmin_version", "timeonsys", "processor_info", "uptime",
					"memtotal", "memused", "memfree", "memcached", "cpu_usage",
					"cpu_loadaverage", "local_disk" };

			String chuoilay = "";
			// option -e giup nhan dang ki tu xuong dong
			int j = 0;

			while (j < multi_cmd.length) {
				String tong = "";

				Channel channel = ss.openChannel("exec");

				String cmd = multi_cmd[j];

				((ChannelExec) channel).setCommand(cmd);

				((ChannelExec) channel).setErrStream(System.err);
				BufferedReader br = new BufferedReader(new InputStreamReader(
						System.in));
				InputStream in = channel.getInputStream();

				channel.connect();
				byte[] tmp = new byte[1024];
				while (true) {
					while (in.available() > 0) {
						int i = in.read(tmp, 0, 1024);
						if (i < 0)
							break;
						chuoilay = new String(tmp, 0, i).trim();
						chuoilay = chuoilay.replaceAll("\\s+", " ");
						chuoilay = chuoilay.replace(":", "");
						chuoilay = chuoilay.replace("model name", "");
						chuoilay = chuoilay.replace("DISTRIB_DESCRIPTION=", "");
						chuoilay = chuoilay.replace("\"", "");
						chuoilay = chuoilay.replace(
								"/dev/mapper/ubuntu--vg-root", "");
						chuoilay = chuoilay.replace("MemTotal", "");
						chuoilay = chuoilay.replace("MemFree", "");
						chuoilay = chuoilay.replace("Cached", "");

						chuoilay = chuoilay.trim();
						// chuoilay = chuoilay + "\n";

						// System.out.print(chuoilay);
						tong = tong + chuoilay + "\n";
						if (index_cmd[j].equals("uptime")) {
							tong = tong.substring(0, tong.indexOf(" "));
							hm1.put(index_cmd[j],
									convertStoH(Float.parseFloat(tong)));

						} else {
							hm1.put(index_cmd[j], tong);
						}
					}
					if (channel.isClosed()) {
						// System.out.println("\nexit-status: "
						// + channel.getExitStatus());
						if (channel.getExitStatus() == 0) {
							System.out.println("Loading...OK");
						} else {

							System.out.println("Loading Failed!!!...");

						}
						break;
					}
					try {
						Thread.sleep(1000);
					} catch (Exception ee) {
					}
				}
				channel.disconnect();
				j++;
			}
			// System.out.print(hm1);
			ServerStatus svst = new ServerStatus(hm1.get("hostname"),
					hm1.get("osversion"), hm1.get("kernel"), hm1.get("timeonsys"),
					hm1.get("processor_info"), hm1.get("uptime"),
					hm1.get("memtotal"), hm1.get("memused"),
					hm1.get("memfree"), hm1.get("memcached"),
					hm1.get("cpu_usage"), hm1.get("cpu_loadaverage"),
					hm1.get("local_disk"));

			return svst;

		} catch (Exception e) {

			return null;
		}

	}

	// StartMonitor
//	public void runMonitor(){
//		try {
//			// 
//			ServerDAOImpl serverDAO = new ServerDAOImpl();
//			Server sv = serverDAO.getServer(user, ip);
//			
//			sv.startMonitor(this, 1000);
//		} catch (InterruptedException e1) {
//			// 
//			e1.printStackTrace();
//		}
//	}

	// StopMonitor
	public ServerStatus stopMonitor(Server sv) throws InterruptedException {
		ServerStatus svtt = getServerStatus(sv);
		System.out.println("-----Create Onject-------");
		System.out.println("Host name: " + svtt.getHostname());
		System.out.println("Kernel: " + svtt.getKernel());
		System.out.println("OSVersion: " + svtt.getOsversion());
		System.out.println("Processor Info: " + svtt.getProcessor_info());
		System.out.println("Uptime: " + svtt.getUptime());
		System.out.println("Time On Sys: " + svtt.getTimeonsys());
		System.out.println("Cpu Loadaverage: " + svtt.getCpu_loadaverage());
		System.out.println("Mem Total: " + svtt.getMemtotal());
		System.out.println("Mem Free: " + svtt.getMemfree());
		System.out.println("Mem Used: " + svtt.getMemused());
		System.out.println("Mem Cached: " + svtt.getMemcached());
		System.out.println("Local Disk: " + svtt.getLocal_disk());

		return svtt;
	}

	// Check all service on Server
	public String showAllPS(Server sv) throws InterruptedException {
		String chuoi = uploadToServer(sv, "sudo ps");
		System.out.println(chuoi);

		Thread.sleep(2000);
		chuoi = showAllPS(sv);

		return chuoi;
	}

	// Show Service run or stop
	public String showAllService(Server sv) {
		String services = "";
		String mang[] = { "ssh", "apache2", "vsftpd", "isc-dhcp-server",
				"bind9", "squid3" };
		int i = 0;
		while (i < mang.length) {
			services = services
					+ uploadToServer(sv, "service " + mang[i] + " status")
					+ "\n";
			i++;
		}
		return services;
	}

	// Convert h to s
	public String convertStoH(float secs) {
		String tong = "";
		int hours = (int) secs / 3600, remainder = (int) secs % 3600, minutes = remainder / 60, seconds = remainder % 60;

		String disHour = (hours < 10 ? "0" : "") + hours, disMinu = (minutes < 10 ? "0"
				: "")
				+ minutes, disSec = (seconds < 10 ? "0" : "") + seconds;

		tong = tong + disHour + ":" + disMinu + ":" + disSec;
		return tong;
	}

	public Boolean checkSudoer(Server sv) {

		String kq = uploadToServer(sv, "echo " + sv.getServerPassword()
				+ " | sudo -S bash -c ' echo -e hello '");
		if (kq.indexOf("hello") != -1) {
			return true;
		} else {
			return false;
		}

	}

	public static void main(String[] args) throws IOException,
			InterruptedException {
//		ServerConfig svc = new ServerConfig();
//		Server sv = new Server("192.168.1.129", 22, "mayb", "ubuntu", "ubuntu");
//		Server sv2 = new Server("192.168.1.129", 22, "mayb", "ubuntu", "ubuntu");
//		Server sv3 = new Server("192.168.1.129", 22, "mayb", "svcontrol", "12345");
		// System.out.println(svc.checkSudoer(sv));
		// svc.checkAllPS(sv);
		// System.out.println("----------------------------");
		// System.out.println(svc.ServerInformation(sv));
		// svc.checkAllPS(sv);
//		svc.startMonitor(sv, 2);
//		svc.startMonitor(sv3, 2);
//		svc.startMonitor(sv2, 2);
		// svc.showAllService(sv);

		// Server sv1 = new Server(1, "192.168.0.178", 22, "ubuntu", "maya",
		// "maya");
		// svc.stopMonitor(sv1);
		//
		// Server sv2 = new Server(1, "192.168.0.176", 22, "ubuntu1", "ubuntu1",
		// "ubuntu1");
		// svc.startMonitor(sv, 3000);
		// svc.Restart(sv);
		// System.out.println(svc.showAllService(sv));
		// System.out.println(svc.showAllService(sv));
	}
}
