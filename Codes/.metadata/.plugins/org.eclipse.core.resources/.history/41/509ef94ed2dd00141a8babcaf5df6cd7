package model.dns;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import model.nic.Dns;
import vn.edu.cit.model.Server;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.Session;

public class Bind9Config {

	// Chuan hoa lan 1
	public String chuanhoaChuoi1(String chuoiCH) {

		try {

			StringReader str = new StringReader(chuoiCH);
			BufferedReader bufferedReader = new BufferedReader(str);
			String line;
			String chuoilay = "";
			while ((line = bufferedReader.readLine()) != null) {

				line = line.trim();
				// Replace nhieu khoang trang ve mot khoang trang
				line = line.replaceAll("\\s+", " ");
				line = line.replaceAll("\"", "");

				line = line.trim();

				// Doi chuoi sau ki tu "{" xuong dong sau do se doi ki tu "{"
				// xuong dong o chuanhoa2
				if (line.indexOf("{") != -1) {
					line = line.replace("{", "{\n");

				}

				// Cat bo line chua "#" dau dong
				if (line.indexOf("//") != -1 || line.indexOf("include") != -1
						|| line.indexOf("#") != -1) {
					line = "";
				} else {
					chuoilay = chuoilay + line + "\n";
				}
			}
			str.close();

			return chuoilay.trim();
		} catch (IOException e) {
			e.printStackTrace();
		}
		// ----------------------------------------
		return null;

	}

	// Chuan hoa lan 2
	public String chuanhoaChuoi2(String chuoiCH) throws IOException {

		String chuoilay = chuoiCH;

		chuoilay = chuoilay.replaceAll(";", ";\n");
		String line2 = "";
		String kq_lay = "";
		StringReader str2 = new StringReader(chuoilay);
		BufferedReader br = new BufferedReader(str2);
		while ((line2 = br.readLine()) != null) {
			line2 = line2.trim();
			if (line2.endsWith("{")) {
				line2 = line2.replace("{", "\n{");
			}

			kq_lay = kq_lay + line2 + "\n";
		}
		str2.close();

		return kq_lay;

	}

	// Xoa tat ca dong trong Chuan hoa 3
	public String chuanhoaChuoi3(String chuoiCH) throws IOException {

		String chuoilay = chuoiCH;

		String line2 = "";
		String kq_lay = "";
		StringReader str2 = new StringReader(chuoilay);
		BufferedReader br = new BufferedReader(str2);
		while ((line2 = br.readLine()) != null) {
			line2 = line2.trim();
			// ham xu ly dau ";"
			if (line2.indexOf(" ;") != -1) {
				line2 = line2.replace(" ;", ";");

			}

			if (line2.indexOf("; ") != -1) {
				line2 = line2.replace("; ", ";");

			}

			if (line2.indexOf(" ; ") != -1) {
				line2 = line2.replace(" ; ", ";");

			}

			// Ham xoa tat ca
			if (line2.isEmpty()) {
				continue;
			}
			kq_lay = kq_lay + line2 + "\n";
		}
		str2.close();

		return kq_lay;

	}

	// Xoa tat ca dong trong Chuan hoa 4, tao khoang trang o moi zone
	public String chuanhoaChuoi4(String chuoiCH) throws IOException {

		String chuoilay = chuoiCH;

		String line2 = "";
		String kq_lay = "";
		StringReader str2 = new StringReader(chuoilay);
		BufferedReader br = new BufferedReader(str2);
		int m = 0;
		while ((line2 = br.readLine()) != null) {
			line2 = line2.trim();
			// Neu dong chua "zone" va dong phai > 1, nghia la tu zong thu 2 tro
			// ve sau
			if (line2.indexOf("zone") != -1 && m > 0) {
				line2 = "\n" + line2;
			}
			kq_lay = kq_lay + line2 + "\n";
			m++;
		}
		str2.close();

		return kq_lay;

	}

	// Xoa tat ca dong trong Chuan hoa 5, danh dau ki tu dac biet vao moi khoang
	// trang o moi zone, ho tro cho viec tao doi tuong
	public String chuanhoaChuoi5(String chuoiCH) throws IOException {

		String chuoilay = chuoiCH;

		String line2 = "";
		String kq_lay = "";
		StringReader str2 = new StringReader(chuoilay);
		BufferedReader br = new BufferedReader(str2);
		while ((line2 = br.readLine()) != null) {
			line2 = line2.trim();
			// Danh dau ki tu dac biet vao nhung cho la khoang trang
			if (line2.isEmpty()) {
				line2 = line2 + "&&&";
			}
			kq_lay = kq_lay + line2 + "\n";
		}
		str2.close();
		// Them ki tu dac biet vao khoang trang cuoi dong
		return kq_lay + "&&&";

	}

	// loadConfigZone
	public String loadConfigZoneToPlainText(Server sv) throws IOException {
		String kq = uploadToServer(sv, "cat /etc/bind/named.conf.local");
		kq = chuanhoaChuoi1(kq);
		kq = chuanhoaChuoi2(kq);
		kq = chuanhoaChuoi3(kq);
		// kq = chuanhoaChuoi4(kq);
		// kq = chuanhoaChuoi5(kq);

		return kq;
	}

	// load ACL to Plaintext + Chuan hoa
	public String loadACLToPlainText(Server sv) throws IOException {
		String kq = uploadToServer(sv, "cat /etc/bind/named.conf");
		kq = chuanhoaChuoi1(kq);
		kq = chuanhoaChuoi2(kq);
		kq = chuanhoaChuoi3(kq);
		// kq = chuanhoaChuoi4(kq);
		// kq = chuanhoaChuoi5(kq);

		return kq;
	}

	// Convert ACL Config to ACL Xml
	public String convertACLToXML(Server sv) throws IOException {

		StringReader str = new StringReader(loadACLToPlainText(sv));
		BufferedReader br = new BufferedReader(str);
		String line = "";
		String lay = "";
		while ((line = br.readLine()) != null) {

			if (line.indexOf("acl") != -1) {
				lay = lay + "<acl>" + "\n" + "<access_name>"
						+ line.substring(line.indexOf(" ")).trim()
						+ "</access_name>" + "\n";
			}
			// Do da indexOf (";") nen xem nhu ko lay dau ";"
			if (line.matches("\\d+.\\d+.\\d+.\\d+.")) {
				lay = lay + "<ip>"
						+ line.substring(0, line.indexOf(";")).trim() + "</ip>"
						+ "\n";

			}

			// if (line.matches("\\w+;")) {
			// lay = lay + "<ip>"
			// + line.substring(0, line.indexOf(";")).trim() + "</ip>"
			// + "\n";
			//
			// }
			if (line.indexOf("};") != -1) {
				lay = lay + "</acl>" + "\n\n";
			}

		}
		return lay;

	}

	// load Options to Plaintext + Chuan hoa
	public String loadOptionsToPlainText(Server sv) throws IOException {
		String kq = uploadToServer(sv, "cat /etc/bind/named.conf.options");
		kq = chuanhoaChuoi1(kq);
		kq = chuanhoaChuoi2(kq);
		kq = chuanhoaChuoi3(kq);
		// kq = chuanhoaChuoi4(kq);
		// kq = chuanhoaChuoi5(kq);

		return kq;
	}

	// convert Options to XML
	public String convertOptionsToXML(Server sv) throws IOException {
		String xmlText = "";// cong dan dan
		String lay = loadOptionsToPlainText(sv);

		// -----Lay doi tuong dac biet
		// In ra thu
		// Bat dau
		// tim tat ca cac doi tuong dac biet
		String regexALL = ".+\n\\{\n[-\\w+\\d+.;\n]+\n\\};";
		// tim chuoi la ip
		String iporacl = "[^forwarders allow\\-recursion allow\\-query allow\\-transfer allow\\-notify \\{\\}][-\\w+\\d+.\n;]+";
		// tim doi tuong forwarders
		String regexForwarders = "forwarders\n\\{\n[-\\w+\\d+.;\n]+\n\\};";
		// tim doi tuong allow query
		String regexAllowQuery = "allow-query\n\\{\n[-\\w+\\d+.;\n]+\n\\};";
		// tim doi tuong allow recursion
		String regexAllowRecursion = "allow-recursion\n\\{\n[-\\w+\\d+.;\n]+\n\\};";
		// tim doi tuong allow transfer
		String regexAllowTransfer = "allow-transfer\n\\{\n[-\\w+\\d+.;\n]+\n\\};";
		// tim doi tuong allow notify
		String regexAllowNotify = "allow-notify\n\\{\n[-\\w+\\d+.;\n]+\n\\};";

		Pattern pt = Pattern.compile(regexALL);
		Matcher matcher = pt.matcher(lay);
		while (matcher.find()) {
			// System.out.println("In ra---------- \n" + matcher.group());
			if (matcher.group().matches(regexForwarders)) {
				Pattern pt1 = Pattern.compile(iporacl);
				Matcher matcher1 = pt1.matcher(matcher.group());
				while (matcher1.find()) {

					xmlText = xmlText + "<forwarders>" + matcher1.group()
							+ "</forwarders>" + "\n\n";

				}
			}

			if (matcher.group().matches(regexAllowQuery)) {
				Pattern pt1 = Pattern.compile(iporacl);
				Matcher matcher1 = pt1.matcher(matcher.group());
				while (matcher1.find()) {

					xmlText = xmlText + "<allow_query>" + matcher1.group()
							+ "</allow_query>" + "\n\n";

				}
			}

			if (matcher.group().matches(regexAllowRecursion)) {
				// System.out.println(matcher.group());
				Pattern pt1 = Pattern.compile(iporacl);
				Matcher matcher1 = pt1.matcher(matcher.group());
				while (matcher1.find()) {

					xmlText = xmlText + "<allow_recursion>" + matcher1.group()
							+ "</allow_recursion>" + "\n\n";

				}
			}

			if (matcher.group().matches(regexAllowTransfer)) {
				// System.out.println(matcher.group());
				Pattern pt1 = Pattern.compile(iporacl);
				Matcher matcher1 = pt1.matcher(matcher.group());
				while (matcher1.find()) {

					xmlText = xmlText + "<allow_transfer>" + matcher1.group()
							+ "</allow_transfer>" + "\n\n";

				}
			}

			if (matcher.group().matches(regexAllowNotify)) {
				// System.out.println(matcher.group());
				Pattern pt1 = Pattern.compile(iporacl);
				Matcher matcher1 = pt1.matcher(matcher.group());
				while (matcher1.find()) {

					xmlText = xmlText + "<allow_notify>" + matcher1.group()
							+ "</allow_notify>" + "\n\n";

				}
			}
		}
		// Ket thuc mot doi tuong
		// --------------
		// Convert 1 para 1 value to XML
		// String option_text = loadOptionsToPlainText(sv);
		// System.out.println(option_text);
		StringReader str = new StringReader(lay);
		BufferedReader br = new BufferedReader(str);
		String line = "";
		String tong = "";
		while ((line = br.readLine()) != null) {
			line = line.trim();
			if (line.indexOf("directory") != -1) {
				tong = tong
						+ "<directory>"
						+ line.substring(line.indexOf(" ") + 1)
								.replace("\"", "").replace(";", "")
						+ "</directory>" + "\n";

			}

			if (line.indexOf("multiple-cnames") != -1) {
				tong = tong
						+ "<multiple_cnames>"
						+ line.substring(line.indexOf(" ") + 1)
								.replace(";", "") + "</multiple_cnames>" + "\n";
			}
			// luu y neu trung voi nhung gia tri khac khi dung indexOf, khi thuc
			// thi se ko hien ra ket qua
			if (line.startsWith("recursion")) {
				tong = tong
						+ "<recursion>"
						+ line.substring(line.indexOf(" ") + 1)
								.replace(";", "") + "</recursion>" + "\n";
			}
			// luu y khoang trang cua forward
			if (line.startsWith("forward ")) {
				tong = tong
						+ "<forward>"
						+ line.substring(line.indexOf(" ") + 1)
								.replace(";", "") + "</forward>" + "\n";

			}

		}
		str.close();

		// ---

		return "<option>" + tong + "\n" + xmlText + "</option>";
	}

	// load path_file zone dung de get nhung SOA record tuong ung voi moi zone
	public List<String> loadPathFileZoneToPlainText(Server sv)
			throws IOException {
		String kq = uploadToServer(sv, "cat /etc/bind/named.conf.local");
		kq = chuanhoaChuoi1(kq);
		kq = chuanhoaChuoi2(kq);
		kq = chuanhoaChuoi3(kq);
		StringReader str = new StringReader(kq);
		BufferedReader br = new BufferedReader(str);
		String line = "";
		List<String> file_multi = new ArrayList<String>();
		while ((line = br.readLine()) != null) {
			if (line.indexOf("file") != -1) {
				file_multi.add(line.substring(line.indexOf(" "))
						.replace("\"", "").trim());
			}
		}
		return file_multi;
	}

	// Chuan hoa SOA lan 1
	public String chuanhoaChuoiSOA1(String chuoiCH) {

		try {

			StringReader str = new StringReader(chuoiCH);
			BufferedReader bufferedReader = new BufferedReader(str);
			String line;
			String chuoilay = "";
			while ((line = bufferedReader.readLine()) != null) {

				line = line.trim();
				// Replace nhieu khoang trang ve mot khoang trang
				line = line.replaceAll("\\s+", " ");
				// Xoa IN
				line = line.replaceAll("IN", "");
				// line = line.replaceAll("AAAA", "");

				line = line.trim();

				// Doi chuoi sau ki tu "{" xuong dong sau do se doi ki tu "{"
				// xuong dong o chuanhoa2
				if (line.indexOf("{") != -1) {
					line = line.replace("{", "{\n");

				}
				if (line.startsWith(";")) {
					continue;
				}

				if (line.indexOf("AAAA") != -1) {
					continue;
				}

				// Cat bo line chua "#" dau dong
				if (line.indexOf("//") != -1) {
					line = "";
				} else {
					chuoilay = chuoilay + line + "\n";
				}
			}
			str.close();

			return chuoilay.trim();
		} catch (IOException e) {
			e.printStackTrace();
		}
		// ----------------------------------------
		return null;

	}

	// Chuan hoa SOA lan 2
	public String chuanhoaChuoiSOA2(String chuoiCH) throws IOException {

		String chuoilay = chuoiCH;

		// chuoilay = chuoilay.replaceAll(";", ";\n");
		String line2 = "";
		String kq_lay = "";
		StringReader str2 = new StringReader(chuoilay);
		BufferedReader br = new BufferedReader(str2);
		while ((line2 = br.readLine()) != null) {
			line2 = line2.trim();
			if (line2.endsWith("{")) {
				line2 = line2.replace("{", "\n{");
			}

			kq_lay = kq_lay + line2 + "\n";
		}
		str2.close();

		return kq_lay;

	}

	// Xoa tat ca dong trong Chuan hoa SOA 3
	public String chuanhoaChuoiSOA3(String chuoiCH) throws IOException {

		String chuoilay = chuoiCH;

		String line2 = "";
		String kq_lay = "";
		StringReader str2 = new StringReader(chuoilay);
		BufferedReader br = new BufferedReader(str2);
		while ((line2 = br.readLine()) != null) {
			line2 = line2.replaceAll("\\s+", " ");
			line2 = line2.trim();
			// Ham xoa tat ca
			if (line2.isEmpty()) {
				continue;
			}
			kq_lay = kq_lay + line2 + "\n";
		}
		str2.close();

		return kq_lay;

	}

	// load SOA record
	public String loadSOAToPlainText(Server sv) throws IOException {
		System.out.println("loadPathFileZoneToPlainText(sv).....loading...");
		List<String> list_file = loadPathFileZoneToPlainText(sv);
		int i = 0;
		String kq = "";
		String tong = "";
		while (i < list_file.size()) {
			kq = uploadToServer(sv, "cat " + list_file.get(i));
			if (kq != null && !kq.equals("") && !kq.isEmpty()) {
				kq = chuanhoaChuoiSOA1(kq);
				kq = chuanhoaChuoiSOA2(kq);
				kq = chuanhoaChuoiSOA3(kq);
				tong = tong + kq + "&&&" + "\n";
			}
			i++;
		}

		return tong;
	}

	// convert SOA to Xml
	public String convertSOAToXML(Server sv) throws IOException {
		StringReader str = new StringReader(loadSOAToPlainText(sv));
		BufferedReader br = new BufferedReader(str);
		String line = "";
		String lay = "";
		int k = 0;
		while ((line = br.readLine()) != null) {
			if (line.indexOf("$TTL") != -1) {
				k++;
				lay = lay + "<soa>" + "\n" + "<ttl>"
						+ line.substring(line.indexOf(" ")).trim() + "</ttl>"
						+ "\n";
			}

			if (line.indexOf("SOA") != -1) {
				lay = lay
						+ "<domain_name>"
						+ line.substring(line.indexOf(" ", 4),
								line.indexOf(" ", 6)).trim() + "</domain_name>"
						+ "\n";

				lay = lay
						+ "<admin_domain>"
						+ line.substring(line.indexOf(" ", 6),
								line.lastIndexOf(" ")).trim()
						+ "</admin_domain>" + "\n";

			}

			if (line.indexOf("Serial") != -1) {
				lay = lay + "<serial>"
						+ line.substring(0, line.indexOf(";")).trim()
						+ "</serial>" + "\n";

			}
			if (line.indexOf("Refresh") != -1) {
				lay = lay + "<refresh>"
						+ line.substring(0, line.indexOf(";")).trim()
						+ "</refresh>" + "\n";

			}

			if (line.indexOf("Retry") != -1) {
				lay = lay + "<retry>"
						+ line.substring(0, line.indexOf(";")).trim()
						+ "</retry>" + "\n";

			}

			if (line.indexOf("Expire") != -1) {
				lay = lay + "<expire>"
						+ line.substring(0, line.indexOf(";")).trim()
						+ "</expire>" + "\n";

			}

			if (line.indexOf("Cache TTL") != -1) {
				lay = lay + "<min_ttl>"
						+ line.substring(0, line.indexOf(")")).trim()
						+ "</min_ttl>" + "\n";

			}

			// Record NS
			if (line.indexOf("NS") != -1) {
				lay = lay + "<record>" + "\n";
				lay = lay + "<domain_name>"
						+ line.substring(0, line.indexOf(" ")).trim()
						+ "</domain_name>" + "\n";
				lay = lay + "<type_record>" + "NS" + "</type_record>" + "\n";
				lay = lay + "<name_server>"
						+ line.substring(line.indexOf("NS") + 2).trim()
						+ "</name_server>" + "\n";
				lay = lay + "</record>" + "\n";

			}
			// Record MX
			if (line.indexOf("MX") != -1) {
				lay = lay + "<record>" + "\n";
				lay = lay + "<domain_name>"
						+ line.substring(0, line.indexOf(" ")).trim()
						+ "</domain_name>" + "\n";
				lay = lay
						+ "<priority>"
						+ line.substring(line.indexOf(" ", line.indexOf("MX")),
								line.lastIndexOf(" ")).trim() + "</priority>"
						+ "\n";
				lay = lay + "<type_record>" + "MX" + "</type_record>" + "\n";
				lay = lay + "<name_server>"
						+ line.substring(line.lastIndexOf(" ")).trim()
						+ "</name_server>" + "\n";
				lay = lay + "</record>" + "\n";

			}

			// Record PTR
			if (line.indexOf("PTR") != -1) {
				lay = lay + "<record>" + "\n";
				lay = lay + "<domain_name>"
						+ line.substring(0, line.indexOf(" ")).trim()
						+ "</domain_name>" + "\n";
				lay = lay + "<type_record>" + "PTR" + "</type_record>" + "\n";
				lay = lay + "<name_server>"
						+ line.substring(line.indexOf("PTR") + 3).trim()
						+ "</name_server>" + "\n";
				lay = lay + "</record>" + "\n";

			}

			// Record CNAME
			if (line.indexOf("CNAME") != -1) {
				lay = lay + "<record>" + "\n";
				lay = lay + "<domain_name>"
						+ line.substring(0, line.indexOf(" ")).trim()
						+ "</domain_name>" + "\n";
				lay = lay + "<type_record>" + "CNAME" + "</type_record>" + "\n";
				lay = lay + "<name_server>"
						+ line.substring(line.indexOf("CNAME") + 5).trim()
						+ "</name_server>" + "\n";
				lay = lay + "</record>" + "\n";

			}
			// Phan biet voi SOA khi index, record A
			if (line.indexOf(" A ") != -1) {
				lay = lay + "<record>" + "\n";
				lay = lay + "<domain_name>"
						+ line.substring(0, line.indexOf(" ")).trim()
						+ "</domain_name>" + "\n";
				lay = lay + "<type_record>" + "A" + "</type_record>" + "\n";
				lay = lay + "<name_server>"
						+ line.substring(line.indexOf("A") + 1).trim()
						+ "</name_server>" + "\n";
				lay = lay + "</record>" + "\n";

			}

			if (line.indexOf("&&&") != -1) {
				lay = lay + "</soa>" + "\n\n";
			}

		}
		return lay;
	}

	// Upload cmd / file to server phuc vu cho viec loadConfigToPlainText
	public String uploadToServer(Server sv, String cmd) {
		Session ss = sv.getSession(sv);
		try {
			String chuoilay = "";
			String tong = "";
			// option -e giup nhan dang ki tu xuong dong
			Channel channel = ss.openChannel("exec");
			((ChannelExec) channel).setCommand(cmd);
			((ChannelExec) channel).setErrStream(System.err);

			InputStream in = channel.getInputStream();
			channel.connect();
			byte[] tmp = new byte[1024];
			while (true) {
				while (in.available() > 0) {
					int i = in.read(tmp, 0, 1024);
					if (i < 0)
						break;
					chuoilay = new String(tmp, 0, i);
					// System.out.print(chuoilay);
					tong = tong + chuoilay;

				}
				if (channel.isClosed()) {
					System.out.println("exit-status: "
							+ channel.getExitStatus());
					if (channel.getExitStatus() == 0) {
						System.out.println("***Process Success...OK");
					} else {
						System.out.println("***Process Failed...!!!");

					}
					break;
				}
				try {
					Thread.sleep(1000);
				} catch (Exception ee) {
				}
			}
			channel.disconnect();
			return tong;
		} catch (Exception e) {
			return null;
		}
	}

	public String convertZoneToXML(Server sv) throws IOException {
		String lay = loadConfigZoneToPlainText(sv);
		// System.out.println(lay);
		String xmlText = "";
		String regexZoneBT = "zone .+\n\\{\ntype master;\nfile .+\n\\};";
		String regexZoneName = "zone .+";
		String regexZoneForwarders = "zone .+\n\\{\ntype forward;\nforwarders\n\\{\n[\\d+.;\n]+\n\\};\n\\};";
		String regexZoneSlave = "zone .+\n\\{\ntype slave;\nmasters\n\\{\n[\\d+.;\n]+\n\\};\nfile .+\n\\};";
		// Zone binh thuong
		Pattern pt = Pattern.compile(regexZoneBT);
		Matcher matcher = pt.matcher(lay);
		while (matcher.find()) {
			xmlText = xmlText + "<zone>" + "\n";

			Pattern pt2 = Pattern.compile(regexZoneName);
			Matcher matcher2 = pt2.matcher(matcher.group());
			while (matcher2.find()) {
				xmlText = xmlText + "<zone_name>"
						+ matcher2.group().replace("zone", "").trim()
						+ "</zone_name>" + "\n";

			}

			Pattern pt3 = Pattern.compile("type master");
			Matcher matcher3 = pt3.matcher(matcher.group());
			while (matcher3.find()) {
				xmlText = xmlText
						+ "<zone_type>"
						+ matcher3.group().replace(";", "").replace("type", "")
								.trim() + "</zone_type>" + "\n";

			}

			Pattern pt4 = Pattern.compile("file .+");
			Matcher matcher4 = pt4.matcher(matcher.group());
			while (matcher4.find()) {
				xmlText = xmlText
						+ "<zone_file>"
						+ matcher4.group().replace(";", "").replace("file", "")
								.trim() + "</zone_file>" + "\n";

			}
			xmlText = xmlText + "</zone>" + "\n\n";

		}
		// zone forward
		Pattern pt5 = Pattern.compile(regexZoneForwarders);
		Matcher matcher5 = pt5.matcher(lay);
		while (matcher5.find()) {
			xmlText = xmlText + "<zone>" + "\n";

			Pattern pt2 = Pattern.compile(regexZoneName);
			Matcher matcher2 = pt2.matcher(matcher5.group());
			while (matcher2.find()) {
				xmlText = xmlText + "<zone_name>"
						+ matcher2.group().replace("zone", "").trim()
						+ "</zone_name>" + "\n";

			}

			Pattern pt3 = Pattern.compile("type forward");
			Matcher matcher3 = pt3.matcher(matcher5.group());
			while (matcher3.find()) {
				xmlText = xmlText
						+ "<zone_type>"
						+ matcher3.group().replace(";", "").replace(";", "")
								.replace("type", "").trim() + "</zone_type>"
						+ "\n";

			}

			Pattern pt4 = Pattern
					.compile("forwarders\n\\{\n[\\d+.;\n]+\n\\};\n\\};");
			Matcher matcher4 = pt4.matcher(matcher5.group());
			while (matcher4.find()) {
				xmlText = xmlText + "<forwarders>" + "\n";
				xmlText = xmlText
						+ matcher4.group().replace("{", "").replace("};", "")
								.replace("forwarders", "").replace(";", ";\n")
								.replaceAll("\\s+", " ") + "\n";
				xmlText = xmlText + "</forwarders>" + "\n";

			}
			xmlText = xmlText + "</zone>" + "\n\n";

		}
		// Slave zone
		Pattern pt6 = Pattern.compile(regexZoneSlave);
		Matcher matcher6 = pt6.matcher(lay);
		while (matcher6.find()) {
			// System.out.println(matcher6.group());
			xmlText = xmlText + "<zone>" + "\n";

			Pattern pt2 = Pattern.compile(regexZoneName);
			Matcher matcher2 = pt2.matcher(matcher6.group());
			while (matcher2.find()) {
				xmlText = xmlText + "<zone_name>"
						+ matcher2.group().replace("zone", "").trim()
						+ "</zone_name>" + "\n";

			}

			Pattern pt3 = Pattern.compile("type slave");
			Matcher matcher3 = pt3.matcher(matcher6.group());
			while (matcher3.find()) {
				xmlText = xmlText
						+ "<zone_type>"
						+ matcher3.group().replace(";", "").replace(";", "")
								.replace("type", "").trim() + "</zone_type>"
						+ "\n";

			}

			Pattern pt4 = Pattern.compile("masters\n\\{\n[\\d+.;\n]+\n\\};");
			Matcher matcher4 = pt4.matcher(matcher6.group());
			while (matcher4.find()) {
				xmlText = xmlText + "<masters>" + "\n";
				xmlText = xmlText
						+ matcher4.group().replace("{", "").replace("};", "")
								.replace("masters", "").replace(";", ";\n")
								.replaceAll("\\s+", " ") + "\n";
				xmlText = xmlText + "</masters>" + "\n";

			}

			Pattern pt10 = Pattern.compile("file .+");
			Matcher matcher10 = pt10.matcher(matcher6.group());
			while (matcher10.find()) {
				xmlText = xmlText
						+ "<zone_file>"
						+ matcher10.group().replace(";", "")
								.replace("file", "").trim() + "</zone_file>"
						+ "\n";

			}
			xmlText = xmlText + "</zone>" + "\n\n";

		}
		// ------
		return xmlText;
	}

	// get DNS XML - File Tong The
	public String convertConfigToDNSXml(Server sv) throws IOException {
		String xmlDNSConfig = "";
		xmlDNSConfig = xmlDNSConfig + convertZoneToXML(sv) + "\n"
				+ convertSOAToXML(sv) + "\n" + convertACLToXML(sv) + "\n"
				+ convertOptionsToXML(sv);
		return "<dns>" + xmlDNSConfig + "</dns>";
	}

	// convert XML to Object DNS, ham nay ko truyen tham so
	public Dns convertXMLToObjectDNS(Server sv) throws IOException {
		// StringReader strRead = new StringReader(convertConfigToDNSXml(sv));

		try {
			// Khoi tao Context
			JAXBContext context = JAXBContext.newInstance(Dns.class);
			// Tao Unmarshaller tu Context
			Unmarshaller un = context.createUnmarshaller();
			// File xml phu thuoc vao doi tuong + duong duong path
			Dns dns = (Dns) un.unmarshal(new File("E:\\bind.txt"));

			for (SOA soa : dns.getSoa()) {
				System.out.println(soa.getRecord().get(0).getType_record());

			}
			return dns;

		} catch (JAXBException e) {
			e.printStackTrace();
		} catch (NullPointerException nu) {
		}
		return null;
	}

	public static void main(String[] args) throws IOException {

		Bind9Config bind_c = new Bind9Config();
		Server sv = new Server(1, "192.168.0.100", 22, "mayb", "root", "root");

		// System.out.println(bind_c.loadConfigZoneToPlainText(sv));
		// System.out.println(bind_c.convertZoneToXML(sv));
		// System.out.println(bind_c.loadFileZoneToPlainText(sv));
		// System.out.print(bind_c.loadSOAToPlainText(sv));
		// System.out.print(bind_c.convertSOAToXML(sv));
		// System.out.println(bind_c.loadACLToPlainText(sv));
		// System.out.println(bind_c.convertACLToXML(sv));
		// System.out.println(bind_c.loadOptionsToPlainText(sv));
		// System.out.println(bind_c.convertOptionsToXML(sv));
		// System.out.println("------------------------------------\n"
		// + bind_c.convertConfigToDNS(sv));
		bind_c.convertXMLToObjectDNS(sv);

	}
}
