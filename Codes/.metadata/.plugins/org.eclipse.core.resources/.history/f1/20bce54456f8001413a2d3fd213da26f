package vn.edu.cit.controller;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import model.dhcp.DHCPConfig;
import model.ftp.Ftp;
import model.ftp.FtpConfig;
import model.nic.NicConfig;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import vn.edu.cit.dao.ServerDAO;
import vn.edu.cit.dao.UserDAO;
import vn.edu.cit.model.Server;
import vn.edu.cit.model.User;

@Controller
public class FTPController {
	@Autowired
	private UserDAO userDAO;
	@Autowired
	private ServerDAO serverDAO;

	/**
	 * Function ftpSetup
	 * 
	 * @author ThanhNhan
	 * @param request
	 * @param session
	 * @param ip
	 * @param c
	 * @param mm
	 * @return String
	 */
	@RequestMapping(value = "/serviceconfig/ftpinstall/{ip}/{cc}", method = RequestMethod.GET)
	public String ftpSetup(HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, ModelMap mm, RedirectAttributes redirectAtt) {
		User user = (User) session.getAttribute("user");
		if (user != null) {
			for (Server server : user.getServers()) {
				if (server.getServerAddress().equals(ip)) {
					FtpConfig fconfig = new FtpConfig();
					Server sv = new Server(server);
					sv.setServerUsername((String) session.getAttribute("sudouser"));
					sv.setServerPassword((String) session.getAttribute("sudopass"));
					if (fconfig.Install(sv)) {
						_log.info("Upload FTP Config to server");
						redirectAtt.addFlashAttribute("displaysuccess", "block");
						redirectAtt.addFlashAttribute("message", "Setup VSFTPD Success!");
					} else {
						_log.info("Cai dat VSFTPD khong thanh cong");
						redirectAtt.addFlashAttribute("display", "block");
						redirectAtt.addFlashAttribute("message",
								"Cai dat VSFTPD khong thanh cong, vui long kiem tra lai");
					}
				}
			}
			return "redirect:/services/" + ip + "/" + c;
		} else {
			return "redirect:/login";
		}
	}

	/**
	 * Ftp Configuation
	 * 
	 * @return ftp-config
	 */
	@RequestMapping(value = "/serviceconfig/ftp/{ip}/{cc}", method = RequestMethod.GET)
	public String ftpConfig(HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, ModelMap mm, RedirectAttributes redirectAtt) {
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		// Kiem tra user va token
		if (user != null && cc.equals(c)) {
			Server server = serverDAO.getServer(user, ip);
			Server sv = new Server(server);

			sv.setServerUsername((String) session.getAttribute("sudouser"));
			sv.setServerPassword((String) session.getAttribute("sudopass"));
			//System.out.println(sv.getServerUsername());
			FtpConfig ftp = new FtpConfig();
			if (ftp.checkInstall(sv) == true) {
				// Neu server da cai dat FTP
				//System.out.println(ftp.getError(sv));
				mm.put("Ftp", ftp.convertTextToObject(sv));
			}
			String status ="";
			if (ftp.checkRunning(sv) == false) {
				status = "DHCP Service is not running!";
			}else{
				status = "DHCP Service is running..";
			}
			
			String str = ftp.getError(sv);
			
			if(!str.equals("nonerror")){
				System.out.println(str);
				mm.put("display", "block");
				mm.put("messageErr",
					"<br>" + status + "<br>Notice:<br><pre>" + str + "</pre>");
			}

			mm.put("server", server);
			return "ftp-config";
		} else {
			// neu chua login
			return "redirect:/login";
		}
	}

	/**
	 * Ftp Save, luu thong tin cua FTP len server
	 * 
	 * @return ftp-config
	 */
	@RequestMapping(value = "/serviceconfig/ftp/save/{ip}/{cc}", method = RequestMethod.POST)
	public String ftpSaveConfig(HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, ModelMap mm, @ModelAttribute(value = "Ftp") Ftp ftp,
			RedirectAttributes redirectAtt) {
		// Lay thong tin user và token tren session
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		// lay thong tin server cua user
		// kiem tra thong tin user dang nhap
		if (user != null && cc.equals(c)) {
			for (Server server : user.getServers()) {
				if (server.getServerAddress().equals(ip)) {
					Server sv = new Server(server);
					sv.setServerUsername((String) session.getAttribute("sudouser"));
					sv.setServerPassword((String) session.getAttribute("sudopass"));
					FtpConfig ftpconfig = new FtpConfig();
					// kiem tra dich vu ftp
					if (ftpconfig.checkInstall(sv) == true) {
						// Neu server da cai dat FTP
						mm.put("server", server);

						try {
							ftpconfig.uploadConfigToServer(sv, ftp);
							_log.info("Upload Config to server ");
							redirectAtt.addFlashAttribute("displaysuccess", "block");
							redirectAtt.addFlashAttribute("message", "Cập nhật thành công! (Update Success!)");

							mm.put("display", "block");
							mm.put("messageErr", "error: <pre>" + ftpconfig.getError(sv)+"</pre>");

						} catch (IOException e) {
							_log.info("Fail upload Config to server ");
							redirectAtt.addFlashAttribute("display", "block");
							redirectAtt.addFlashAttribute("message",
									"Khong the cap nhat len server (Cannot update to server)!");
						}

					} else { // check install
						mm.put("server", server);
						// neu chua cai dat, chuyen ve trang install
						return "ftp-config";
					}
				}// end fi check ip
			} // end for

		} else {
			return "redirect:/login";
		}
		return "redirect:/serviceconfig/ftp/" + ip + "/" + cc;
	}

	/**
	 * Sua file config ftp
	 * 
	 * @param request
	 * @param session
	 * @param ip
	 * @param c
	 * @param mm
	 * @param redirectAtt
	 * @return
	 */
	@RequestMapping(value = "/serviceconfig/ftp/editfile/{ip}/{cc}", method = RequestMethod.GET)
	public String ftpGetConfFile(HttpServletRequest request, HttpSession session,
			@PathVariable(value = "ip") String ip, @PathVariable(value = "cc") String c, ModelMap mm,
			RedirectAttributes redirectAtt) {
		// Lay thong tin user và token tren session
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		// lay thong tin server cua user
		// kiem tra thong tin user dang nhap
		if (user != null && cc.equals(c)) {
			for (Server server : user.getServers()) {
				if (server.getServerAddress().equals(ip)) {
					Server sv = new Server(server);
					sv.setServerUsername((String) session.getAttribute("sudouser"));
					sv.setServerPassword((String) session.getAttribute("sudopass"));
					FtpConfig ftpconfig = new FtpConfig();
					// kiem tra dich vu ftp
					String str = ftpconfig.loadConfigToPlainText(sv);
					mm.put("ftpconfig", str);
					return "ftp-file-content";
				}

			}
		} else {
			return "redirect:/login";
		}
		return "redirect:/";
	}

	/**
	 * Luu file FTp config
	 * 
	 * @param request
	 * @param session
	 * @param ip
	 * @param c
	 * @param mm
	 * @param ftp
	 * @param redirectAtt
	 * @return
	 */
	@RequestMapping(value = "/serviceconfig/ftp/editfile/{ip}/{cc}", method = RequestMethod.POST)
	public String ftpSaveConfFile(HttpServletRequest request, HttpSession session,
			@PathVariable(value = "ip") String ip, @PathVariable(value = "cc") String c, ModelMap mm,
			RedirectAttributes redirectAtt) {
		// Lay thong tin user và token tren session
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		// lay thong tin server cua user
		String configText = request.getParameter("ftpconfig");
		// System.out.println(configText);
		// kiem tra thong tin user dang nhap
		if (user != null && cc.equals(c)) {
			for (Server server : user.getServers()) {
				if (server.getServerAddress().equals(ip)) {
					Server sv = new Server(server);
					sv.setServerUsername((String) session.getAttribute("sudouser"));
					sv.setServerPassword((String) session.getAttribute("sudopass"));
					FtpConfig ftpconfig = new FtpConfig();
					// kiem tra dich vu ftp
					try {
						ftpconfig.uploadStringConfigToServer(sv, configText);
						_log.info("Upload FTP Config to server");
						redirectAtt.addFlashAttribute("displaysuccess", "block");
						redirectAtt.addFlashAttribute("message", "Upload file Success!");
//						redirectAtt.addFlashAttribute("display", "block");
//						redirectAtt.addFlashAttribute("messageErr", "error: " + ftpconfig.getError(sv));
					} catch (IOException e) {
						_log.info("Upload FTP Config to server");
						redirectAtt.addFlashAttribute("display", "block");
						redirectAtt.addFlashAttribute("message", "Upload file fail, please try again!");
						// redirectAtt.addFlashAttribute("display", "block");
						redirectAtt.addFlashAttribute("messageErr", "error: <pre>" + ftpconfig.getError(sv)+"</pre>");
					}
					return "redirect:/serviceconfig/ftp/" + ip + "/" + cc;
				}

			}
		} else {
			return "redirect:/login";
		}
		return "redirect:/";
	}

	/**
	 * Sang Trang Lay thong tin logfile
	 * 
	 * @param request
	 * @param session
	 * @param ip
	 * @param c
	 * @param mm
	 * @param redirectAtt
	 * @return
	 */
	@RequestMapping(value = "/serviceconfig/ftp/getlog/{ip}/{cc}", method = RequestMethod.GET)
	public String ftpGetLogs(HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, ModelMap mm, RedirectAttributes redirectAtt) {
		// Lay thong tin user và token tren session
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		// lay thong tin server cua user
		// kiem tra thong tin user dang nhap
		if (user != null && cc.equals(c)) {
			return "ftp-logs";
		} else {
			return "redirect:/login";
		}
	}

	/**
	 * Lay log
	 * 
	 * @param request
	 * @param session
	 * @param ip
	 * @param c
	 * @param redirectAtt
	 * @return
	 */
	@RequestMapping(value = "/serviceconfig/ftp/getlogs/{ip}/{cc}", method = RequestMethod.GET)
	@ResponseBody
	public String getFtpLogs(HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, RedirectAttributes redirectAtt) {
		String cc = (String) session.getAttribute("cc");
		User user = (User) session.getAttribute("user");
		if (user != null && c.equals(cc)) { // check user login
			Server server = serverDAO.getServer(user, ip);
			Server sv = new Server(server); // khoi tao server
			sv.setServerUsername((String) session.getAttribute("sudouser"));
			sv.setServerPassword((String) session.getAttribute("sudopass"));
			FtpConfig ftpConf = new FtpConfig();
			String logs = ftpConf.getLog(sv);
			if (logs != null) {
				return logs;
			} else {
				return "Khong lay duoc thong tin";
			}
		} else {
			return "Khong lay duoc thong tin";
		} // end check user
	}

	/**
	 * Lay ERR
	 * 
	 * @param request
	 * @param session
	 * @param ip
	 * @param c
	 * @param redirectAtt
	 * @return
	 */
	@RequestMapping(value = "/serviceconfig/ftp/geterrors/{ip}/{cc}", method = RequestMethod.GET)
	@ResponseBody
	public String getFtpErrors(HttpServletRequest request, HttpSession session, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, RedirectAttributes redirectAtt) {
		String cc = (String) session.getAttribute("cc");
		User user = (User) session.getAttribute("user");
		if (user != null && c.equals(cc)) { // check user login
			Server server = serverDAO.getServer(user, ip);
			Server sv = new Server(server); // khoi tao server
			sv.setServerUsername((String) session.getAttribute("sudouser"));
			sv.setServerPassword((String) session.getAttribute("sudopass"));
			FtpConfig fconfig = new FtpConfig();
			// String errors;
			return fconfig.getError(sv);

		} else {
			return "Khong lay duoc thong tin";
		} // end check user
	}

	@RequestMapping(value = "/serviceconfig/ftp/{action}/{ip}/{cc}", method = RequestMethod.GET)
	public String ftpAction(HttpServletRequest request, HttpSession session,
			@PathVariable(value = "action") String action, @PathVariable(value = "ip") String ip,
			@PathVariable(value = "cc") String c, ModelMap mm, RedirectAttributes redirectAtt) {
		User user = (User) session.getAttribute("user");
		String cc = (String) session.getAttribute("cc");
		// Lay doi tuong server trong CSDL
		// check User and token
		if (user != null && c.equals(cc)) {
			// Khoi tao doi tuong Server
			Server server = user.getServerByIp(ip);
			if (server != null) {
				Server sv = new Server(server);
				sv.setServerUsername((String) session.getAttribute("sudouser"));
				sv.setServerPassword((String) session.getAttribute("sudopass"));
				FtpConfig fconfig = new FtpConfig();
				if (action.equals("stop")) {
					fconfig.Stop(sv);
					// Log
					redirectAtt.addFlashAttribute("display", "block");
					redirectAtt.addFlashAttribute("messageErr", "error: " + fconfig.getError(sv));
					System.out.println("Stop : " + ip + " Ftp service");
				} else if (action.equals("start")) {
					fconfig.Start(sv);
					// Log]
					redirectAtt.addFlashAttribute("display", "block");
					redirectAtt.addFlashAttribute("messageErr", "error: " + fconfig.getError(sv));
					System.out.println("Start : " + ip + " Ftp service");
				} else if (action.equals("restart")) {
					fconfig.Restart(sv);
					// Log
					redirectAtt.addFlashAttribute("display", "block");
					redirectAtt.addFlashAttribute("messageErr", "error: " + fconfig.getError(sv));
					System.out.println("Restart : " + ip + " Ftp service");
				} else if (action.equals("remove")) {
					fconfig.Remove(sv);
					System.out.println("Delete : " + ip + ",Ftp service");
					redirectAtt.addFlashAttribute("de", "de");
					redirectAtt.addFlashAttribute("active", "active");
					return "redirect:/services/" + ip + "/" + c;
				} else {
					return "redirect:/serviceconfig/ftp/" + ip + "/" + c;
				}
				return "redirect:/serviceconfig/ftp/" + ip + "/" + c;
			}
			return "redirect:/serviceconfig/ftp/" + ip + "/" + c;
		}
		return "redirect:/login";
	}

	private static final Logger _log = Logger.getLogger(FTPController.class);
}
