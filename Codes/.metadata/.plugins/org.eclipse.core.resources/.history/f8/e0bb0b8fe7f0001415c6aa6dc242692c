$(document)
  .ajaxStart(function () {
    $(".wait")
      .css("display", "block");
  });
$(document)
  .ready(function () {
    var listServer = $('.server-listed');
    setInterval(function () {
      function check_server(index) {
        if (!listServer[index]) {
          return false;
        }
        var serverip = $(listServer[index])
          .attr('data-id');
        $.ajax({
            url: 'checkstatus/' + serverip + '/' + cc
            , type: 'GET'
            , data: {}
            , timeout: '10000'
            , error: function () {
              $(listServer[index])
                .find(".wait")
                .css("display", "none");
              $(listServer[index])
                .find(".i-server-icon").remove();
              $(listServer[index])
                .find(".i-server-icon-off")
                .css({
                  "display": "block"
                });
              $(listServer[index]).find(".show").removeClass("show").addClass("hidden");
            }
            , // neu load thnh cong
            success: function (data, status) {
              //data = $.trim(data);
              $(listServer[index])
                .find(".wait")
                .css("display", "none");
              if (data == "false") {
                $(listServer[index]).find(".i-server-icon").css({"display": "none"});
                $(listServer[index]).find(".i-server-icon-off").css({"display": "block"});
                $(listServer[index]).find(".disabled").addClass("disabled");
                $(listServer[index]).find(".info").removeClass("show").addClass("hidden")
              } else {
                $(listServer[index])
                  .find(".i-server-icon-off").remove();
                $(listServer[index]).find(".i-server-icon").css({"display": "block"});
                $(listServer[index]).find(".disabled").removeClass("disabled");
                $(listServer[index]).find(".info").removeClass("hidden").addClass("show");
                //load ram
                $.ajax({
                    url: 'getram/' + serverip + '/' + cc
                    , type: 'GET'
                    , data: {}
                    , timeout: '10000'
                    , error: function () {
                    	$("info_"+serverip).find(".ram")
                         .html("Can not get RAM info of this server...");
                    }, // neu load thnh cong
                    success: function (data, status) {
                     
                     if ((data[0] == "null") || (data[0] == "")) {
                    	 $(".info_"+serverip).find(".ram")
                         .html("Can not get RAM info of this server...");
                      }else{
                    	  var ramuse = parseFloat(data[0]) / 1024;
                          var ramtotal = parseFloat(data[1]) / 1024;
                          var ram = (ramuse / ramtotal) * 100;
                         
                          $(".info_"+serverip).html(ram.toFixed(2) + "% (" + ramuse.toFixed(2) + "/" + ramtotal.toFixed(2) + " MB)");
                          $(".info_"+serverip).find(".ram-bar").css({"width": ram + "%"});
                      }
                      }});
                //load CPU
                $.ajax({
                    url: 'getcpu/' + serverip + '/' + cc
                    , type: 'GET'
                    , cpu: {}
                    , timeout: '10000'
                    , error: function () {
                    	 $(".info_"+serverip)
                         .find(".cpu")
                         .html("Can not get CPU info of this server...");
                      }
                    , // neu load thnh cong
                    success: function (cpu, status) {
                      //data = $.trim(data);
                     if ((data == "null") || (cpu == "")) {
                    	 $(".info_"+serverip).find(".cpu")
                         .html("Can not get CPU info of this server...");
                      }else{
                    	  $("small.info_"+serverip).html(cpu + " %");
                    	  $(".info_"+serverip).find(".cpu-bar").css({"width": cpu + "%"});
                      }}});
              }
            }
          })
          .always(function () {
            check_server(++index);
          });
      }
      if (listServer.length > 0) {
        check_server(0);
      }
    }, 10000);
    // Check status sidebar
    var listleft = $('.list-server-left');
  });
$(function () {
  // INITIALIZE SPARKLINE CHARTS
  $(".sparkline")
    .each(function () {
      var $this = $(this);
      $this.sparkline('html', $this.data());
    });
  /*
   * SPARKLINE DOCUMENTAION EXAMPLES
   * http://omnipotent.net/jquery.sparkline/#s-about
   */
  drawDocSparklines();
});

function drawDocSparklines() {
  // Bar + line composite charts
  $('#compositebar')
    .sparkline('html', {
      type: 'bar'
      , barColor: '#aaf'
    });
  $('#compositebar')
    .sparkline(
   [4, 1, 5, 7, 9, 9, 8, 7, 6, 6, 4, 7, 8, 4, 3, 2, 2, 5, 6, 7], {
        composite: true
        , fillColor: false
        , lineColor: 'red'
      });
  // Line charts taking their values from the tag
  $('.sparkline-1')
    .sparkline();
  // Larger line charts for the docs
  $('.largeline')
    .sparkline('html', {
      type: 'line'
      , height: '2.5em'
      , width: '4em'
    });
  // Customized line chart
  $('#linecustom')
    .sparkline('html', {
      height: '1.5em'
      , width: '8em'
      , lineColor: '#f00'
      , fillColor: '#ffa'
      , minSpotColor: false
      , maxSpotColor: false
      , spotColor: '#77f'
      , spotRadius: 3
    });
  // Bar charts using inline values
  $('.sparkbar')
    .sparkline('html', {
      type: 'bar'
    });
  $('.barformat')
    .sparkline([1, 3, 5, 3, 8], {
      type: 'bar'
      , tooltipFormat: '{{value:levels}} - {{value}}'
      , tooltipValueLookups: {
        levels: $.range_map({
          ':2': 'Low'
          , '3:6': 'Medium'
          , '7:': 'High'
        })
      }
    });
  // Tri-state charts using inline values
  $('.sparktristate')
    .sparkline('html', {
      type: 'tristate'
    });
  $('.sparktristatecols')
    .sparkline('html', {
      type: 'tristate'
      , colorMap: {
        '-2': '#fa7'
        , '2': '#44f'
      }
    });
  // Composite line charts, the second using values supplied via javascript
  $('#compositeline')
    .sparkline('html', {
      fillColor: false
      , changeRangeMin: 0
      , chartRangeMax: 10
    });
  $('#compositeline')
    .sparkline(
   [4, 1, 5, 7, 9, 9, 8, 7, 6, 6, 4, 7, 8, 4, 3, 2, 2, 5, 6, 7], {
        composite: true
        , fillColor: false
        , lineColor: 'red'
        , changeRangeMin: 0
        , chartRangeMax: 10
      });
  // Line charts with normal range marker
  $('#normalline')
    .sparkline('html', {
      fillColor: false
      , normalRangeMin: -1
      , normalRangeMax: 8
    });
  $('#normalExample')
    .sparkline('html', {
      fillColor: false
      , normalRangeMin: 80
      , normalRangeMax: 95
      , normalRangeColor: '#4f4'
    });
  // Discrete charts
  $('.discrete1')
    .sparkline('html', {
      type: 'discrete'
      , lineColor: 'blue'
      , xwidth: 18
    });
  $('#discrete2')
    .sparkline('html', {
      type: 'discrete'
      , lineColor: 'blue'
      , thresholdColor: 'red'
      , thresholdValue: 4
    });
  // Bullet charts
  $('.sparkbullet')
    .sparkline('html', {
      type: 'bullet'
    });
  // Pie charts
  $('.sparkpie')
    .sparkline('html', {
      type: 'pie'
      , height: '1.0em'
    });
  // Box plots
  $('.sparkboxplot')
    .sparkline('html', {
      type: 'box'
    });
  $('.sparkboxplotraw')
    .sparkline([1, 3, 5, 8, 10, 15, 18], {
      type: 'box'
      , raw: true
      , showOutliers: true
      , target: 6
    });
  // Box plot with specific field order
  $('.boxfieldorder')
    .sparkline('html', {
      type: 'box'
      , tooltipFormatFieldlist: ['med', 'lq', 'uq']
      , tooltipFormatFieldlistKey: 'field'
    });
  // click event demo sparkline
  $('.clickdemo')
    .sparkline();
  $('.clickdemo')
    .bind('sparklineClick', function (ev) {
      var sparkline = ev.sparklines[0]
        , region = sparkline.getCurrentRegionFields();
      value = region.y;
      alert("Clicked on x=" + region.x + " y=" + region.y);
    });
  // mouseover event demo sparkline
  $('.mouseoverdemo')
    .sparkline();
  $('.mouseoverdemo')
    .bind('sparklineRegionChange', function (ev) {
      var sparkline = ev.sparklines[0]
        , region = sparkline.getCurrentRegionFields();
      value = region.y;
      $('.mouseoverregion')
        .text("x=" + region.x + " y=" + region.y);
    })
    .bind('mouseleave', function () {
      $('.mouseoverregion')
        .text('');
    });
}
